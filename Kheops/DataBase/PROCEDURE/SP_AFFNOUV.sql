CREATE OR REPLACE PROCEDURE SP_AFFNOUV ( 
	IN P_CODEOFFRE CHAR(9) , 
	IN P_VERSION INTEGER , 
	IN P_TYPE CHAR(1) , 
	IN P_CODECONTRAT CHAR(9) , 
	IN P_VERSIONCONTRAT INTEGER , 
	IN P_DATESYSTEME CHAR(8) , 
	IN P_USER CHAR(15) , 
	IN P_TRAITEMENT CHAR(1) ) 
	LANGUAGE SQL 
	SPECIFIC SP_AFFNOUV 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	CLOSQLCSR = *ENDMOD , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = ZALBINKHEO , 
	DYNDFTCOL = *YES , 
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC 
	DECLARE V_COUNTOBJ INTEGER DEFAULT 0 ; 
	 
	DECLARE V_OBJ INTEGER DEFAULT 0 ; 
	DECLARE V_BRA CHAR ( 2 ) DEFAULT '' ; 
	DECLARE V_SBR CHAR ( 3 ) DEFAULT '' ; 
	DECLARE V_CAT CHAR ( 5 ) DEFAULT '' ; 
	DECLARE V_VAL DECIMAL ( 11 , 0 ) DEFAULT 0 ; 
	DECLARE V_VAA DECIMAL ( 11 , 0 ) DEFAULT 0 ; 
	DECLARE V_VAW DECIMAL ( 11 , 0 ) DEFAULT 0 ; 
	DECLARE V_VAT CHAR ( 5 ) DEFAULT '' ; 
	DECLARE V_VAU CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_VAH CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_CIBLE CHAR ( 10 ) DEFAULT '' ; 
	DECLARE V_DESC CHAR ( 40 ) DEFAULT '' ; 
	DECLARE V_VDA NUMERIC ( 4 , 0 ) DEFAULT 0 ; 
	DECLARE V_VDM NUMERIC ( 2 , 0 ) DEFAULT 0 ; 
	DECLARE V_VDJ NUMERIC ( 2 , 0 ) DEFAULT 0 ; 
	DECLARE V_VDH DECIMAL ( 4 , 0 ) DEFAULT 0 ; 
	DECLARE V_VFA NUMERIC ( 4 , 0 ) DEFAULT 0 ; 
	DECLARE V_VFM NUMERIC ( 2 , 0 ) DEFAULT 0 ; 
	DECLARE V_VFJ NUMERIC ( 2 , 0 ) DEFAULT 0 ; 
	DECLARE V_VFH DECIMAL ( 4 , 0 ) DEFAULT 0 ; 
	 
	DECLARE V_MODE_COPIE CHAR ( 7 ) DEFAULT 'AFFNOUV' ; 
	DECLARE V_SITUATION CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_NEWCODEINVEN INTEGER DEFAULT 0 ; 
	 
	DECLARE V_EXIT INTEGER DEFAULT 0 ; 
	DECLARE V_NUMCHRRSQ INTEGER DEFAULT 0 ; 
	DECLARE V_NUMCHROFF INTEGER DEFAULT 0 ; 
	DECLARE V_NEWDESIID INTEGER DEFAULT 0 ; 
	DECLARE V_OLDDESIID INTEGER DEFAULT 0 ; 
	DECLARE V_OLDKAAOBSF INTEGER DEFAULT 0 ; 
	DECLARE V_NEWKAAOBSF INTEGER DEFAULT 0 ; 

	SET P_CODEOFFRE = LPAD ( RTRIM ( P_CODEOFFRE ) , 9 , ' ' ) ; 
	SET P_CODECONTRAT = LPAD ( RTRIM ( P_CODECONTRAT ) , 9 , ' ' ) ; 

	 -- VALEUR POSSIBLE DANS P_TRAITEMENT : P (POLICE) 
	SELECT KHFSIT INTO V_SITUATION FROM KPOFENT WHERE KFHPOG = P_CODECONTRAT AND KFHALG = P_VERSIONCONTRAT ; 
	 
	IF ( V_SITUATION != 'V' ) THEN 
	 
		DELETE FROM KPCOPID WHERE KFLTYP = P_TYPE AND KFLIPB = P_CODEOFFRE AND KFLALX = P_VERSION ; 

		CALL SP_CRSQ ( P_CODEOFFRE , P_VERSION , P_TYPE , 0 , P_CODECONTRAT , P_VERSIONCONTRAT , P_TRAITEMENT , '' , 0 , V_MODE_COPIE ) ; 
		 
		CALL SP_ADR ( P_CODEOFFRE , P_VERSION , P_TYPE , 0 , P_CODECONTRAT , P_VERSIONCONTRAT , P_TRAITEMENT ) ; 
		 
		CALL SP_CFORMUL ( P_CODEOFFRE , P_VERSION , P_TYPE , 0 , P_CODECONTRAT , P_VERSIONCONTRAT , P_DATESYSTEME , P_USER , P_TRAITEMENT , '' , 0 , V_MODE_COPIE ) ; 
		 
		CALL SP_CINVEN ( P_CODEOFFRE , P_VERSION , P_TYPE , 0 , 0 , P_CODECONTRAT , P_VERSIONCONTRAT , P_TRAITEMENT , '' , 0 , V_MODE_COPIE , V_NEWCODEINVEN ) ; 
		 
		CALL SP_CKCOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , P_CODECONTRAT , P_VERSIONCONTRAT , 'P' ) ; 
		 
		CALL SP_CINFOSP ( P_CODEOFFRE , P_VERSION , P_TYPE , 0 , P_CODECONTRAT , P_VERSIONCONTRAT , P_TRAITEMENT , '' , 0 , V_MODE_COPIE ) ; 
		 
		CALL SP_CCLAUSE ( P_CODEOFFRE , P_VERSION , P_TYPE , 0 , P_CODECONTRAT , P_VERSIONCONTRAT , P_TRAITEMENT , '' , 0 , V_MODE_COPIE ) ; 
		 
		CALL SP_CINTERV ( P_CODEOFFRE , P_VERSION , P_TYPE , P_CODECONTRAT , P_VERSIONCONTRAT , 'P' , V_MODE_COPIE ) ; 
		 
		CALL SP_COPIEDOCEXT ( P_CODEOFFRE , P_VERSION , P_TYPE , P_CODECONTRAT , P_VERSIONCONTRAT , 'P' , V_MODE_COPIE , P_DATESYSTEME , P_USER ) ; 
		 
		CALL SP_COPOP ( P_CODEOFFRE , P_VERSION , P_TYPE , P_CODECONTRAT , 'P' , P_VERSIONCONTRAT ) ; 
		 
		UPDATE KPOFENT 
			SET KHFSIT = 'V' 
			WHERE KFHPOG = P_CODECONTRAT AND KFHALG = P_VERSIONCONTRAT ; 
			 
		/* SUPPRESSION DES RISQUES/FORMULES/OPTIONS/TARIFS NON SÉLECTIONNÉS */	 
		 
		FOR LOOP_FRSQ AS FREE_LIST CURSOR FOR 
			SELECT KFITYE TYP , KFIRSQ RSQ , KFIOBJ OBJ FROM KPOFRSQ WHERE TRIM ( KFIPOG ) = TRIM ( P_CODECONTRAT ) AND KFIALG = P_VERSIONCONTRAT AND KFISEL <> 'O' 
		DO 
			CASE TYP 
				WHEN 'R' THEN 
					CALL SP_DELRSQ ( P_CODECONTRAT , P_VERSIONCONTRAT , 'P' , RSQ ) ; 
				WHEN 'O' THEN 
					CALL SP_DELOBJETRISQUE ( P_CODECONTRAT , P_VERSIONCONTRAT , 'P' , RSQ , OBJ , 0 ) ; 
				ELSE 
					SET V_EXIT = 1 ; 
			END CASE ; 
		END FOR ; 
		
		FOR LOOP_FTAR AS FREE_LIST CURSOR FOR 
			SELECT KFKKDGID TARID FROM KPOFTAR WHERE TRIM ( KFKPOG ) = TRIM ( P_CODECONTRAT ) AND KFKALG = P_VERSIONCONTRAT AND KFKSEL != 'O' 
		DO 
			DELETE FROM KPGARTAR WHERE KDGID = TARID ; 
		END FOR ; 
			 
			 
		/* FIN SUPPRESSION */		 
		 
		FOR LOOP_RSQ AS FREE_LIST CURSOR FOR 
			SELECT JERSQ CODERSQ FROM YPRTRSQ 
				WHERE JEIPB = P_CODECONTRAT AND JEALX = P_VERSIONCONTRAT 
		DO 
			SELECT COUNT ( * ) INTO V_COUNTOBJ FROM YPRTOBJ WHERE JGIPB = P_CODECONTRAT AND JGALX = P_VERSIONCONTRAT AND JGRSQ = CODERSQ ; 
			IF ( V_COUNTOBJ = 1 ) THEN 
				SELECT JGOBJ , JGBRA , JGSBR , JGCAT , JGVAL , JGVAA , JGVAW , JGVAT , JGVAU , JGVAH , KACCIBLE , KACDESC , 
					JGVDA , JGVDM , JGVDJ , JGVDH , JGVFA , JGVFM , JGVFJ , JGVFH 
				INTO V_OBJ , V_BRA , V_SBR , V_CAT , V_VAL , V_VAA , V_VAW , V_VAT , V_VAU , V_VAH , V_CIBLE , V_DESC , 
					V_VDA , V_VDM , V_VDJ , V_VDH , V_VFA , V_VFM , V_VFJ , V_VFH 
					FROM YPRTOBJ 
						INNER JOIN KPOBJ ON KACIPB = JGIPB AND KACALX = JGALX AND KACTYP = 'P' AND KACRSQ = JGRSQ AND KACOBJ = JGOBJ 
					WHERE JGIPB = P_CODECONTRAT AND JGALX = P_VERSIONCONTRAT AND JGRSQ = CODERSQ ; 
				 
				UPDATE YPRTRSQ 
					SET JEOBJ = V_OBJ , JEBRA = V_BRA , JESBR = V_SBR , JECAT = V_CAT , JEVAL = V_VAL , JEVAA = V_VAA , JEVAW = V_VAW , 
					JEVAT = V_VAT , JEVAU = V_VAU , JEVAH = V_VAH , 
					JEVDA = V_VDA , JEVDM = V_VDM , JEVDJ = V_VDJ , JEVDH = V_VDH , 
					JEVFA = V_VFA , JEVFM = V_VFM , JEVFJ = V_VFJ , JEVFH = V_VFH 
					WHERE JEIPB = P_CODECONTRAT AND JEALX = P_VERSIONCONTRAT AND JERSQ = CODERSQ ; 
				 
				UPDATE KPRSQ 
					SET KABCIBLE = V_CIBLE , KABDESC = V_DESC 
					WHERE KABIPB = P_CODECONTRAT AND KABALX = P_VERSIONCONTRAT AND KABTYP = 'P' AND KABRSQ = CODERSQ ; 
			ELSE 
				P2 : BEGIN ATOMIC 
					DECLARE V_SUMOBJ DECIMAL ( 11 , 0 ) DEFAULT 0 ; 
					DECLARE V_UNITOBJ CHAR ( 1 ) DEFAULT '' ; 
					DECLARE V_TYPOBJ CHAR ( 1 ) DEFAULT '' ; 
					DECLARE V_VALHTOBJ CHAR ( 1 ) DEFAULT '' ; 
					DECLARE V_ENSTYPOBJ CHAR ( 5 ) DEFAULT '' ; 
					DECLARE V_ERRORCALCUL INTEGER DEFAULT 0 ; 
					DECLARE V_ERRORHT INTEGER DEFAULT 0 ; 
					 
					FOR LOOP_OBJ AS FREE_LIST CURSOR FOR 
						SELECT JGVAL OBJVAL , JGVAU OBJUNIT , JGVAT OBJTYPE , JGVAH OBJHT , KGMTYVAL OBJENSTYPE 
						FROM YPRTOBJ 
							LEFT JOIN KTYPVALD ON KGMBASE = JGVAT 
						WHERE JGIPB = P_CODECONTRAT AND JGALX = P_VERSIONCONTRAT AND JGRSQ = CODERSQ 
					DO 
						/* VÉRIFICATION DE LA VALEUR DE L'OBJET */ 
						IF ( V_ERRORCALCUL = 0 AND OBJVAL > 0 ) THEN 
							SET V_SUMOBJ = V_SUMOBJ + OBJVAL ; 
						ELSE 
							SET V_ERRORCALCUL = 1 ; 
						END IF ; 
						/* VÉRIFICATION DE L'UNITÉ DE L'OBJET */ 
						IF ( V_ERRORCALCUL = 0 AND OBJUNIT != '' ) THEN 
							IF ( V_UNITOBJ != '' AND V_UNITOBJ != OBJUNIT ) THEN 
								SET V_ERRORCALCUL = 1 ; 
							ELSE 
								SET V_UNITOBJ = OBJUNIT ; 
							END IF ; 
						ELSE 
							SET V_ERRORCALCUL = 1 ; 
						END IF ; 
						/* VÉRIFICATION DU TYPE DE L'OBJET */ 
						IF ( V_ERRORCALCUL = 0 AND OBJTYPE != '' ) THEN 
							IF ( V_TYPOBJ != '' AND V_TYPOBJ != OBJTYPE AND V_ENSTYPOBJ != OBJENSTYPE ) THEN 
								SET V_ERRORCALCUL = 1 ; 
							ELSE 
								SET V_TYPOBJ = OBJTYPE ; 
								SET V_ENSTYPOBJ = OBJENSTYPE ; 
							END IF ; 
						ELSE 
							SET V_ERRORCALCUL = 1 ; 
						END IF ; 
						/* VÉRIFICATION DU HT DE L'OBJET */ 
						IF ( V_ERRORHT = 0 ) THEN 
							IF ( V_VALHTOBJ != '' AND OBJHT != V_VALHTOBJ ) THEN 
								SET V_ERRORHT = 1 ; 
								SET V_VALHTOBJ = '' ; 
							ELSE 
								SET V_VALHTOBJ = OBJHT ; 
							END IF ; 
						END IF ; 
					END FOR ; 
					 
					IF ( V_ERRORCALCUL = 0 ) THEN 
						UPDATE YPRTRSQ 
							SET JEVAL = V_SUMOBJ , JEVAA = V_SUMOBJ , JEVAU = V_UNITOBJ , JEVAT = V_TYPOBJ , JEVAH = V_VALHTOBJ 
						WHERE JEIPB = P_CODECONTRAT AND JEALX = P_VERSIONCONTRAT AND JERSQ = CODERSQ ; 
					END IF ; 
				END P2 ; 
			END IF ; 
		END FOR ; 
		 
		/* COPIE DES DESIGNATIONS ANTECEDENT*/ 
		SELECT KAAAND , KAAOBSF INTO V_OLDDESIID , V_OLDKAAOBSF FROM KPENT WHERE KAAIPB = P_CODEOFFRE AND KAAALX = P_VERSION AND KAATYP = P_TYPE ; 
		 
		IF ( V_OLDDESIID > 0 ) THEN 
			CALL SP_NCHRONO ( 'KADCHR' , V_NEWDESIID ) ; 
			INSERT INTO KPDESI 
				( SELECT V_NEWDESIID , 'P' , P_CODECONTRAT , P_VERSIONCONTRAT , KADPERI , KADRSQ , KADOBJ , KADDESI 
					FROM KPDESI 
					WHERE KADCHR = V_OLDDESIID ) ; 
					 
			UPDATE KPENT 
				SET KAAAND = V_NEWDESIID 
			WHERE KAAIPB = P_CODECONTRAT AND KAAALX = P_VERSIONCONTRAT AND KAATYP = 'P' ; 
		END IF ; 
		 
		IF ( V_OLDKAAOBSF > 0 ) THEN 
			CALL SP_NCHRONO ( 'KAJCHR' , V_NEWKAAOBSF ) ; 
			INSERT INTO KPOBSV 
				( SELECT V_NEWKAAOBSF , 'P' , P_CODECONTRAT , P_VERSIONCONTRAT , KAJTYPOBS , KAJOBSV 
					FROM KPOBSV 
					WHERE KAJCHR = V_OLDKAAOBSF ) ; 
					 
			UPDATE KPENT 
				SET KAAOBSF = V_NEWKAAOBSF 
			WHERE KAAIPB = P_CODECONTRAT AND KAAALX = P_VERSIONCONTRAT AND KAATYP = 'P' ; 
		END IF ; 
		/* FIN COPIE DES DESIGNATIONS */ 
		 
		/* MODIF 2015-03-11 : RAJOUT DU CALCUL DE L'ASSIETTE APRÈS LA CRÉATION DE L'AFFAIRE NOUVELLE */ 
		CALL SP_CALCULASSIETTE ( P_CODECONTRAT , P_VERSIONCONTRAT , 'P' ) ; 
		 
		/* MODIF 2015-06-18 : RAJOUT DU REMAPPAGE DES GARANTIES */ 
		CALL SP_MAPFORMULEGARANTIE ( P_CODECONTRAT , P_VERSIONCONTRAT , 'P' , P_DATESYSTEME ) ; 

		DELETE FROM KPOFRSQ k WHERE KFIPOG = P_CODECONTRAT;
		DELETE FROM KPOFENT k WHERE KFHPOG = P_CODECONTRAT;
		DELETE FROM KPOFOPT k WHERE KFJPOG = P_CODECONTRAT;
		DELETE FROM KPOFTAR k WHERE KFKPOG = P_CODECONTRAT;

	END IF ; 
  
END P1  ; 
  

  

