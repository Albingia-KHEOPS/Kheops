CREATE OR REPLACE PROCEDURE  SP_ALIMCTRL ( 
	IN P_CODE CHAR(9) , 
	IN P_VERSION INTEGER , 
	IN P_TYPE CHAR(1) , 
	IN P_USER CHAR(10) , 
	IN P_DATE INTEGER , 
	IN P_HEURE INTEGER , 
	IN P_ISMODIFHORSAVN INTEGER , 
	IN P_ISAVENANT INTEGER ,
    IN P_REGULID INTEGER ) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	CLOSQLCSR = *ENDMOD , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = ZALBINKHEO , 
	DYNDFTCOL = *YES , 
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC 
  
	 --DECLARATION DES VARIABLES DE CONTRÔLE 
	DECLARE V_ACTEGES CHAR ( 5 ) DEFAULT '' ; 
	DECLARE V_BRANCHE CHAR ( 2 ) DEFAULT '' ; 
	DECLARE V_CODEAVN INTEGER DEFAULT 0 ; 
	DECLARE V_EFFETANNEE INTEGER DEFAULT 0 ; 
	DECLARE V_EFFETMOIS INTEGER DEFAULT 0 ; 
	DECLARE V_EFFETJOUR INTEGER DEFAULT 0 ; 
	DECLARE V_FINEFFETANNEE INTEGER DEFAULT 0 ; 
	DECLARE V_FINEFFETMOIS INTEGER DEFAULT 0 ; 
	DECLARE V_FINEFFETJOUR INTEGER DEFAULT 0 ; 
	DECLARE V_DEBGARANNEE INTEGER DEFAULT 0 ; 
	DECLARE V_DEBGARMOIS INTEGER DEFAULT 0 ; 
	DECLARE V_DEBGARJOUR INTEGER DEFAULT 0 ; 
	DECLARE V_FINGARANNEE INTEGER DEFAULT 0 ; 
	DECLARE V_FINGARMOIS INTEGER DEFAULT 0 ; 
	DECLARE V_FINGARJOUR INTEGER DEFAULT 0 ; 
	DECLARE V_CATNATOBJ CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_CATNATGEN CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_INDEXOBJ CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_INDEXGEN CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_INTERCALGEN CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_COUNT INTEGER DEFAULT 0 ; 
	DECLARE V_REGIMETAXEGEN CHAR ( 1 ) DEFAULT '' ; 
  
	DECLARE V_EFFETAVTJOUR INTEGER DEFAULT 0 ; 
	DECLARE V_EFFETAVTMOIS INTEGER DEFAULT 0 ; 
	DECLARE V_EFFETAVTANNEE INTEGER DEFAULT 0 ; 
  
	DECLARE V_PROCHECHJOUR INTEGER DEFAULT 0 ; 
	DECLARE V_PROCHECHMOIS INTEGER DEFAULT 0 ; 
	DECLARE V_PROCHECHANNEE INTEGER DEFAULT 0 ; 
	DECLARE V_PROCHECH INTEGER DEFAULT 0 ; 
  
	DECLARE V_MINDEBRSQGAR INTEGER DEFAULT 0 ; 
	DECLARE V_MINNBRRSQ	INTEGER DEFAULT 0 ; 
	DECLARE V_MAXFINRSQGAR INTEGER DEFAULT 0 ; 
	DECLARE V_MINFINRSQGAR INTEGER DEFAULT 0;
	DECLARE V_MAXNBRRSQ	INTEGER DEFAULT 0 ; 
  
	DECLARE V_DATEMODIFRSQ INTEGER DEFAULT 0 ; 
	DECLARE V_DATEFINEFFET INTEGER DEFAULT 0 ; 
	DECLARE V_DATEFINEFFETRSQ INTEGER DEFAULT 0 ; 
	DECLARE V_ERRORRSQ INTEGER DEFAULT 0 ; 
	DECLARE V_ERRORFOR INTEGER DEFAULT 0 ; 
  
	DECLARE V_MNTHT DECIMAL ( 11 , 2 ) DEFAULT 0 ; 
  
	DECLARE V_REGULEID NUMERIC ( 15 , 0 ) DEFAULT 0 ; 
	DECLARE V_PBPER CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_PBMER CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_PARTALBINGIA INTEGER DEFAULT 0 ; 
	DECLARE V_MONTANT DECIMAL ( 11 , 2 ) DEFAULT 0 ; 
	DECLARE V_TPCA CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_SUMMNT DECIMAL ( 11 , 2 ) DEFAULT 0 ; 
	DECLARE V_GARANTIE CHAR ( 10 ) DEFAULT '' ; 
	DECLARE V_SITUATION CHAR ( 10 ) DEFAULT '' ; 
	DECLARE V_MSG CHAR ( 50 ) DEFAULT '' ; 
	DECLARE V_DATEHEURE NUMERIC ( 14 , 0 ) DEFAULT 0 ; 
	DECLARE V_DATEDEBUT TIMESTAMP ; 
	DECLARE V_NEWDATE TIMESTAMP ; 
	DECLARE V_DATEDEB NUMERIC ( 14 , 0 ) DEFAULT 0 ; 
	DECLARE V_DATEDEBSTD NUMERIC ( 12 , 0 ) ; 
	DECLARE V_DATEFINSTD NUMERIC ( 12 , 0 ) ; 
	DECLARE V_DUREEGAR INTEGER DEFAULT 0 ; 
	DECLARE V_REFERENTIEL CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_ETAT CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_MOTIF CHAR ( 3 ) DEFAULT '' ; 
	 --DECLARE V_RETOUR INTEGER DEFAULT 0 ; 
	DECLARE V_FINEFFET NUMERIC ( 12 , 0 ) ; 
	DECLARE V_OLDFINEFFET NUMERIC ( 12 , 0 ) ; 
	DECLARE V_DATEFINHEURE TIMESTAMP ; 
	DECLARE V_HEURESTD INTEGER DEFAULT 0 ; 
	DECLARE V_DATEFSTD INTEGER DEFAULT 0 ; 
	DECLARE V_HEUREDEB INTEGER DEFAULT 0 ; 
	DECLARE V_FERME INTEGER DEFAULT 0 ; 
  
	DECLARE V_DATEDEBRETURNCOL NUMERIC ( 12 , 0 ) ; 
	DECLARE V_DATEFINRETURNCOL NUMERIC ( 12 , 0 ) ; 
  
	DECLARE V_NATURECONTRAT CHAR ( 3 ) DEFAULT '' ; 
	DECLARE V_BCTRL INTEGER DEFAULT 0;

	DECLARE V_DEB_STD NUMERIC(12, 0) DEFAULT 0;
	DECLARE V_FIN_STD NUMERIC(12, 0) DEFAULT 0;
	declare v_messagectrl char(100) default '';
	
	DECLARE V_LTA CHAR(1) DEFAULT ''; 
	DECLARE V_DEBLTA NUMERIC(12, 0) DEFAULT 0; 
	DECLARE V_FINLTA NUMERIC(12, 0) DEFAULT 0; 
	DECLARE V_DEBEFF NUMERIC(12, 0) DEFAULT 0; 
	DECLARE V_FINEFF NUMERIC(12, 0) DEFAULT 0;
  
	DECLARE V_SUMCOM NUMERIC(5,2) DEFAULT 0;
  
  	SET P_CODE = F_PADLEFT ( 9 , TRIM ( P_CODE ) );

	 --RECUP DES DONNÉES COMPLÉMENTAIRES 
	SELECT JDCNA , JDINA , JDITC , JDPEA , JDPEM , JDPEJ 
	INTO V_CATNATGEN , V_INDEXGEN , V_INTERCALGEN , V_PROCHECHANNEE , V_PROCHECHMOIS , V_PROCHECHJOUR 
	FROM YPRTENT 
	WHERE JDIPB = P_CODE AND JDALX = P_VERSION ; 
  
	SET V_PROCHECH = V_PROCHECHANNEE * 10000 + V_PROCHECHMOIS * 100 + V_PROCHECHJOUR ; 
  
	 --SUPPRESSION DE TOUS LES ENREGISTREMENTS DAND KPCTRL 
	DELETE FROM KPCTRL WHERE KEUTYP = P_TYPE AND KEUIPB = P_CODE AND KEUALX = P_VERSION ; 
  
	 --VERIFICATION DATE EFFET 
	SELECT TRIM ( PBETA ) , TRIM ( PBSTF ) , PBEFJ , PBEFM , PBEFA , PBFEJ , PBFEM , PBFEA , PBAVJ , PBAVM , PBAVA , PBAVN , TRIM ( PBTTR ) , PBPER , PBMER , PBNPL 
	INTO V_ETAT , V_MOTIF , V_EFFETJOUR , V_EFFETMOIS , V_EFFETANNEE , V_FINEFFETJOUR , V_FINEFFETMOIS , V_FINEFFETANNEE , V_EFFETAVTJOUR , V_EFFETAVTMOIS , V_EFFETAVTANNEE , V_CODEAVN , V_ACTEGES , V_PBPER , V_PBMER , V_NATURECONTRAT 
	FROM YPOBASE 
	WHERE PBIPB = P_CODE AND PBALX = P_VERSION AND PBTYP = P_TYPE ; 
	 
	IF ( NOT ( P_TYPE = 'O' AND V_MOTIF = 'AAS' AND V_ETAT = 'A' ) ) THEN 
		IF ( P_ISMODIFHORSAVN <> 0 ) THEN 
			SET V_FINEFFET = 0 ; 
			SET V_OLDFINEFFET = 0 ; 
			SELECT ( PBFEA * 10000 + PBFEM * 100 + PBFEJ ) , ( KIFFEA * 10000 + KIFFEM * 100 + KIFFEJ ) 
			INTO V_FINEFFET , V_OLDFINEFFET 
			FROM YPOBASE 
			INNER JOIN KPVALH ON PBTYP = KIFTYP AND PBIPB = KIFIPB AND PBALX = KIFALX AND PBAVN = KIFAVN AND KIFPERI = 'GEN' 
			WHERE PBTYP = P_TYPE AND PBIPB = P_CODE AND PBALX = P_VERSION ; 
					 
			IF ( V_FINEFFET <> V_OLDFINEFFET ) THEN 
				CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'GEN' , 10 , 'GEN' , 0 , 0 , 0 , 0 , 0 , 0 , '' , 'Date de fin d''effet a été modifiée' , 'A' , P_USER , P_DATE , P_HEURE ) ; 
			END IF ; 
		ELSE 
			SET V_DATEFINEFFET = V_FINEFFETANNEE * 10000 + V_FINEFFETMOIS * 100 + V_FINEFFETJOUR ; 
			 
			IF ( V_EFFETJOUR = 0 OR V_EFFETMOIS = 0 OR V_EFFETANNEE = 0 ) THEN 
				CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'GEN' , 10 , 'GEN' , 0 , 0 , 0 , 0 , 0 , 0 , '' , 'Date d''effet non renseignée' , 'A' , P_USER , P_DATE , P_HEURE ) ; 
			END IF ; 
				 
			 --VÉRIFICATION DES RISQUES ET OBJETS 
			FOR LOOP_RSQ AS FREE_LISTRSQ CURSOR FOR 
				SELECT JERSQ NUMRISQUE , JEOBJ ISMONO , 
				JEVDA DEBRSQGARANNEE , JEVDM DEBRSQGARMOIS , JEVDJ DEBRSQGARJOUR , 
				JEVFA FINRSQGARANNEE , JEVFM FINRSQGARMOIS , JEVFJ FINRSQGARJOUR , 
				JECNA CATNATRSQ , JEINA INDEXRSQ , 
				JEAVA MODIFANNEE , JEAVM MODIFMOIS , JEAVJ MODIFJOUR , JEAVF MODIFAVN , JERGT REGIMETAXE 
				FROM YPRTRSQ				 
				WHERE JEIPB = P_CODE AND JEALX = P_VERSION ORDER BY JECCH 
			DO 
			 -- CONTROLE REGIME DE TAXE : BUG429 
				IF ( V_NATURECONTRAT = 'C' OR V_NATURECONTRAT = 'D' ) THEN 
					IF ( REGIMETAXE <> '0' AND REGIMETAXE <> '' ) THEN 
						CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'RSQ' , 30 , 'RSQ' , NUMRISQUE , 0 , 0 , 0 , 0 , 0 , '' , 'Le régime de taxe doit être "0-sans taxe" pour un contrat de nature C ou D ' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
					END IF ; 
				END IF ; 
				 
				SET V_ERRORRSQ = 0 ; 
				SET V_DATEMODIFRSQ = 0 ; 
				 
				IF ( MODIFANNEE > 0 AND MODIFMOIS > 0 AND MODIFJOUR > 0 ) THEN 
					SET V_DATEMODIFRSQ = MODIFANNEE * 10000 + MODIFMOIS * 100 + MODIFJOUR ; 
					/* TEST DE LA DATE D'EFFET D'AVENANT */ 
					IF ( V_ERRORRSQ = 0 AND V_DATEMODIFRSQ < ( V_EFFETAVTANNEE * 10000 + V_EFFETAVTMOIS * 100 + V_EFFETAVTJOUR ) AND V_CODEAVN = MODIFAVN ) THEN 
						SET V_ERRORRSQ = 1 ; 
						CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'RSQ' , 30 , 'RSQ' , NUMRISQUE , 0 , 0 , 0 , 0 , 0 , '' , 'Incohérence de dates du risque' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
					END IF ; 
					/* TEST DE LA PROCHAINE ÉCHÉANCE */ 
					IF ( V_ERRORRSQ = 0 AND V_PROCHECH > 0 ) THEN 
						IF ( V_DATEMODIFRSQ > V_PROCHECH AND V_CODEAVN = MODIFAVN ) THEN 
							SET V_ERRORRSQ = 1 ; 
							CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'RSQ' , 30 , 'RSQ' , NUMRISQUE , 0 , 0 , 0 , 0 , 0 , '' , 'Incohérence de dates du risque' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
						END IF ; 
					END IF ; 
					/* TEST DE LA DATE DE FIN D'EFFET */ 
					IF ( V_ERRORRSQ = 0 AND V_DATEFINEFFET > 0 ) THEN 
						IF ( V_DATEMODIFRSQ > V_DATEFINEFFET AND V_CODEAVN = MODIFAVN ) THEN 
							SET V_ERRORRSQ = 1 ; 
							CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'RSQ' , 30 , 'RSQ' , NUMRISQUE , 0 , 0 , 0 , 0 , 0 , '' , 'Incohérence de dates du risque' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
						END IF ; 
					END IF ; 
					/* TEST DE LA DATE D'EFFET DU RSQ */ 
					IF ( V_ERRORRSQ = 0 AND ( DEBRSQGARANNEE * 10000 + DEBRSQGARMOIS * 100 + DEBRSQGARJOUR ) > 0 ) THEN 
						IF ( V_DATEMODIFRSQ < ( DEBRSQGARANNEE * 10000 + DEBRSQGARMOIS * 100 + DEBRSQGARJOUR ) AND V_CODEAVN = MODIFAVN ) THEN 
							SET V_ERRORRSQ = 1 ; 
							CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'RSQ' , 30 , 'RSQ' , NUMRISQUE , 0 , 0 , 0 , 0 , 0 , '' , 'Incohérence de dates du risque' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
						END IF ; 
					END IF ; 
				END IF ; 
				 
				 --CONTROLE DE VALIDATION DU RISQUE 
				IF ( V_CODEAVN = MODIFAVN ) THEN	 
					SET V_COUNT = 0 ; 
					SELECT COUNT ( * ) INTO V_COUNT FROM KPCTRLE WHERE KEVIPB = P_CODE AND KEVALX = P_VERSION AND KEVTYP = P_TYPE AND KEVETAPE = 'RSQ' AND KEVRSQ = NUMRISQUE ; 
					IF ( V_COUNT = 0 ) THEN 
						CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'RSQ' , 30 , 'RSQ' , NUMRISQUE , 0 , 0 , 0 , 0 , 0 , '' , 'Etape du risque non validée' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
					END IF ; 
				END IF ; 
			 
				 --ETAPE RISQUE 
				 --MONO OBJET 
				IF ( ISMONO <> 0 ) THEN 
				 
					SELECT JGVDA , JGVDM , JGVDJ , JGVFA , JGVFM , JGVFJ , JGCNA , JGINA INTO V_DEBGARANNEE , V_DEBGARMOIS , V_DEBGARJOUR , V_FINGARANNEE , V_FINGARMOIS , V_FINGARJOUR , V_CATNATOBJ , V_INDEXOBJ 
					FROM YPRTOBJ 
					WHERE JGIPB = P_CODE AND JGALX = P_VERSION AND JGRSQ = NUMRISQUE AND JGOBJ = ISMONO ; 
					 
					 --DATE DÉBUT 
					IF ( V_DEBGARANNEE > 0 AND V_DEBGARMOIS > 0 AND V_FINGARJOUR > 0 ) THEN 
						IF ( V_EFFETJOUR > 0 AND V_EFFETMOIS > 0 AND V_EFFETANNEE > 0 ) THEN 
							IF ( ( V_DEBGARANNEE * 10000 + V_DEBGARMOIS * 100 + V_DEBGARJOUR ) < ( V_EFFETANNEE * 10000 + V_EFFETMOIS * 100 + V_EFFETJOUR ) ) THEN 
								CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'RSQ' , 30 , 'RSQ' , NUMRISQUE , 0 , 0 , 0 , 0 , 0 , '' , 'Incohérence date début de garantie/début effet' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
							END IF ; 
						END IF ;		 
						IF ( V_FINEFFETJOUR > 0 AND V_FINEFFETMOIS > 0 AND V_FINEFFETANNEE > 0 ) THEN 
							IF ( ( V_DEBGARANNEE * 10000 + V_DEBGARMOIS * 100 + V_DEBGARJOUR ) > ( V_FINEFFETANNEE * 10000 + V_FINEFFETMOIS * 100 + V_FINEFFETJOUR ) ) THEN 
								CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'RSQ' , 30 , 'RSQ' , NUMRISQUE , 0 , 0 , 0 , 0 , 0 , '' , 'Incohérence date début de garantie/fin effet' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
							END IF ; 
						END IF ;	 
					END IF ; 
					 
					 --DATE FIN 
					IF ( V_FINGARANNEE > 0 AND V_FINGARMOIS > 0 AND V_DEBGARJOUR > 0 ) THEN 
						IF ( V_FINEFFETANNEE > 0 AND V_FINEFFETMOIS > 0 AND V_FINEFFETJOUR > 0 ) THEN 
							IF ( ( V_FINGARANNEE * 10000 + V_FINGARMOIS * 100 + V_FINGARJOUR ) > ( V_FINEFFETANNEE * 10000 + V_FINEFFETMOIS * 100 + V_FINEFFETJOUR ) ) THEN 
								CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'RSQ' , 30 , 'RSQ' , NUMRISQUE , 0 , 0 , 0 , 0 , 0 , '' , 'Incohérence date fin de garantie/fin effet' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
							END IF ; 
						END IF ;		 
						IF ( V_EFFETJOUR > 0 AND V_EFFETMOIS > 0 AND V_EFFETANNEE > 0 ) THEN 
							IF ( ( V_FINGARANNEE * 10000 + V_FINGARMOIS * 100 + V_FINGARJOUR ) < ( V_EFFETANNEE * 10000 + V_EFFETMOIS * 100 + V_EFFETJOUR ) ) THEN 
								CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'RSQ' , 30 , 'RSQ' , NUMRISQUE , 0 , 0 , 0 , 0 , 0 , '' , 'Incohérence date fin de garantie/ effet' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
							END IF ; 
						END IF ;	 
					END IF ; 
					 
					 --CATNAT & INDEXATION	 
					IF ( V_CATNATOBJ = 'O' AND V_CATNATGEN = 'N' ) THEN 
						CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'RSQ' , 30 , 'RSQ' , NUMRISQUE , 0 , 0 , 0 , 0 , 0 , '' , 'Incohérence info catnat risque/base' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
					END IF ; 
					IF ( V_INDEXOBJ = 'O' AND V_INDEXGEN = 'N' ) THEN 
						IF( NOT(TRIM ( P_TYPE ) = 'O') OR ( V_EFFETJOUR > 0 AND V_EFFETMOIS > 0 AND V_EFFETANNEE > 0))THEN
							CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'RSQ' , 30 , 'RSQ' , NUMRISQUE , 0 , 0 , 0 , 0 , 0 , '' , 'Incohérence info indexation risque/base' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
						END IF;
					END IF ;		 
				END IF ; 
				 --FIN RISQUE MONO OBJET 
				 --MULTI OBJETS 
				IF ( ISMONO = 0 ) THEN 
					 --DATE DÉBUT 
					IF ( DEBRSQGARANNEE > 0 AND DEBRSQGARMOIS > 0 AND DEBRSQGARJOUR > 0 ) THEN 
						IF ( V_EFFETJOUR > 0 AND V_EFFETMOIS > 0 AND V_EFFETANNEE > 0 ) THEN 
							IF ( ( DEBRSQGARANNEE * 10000 + DEBRSQGARMOIS * 100 + DEBRSQGARJOUR ) < ( V_EFFETANNEE * 10000 + V_EFFETMOIS * 100 + V_EFFETJOUR ) ) THEN 
								CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'RSQ' , 30 , 'RSQ' , NUMRISQUE , 0 , 0 , 0 , 0 , 0 , '' , 'Incohérence date début de garantie/début effet' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
							END IF ; 
						END IF ;		 
						IF ( V_FINEFFETJOUR > 0 AND V_FINEFFETMOIS > 0 AND V_FINEFFETANNEE > 0 ) THEN 
							IF ( ( DEBRSQGARANNEE * 10000 + DEBRSQGARMOIS * 100 + DEBRSQGARJOUR ) > ( V_FINEFFETANNEE * 10000 + V_FINEFFETMOIS * 100 + V_FINEFFETJOUR ) ) THEN 
								CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'RSQ' , 30 , 'RSQ' , NUMRISQUE , 0 , 0 , 0 , 0 , 0 , '' , 'Incohérence date début de garantie/fin effet' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
							END IF ; 
						END IF ;	 
					END IF ; 
					 
					 --DATE FIN 
					IF ( FINRSQGARANNEE > 0 AND FINRSQGARMOIS > 0 AND FINRSQGARJOUR > 0 ) THEN 
						IF ( V_FINEFFETANNEE > 0 AND V_FINEFFETMOIS > 0 AND V_FINEFFETJOUR > 0 ) THEN 
							IF ( ( FINRSQGARANNEE * 10000 + FINRSQGARMOIS * 100 + FINRSQGARJOUR ) > ( V_FINEFFETANNEE * 10000 + V_FINEFFETMOIS * 100 + V_FINEFFETJOUR ) ) THEN 
								CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'RSQ' , 30 , 'RSQ' , NUMRISQUE , 0 , 0 , 0 , 0 , 0 , '' , 'Incohérence date fin de garantie/fin effet' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
							END IF ; 
						END IF ;		 
						IF ( V_EFFETJOUR > 0 AND V_EFFETMOIS > 0 AND V_EFFETANNEE > 0 ) THEN 
							IF ( ( FINRSQGARANNEE * 10000 + FINRSQGARMOIS * 100 + FINRSQGARJOUR ) < ( V_EFFETANNEE * 10000 + V_EFFETMOIS * 100 + V_EFFETJOUR ) ) THEN 
								CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'RSQ' , 30 , 'RSQ' , NUMRISQUE , 0 , 0 , 0 , 0 , 0 , '' , 'Incohérence date fin de garantie/effet' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
							END IF ; 
						END IF ;	 
					END IF ; 
					 
					 --CATNAT & INDEXATION 
					IF ( CATNATRSQ = 'O' AND V_CATNATGEN = 'N' ) THEN 
						CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'RSQ' , 30 , 'RSQ' , NUMRISQUE , 0 , 0 , 0 , 0 , 0 , '' , 'Incohérence info catnat risque/base' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
					END IF ; 
					 
					IF ( INDEXRSQ = 'O' AND V_INDEXGEN = 'N' ) THEN 
						IF( NOT(TRIM ( P_TYPE ) = 'O') OR ( V_EFFETJOUR > 0 AND V_EFFETMOIS > 0 AND V_EFFETANNEE > 0))THEN
							CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'RSQ' , 30 , 'RSQ' , NUMRISQUE , 0 , 0 , 0 , 0 , 0 , '' , 'Incohérence info indexation risque/base' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
						END IF;
					END IF ;		 
					 
					 --ETAPE OBJET-- 
					FOR LOOP_OBJ AS FREE_LISTOBJ CURSOR FOR 
						SELECT JGOBJ NUMOBJET , 
						JGVDA V_DEBGARANNEE , JGVDM V_DEBGARMOIS , JGVDJ V_DEBGARJOUR , 
						JGVFA V_FINGARANNEE , JGVFM V_FINGARMOIS , JGVFJ V_FINGARJOUR , 
						JGCNA V_CATNATOBJ , JGINA V_INDEXOBJ 
						FROM YPRTOBJ 
						WHERE JGIPB = P_CODE AND JGALX = P_VERSION AND JGRSQ = NUMRISQUE 
						ORDER BY JGCCH 
					DO								 
						 --DATE DÉBUT 
						IF ( DEBRSQGARANNEE > 0 AND DEBRSQGARMOIS > 0 AND DEBRSQGARJOUR > 0 ) THEN 
							IF ( V_DEBGARANNEE > 0 AND V_DEBGARMOIS > 0 AND V_DEBGARJOUR > 0 ) THEN 
								IF ( ( V_DEBGARANNEE * 10000 + V_DEBGARMOIS * 100 + V_DEBGARJOUR ) < ( DEBRSQGARANNEE * 10000 + DEBRSQGARMOIS * 100 + DEBRSQGARJOUR ) ) THEN 
									CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'OBJ' , 40 , 'OBJ' , NUMRISQUE , NUMOBJET , 0 , 0 , 0 , 0 , '' , 'Incohérence date début de garantie : objet/risque' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
								END IF ; 
							END IF ;		 
							IF ( FINRSQGARANNEE > 0 AND FINRSQGARMOIS > 0 AND FINRSQGARJOUR > 0 ) THEN 
								IF ( ( V_DEBGARANNEE * 10000 + V_DEBGARMOIS * 100 + V_DEBGARJOUR ) > ( FINRSQGARANNEE * 10000 + FINRSQGARMOIS * 100 + FINRSQGARJOUR ) ) THEN 
									CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'OBJ' , 40 , 'OBJ' , NUMRISQUE , NUMOBJET , 0 , 0 , 0 , 0 , '' , 'Incohérence date début de garantie : objet/risque' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
								END IF ; 
							END IF ;	 
						END IF ; 
						 
						 --DATE FIN 
						IF ( FINRSQGARANNEE > 0 AND FINRSQGARMOIS > 0 AND FINRSQGARJOUR > 0 ) THEN 
							IF ( V_FINGARANNEE > 0 AND V_FINGARMOIS > 0 AND V_FINGARJOUR > 0 ) THEN 
								IF ( ( V_FINGARANNEE * 10000 + V_FINGARMOIS * 100 + V_FINGARJOUR ) > ( FINRSQGARANNEE * 10000 + FINRSQGARMOIS * 100 + FINRSQGARJOUR ) ) THEN 
									CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'OBJ' , 40 , 'OBJ' , NUMRISQUE , NUMOBJET , 0 , 0 , 0 , 0 , '' , 'Incohérence date fin de garantie : objet/risque' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
								END IF ;						 
								IF ( DEBRSQGARANNEE > 0 AND DEBRSQGARMOIS > 0 AND DEBRSQGARJOUR > 0 ) THEN 
									IF ( ( V_FINGARANNEE * 10000 + V_FINGARMOIS * 100 + V_FINGARJOUR ) < ( DEBRSQGARANNEE * 10000 + DEBRSQGARMOIS * 100 + DEBRSQGARJOUR ) ) THEN 
										CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'OBJ' , 40 , 'OBJ' , NUMRISQUE , NUMOBJET , 0 , 0 , 0 , 0 , '' , 'Incohérence date fin de garantie : objet/risque' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
									END IF ; 
								END IF ;	 
							END IF ;		 
						END IF ; 
						 
						 --CATNAT & INDEXATION	 
						IF ( CATNATRSQ = 'O' AND ( V_CATNATGEN = 'N' OR V_CATNATOBJ = 'N' ) ) THEN 
							CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'OBJ' , 40 , 'OBJ' , NUMRISQUE , NUMOBJET , 0 , 0 , 0 , 0 , '' , 'Incohérence info catnat risque/base' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
						END IF ; 
						 
						IF ( INDEXRSQ = 'O' AND ( V_INDEXGEN = 'N' OR V_INDEXOBJ = 'N' ) ) THEN 
							IF( NOT(TRIM ( P_TYPE ) = 'O') OR ( V_EFFETJOUR > 0 AND V_EFFETMOIS > 0 AND V_EFFETANNEE > 0))THEN
								CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'OBJ' , 40 , 'OBJ' , NUMRISQUE , NUMOBJET , 0 , 0 , 0 , 0 , '' , 'Incohérence info indexation risque/base' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
							END IF; 
						END IF ;		 
						 
					END FOR ;	 
				END IF ; 
				 --FIN RISQUE MULTI OBJETS 
				FOR LOOP_FOR AS FREE_LIST CURSOR FOR 
					SELECT DISTINCT KDAFOR CODEFOR , KDBOPT CODEOPT , KDAALPHA LETTREFOR , KDBAVA * 10000 + KDBAVM * 100 + KDBAVJ MODIFFORDATE , KDBAVE CREATEAVN , KDBAVG MODIFAVN 
					FROM KPFOR 
					INNER JOIN KPOPT ON KDAID = KDBKDAID 
					INNER JOIN KPOPTAP ON KDBID = KDDKDBID AND KDDRSQ = NUMRISQUE 
					WHERE KDAIPB = P_CODE AND KDAALX = P_VERSION AND KDATYP = P_TYPE 
				DO 
					SET V_ERRORFOR = 0 ; 
					IF ( MODIFFORDATE > 0 ) THEN 
						IF ( V_ERRORFOR = 0 AND MODIFFORDATE < ( V_EFFETAVTANNEE * 10000 + V_EFFETAVTMOIS * 100 + V_EFFETAVTJOUR ) AND ( V_CODEAVN = MODIFAVN OR V_CODEAVN = CREATEAVN ) ) THEN 
							SET V_ERRORFOR = 1 ; 
							CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'OPT' , 30 , 'OPT' , 0 , 0 , 0 , 0 , CODEFOR , 1 , '' , 'Incohérence de dates formule' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
						END IF ; 
						IF ( V_ERRORFOR = 0 AND MODIFFORDATE > V_PROCHECH AND V_PROCHECH > 0 AND ( V_CODEAVN = MODIFAVN OR V_CODEAVN = CREATEAVN ) ) THEN 
							SET V_ERRORFOR = 1 ; 
							CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'OPT' , 30 , 'OPT' , 0 , 0 , 0 , 0 , CODEFOR , 1 , '' , 'Incohérence de dates formule' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
						END IF ; 
						IF ( V_ERRORFOR = 0 AND MODIFFORDATE > V_DATEFINEFFET AND V_DATEFINEFFET > 0 AND ( V_CODEAVN = MODIFAVN OR V_CODEAVN = CREATEAVN ) ) THEN 
							SET V_ERRORFOR = 1 ; 
							CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'OPT' , 30 , 'OPT' , 0 , 0 , 0 , 0 , CODEFOR , 1 , '' , 'Incohérence de dates formule' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
						END IF ; 
						IF ( V_ERRORFOR = 0 AND MODIFFORDATE < V_DATEMODIFRSQ AND V_DATEMODIFRSQ > 0 AND ( V_CODEAVN = MODIFAVN OR V_CODEAVN = CREATEAVN ) ) THEN 
							SET V_ERRORFOR = 1 ; 
							CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'OPT' , 30 , 'OPT' , 0 , 0 , 0 , 0 , CODEFOR , 1 , '' , 'Incohérence de dates formule' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
						END IF ; 
					END IF ; 
					 
					IF ( V_CODEAVN = MODIFAVN ) THEN	 
						 --CONTROLE DE VALIDATION DE LA FORMULE 
						SET V_COUNT = 0 ; 
						SELECT COUNT ( * ) INTO V_COUNT FROM KPCTRLE WHERE KEVIPB = P_CODE AND KEVALX = P_VERSION AND KEVTYP = P_TYPE AND KEVETAPE = 'OPT' AND KEVFOR = CODEFOR ; 
						IF ( V_COUNT = 0 ) THEN 
							CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'OPT' , 30 , 'OPT' , 0 , 0 , 0 , 0 , CODEFOR , 1 , '' , 'Etape de la formule non validée' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
						END IF ; 
					END IF ; 
					
					-- BOUCLE DES GARANTIES CREEES DANS L'AVENANT					
					FOR LOOP_GAR AS FREE_LIST CURSOR FOR
						SELECT KDEGARAN CODEGAR, KDEDATDEB DATEDEBGAR, KDEDATFIN DATEFINGAR FROM KPGARAN 
						WHERE KDEIPB = P_CODE AND KDEALX = P_VERSION AND KDETYP = P_TYPE AND KDEFOR = CODEFOR AND KDEOPT = CODEOPT AND KDECRAVN = V_CODEAVN and kdegan in ('A', 'C')
					DO
						SET V_MESSAGECTRL = '';
						IF (DATEDEBGAR < MODIFFORDATE AND V_CODEAVN > 0 AND ( V_CODEAVN = MODIFAVN OR V_CODEAVN = CREATEAVN ) ) THEN
							SET V_MESSAGECTRL = 'Incohérence de dates garantie ' CONCAT CODEGAR;
							CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'OPT' , 30 , 'OPT' , 0 , 0 , 0 , 0 , CODEFOR , 1 , '' , V_MESSAGECTRL , 'B' , P_USER , P_DATE , P_HEURE ) ; 
						END IF;
						IF V_DATEFINEFFET > 0 AND DATEFINGAR > V_DATEFINEFFET THEN
							SET V_MESSAGECTRL = 'Incohérence de dates garantie ' CONCAT CODEGAR;
							CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'OPT' , 30 , 'OPT' , 0 , 0 , 0 , 0 , CODEFOR , 1 , '' , V_MESSAGECTRL , 'B' , P_USER , P_DATE , P_HEURE ) ; 
						END IF;
					END FOR;
					-- FIN BOUCLE DES GARANTIES CREEES DANS L'AVENANT
					
				END FOR ; 
				 
			END FOR ; 
			 --FIN BOUCLE VÉRIFICATION DES RISQUES ET OBJETS 
			SELECT	MIN ( ( JEVDA * 10000 ) + ( JEVDM * 100 ) + JEVDJ ) , MAX ( ( JEVFA * 10000 ) + ( JEVFM * 100 ) + JEVFJ ) , MIN ( ( JEVFA * 10000 ) + ( JEVFM * 100 ) + JEVFJ ) 
			INTO	V_MINDEBRSQGAR , V_MAXFINRSQGAR , V_MINFINRSQGAR
			FROM YPRTRSQ				 
			WHERE JEIPB = P_CODE AND JEALX = P_VERSION ; 

			IF (P_TYPE = 'P') THEN
				--CONTROLE DATES RISQUE 
				--DATE FIN RISQUE / FIN EFFET 
				IF ( V_MAXFINRSQGAR > 0 AND V_MINFINRSQGAR > 0 ) THEN 
					IF ( V_MAXFINRSQGAR < ( V_FINEFFETANNEE * 10000 + V_FINEFFETMOIS * 100 + V_FINEFFETJOUR ) ) THEN 
						CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'MATR' , 30 , 'MATR' , 0 , 0 , 0 , 0 , 0 , 0 , '' , 'Incohérence des dates de fin risque et contrat' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
					END IF ; 
				END IF ; 
					 --DATE DEBUT RISQUE / DEBUT EFFET 
				IF ( V_MINDEBRSQGAR > 0) THEN 
					IF ( V_MINDEBRSQGAR > ( V_EFFETANNEE * 10000 + V_EFFETMOIS * 100 + V_EFFETJOUR ) ) THEN 
						CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'MATR' , 30 , 'MATR' , 0 , 0 , 0 , 0 , 0 , 0 , '' , 'Incohérence des dates de début risque et contrat' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
					END IF ; 
				END IF ; 
			END IF;
			 
			 --INTERCALAIRE 
			IF ( V_INTERCALGEN = 'O' ) THEN 
				SELECT COUNT ( * ) INTO V_COUNT 
				FROM KPDOCEXT 
				INNER JOIN KPCLAUSE ON KCATXL = KERID 
				WHERE KERTYP = P_TYPE AND KERIPB = P_CODE AND KERALX = P_VERSION AND KERTYPO = 'INTER' ; 
				 
				IF ( V_COUNT = 0 ) THEN 
					CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'BASE' , 10 , 'BASE' , 0 , 0 , 0 , 0 , 0 , 0 , '' , 'Intercalaire courtier sans clause associée' , 'A' , P_USER , P_DATE , P_HEURE ) ; 
				END IF ;		 
			END IF ; 
			 
			 --RÉGIME DE TAXE 
			SELECT PBRGT INTO V_REGIMETAXEGEN 
			FROM YPOBASE 
			WHERE PBIPB = P_CODE AND PBTYP = P_TYPE AND PBALX = P_VERSION ; 
			 
			SELECT COUNT ( * ) INTO V_COUNT 
			FROM YPRTRSQ 
			WHERE JEIPB = P_CODE AND JEALX = P_VERSION AND JERGT = V_REGIMETAXEGEN ; 
			 
			IF ( V_COUNT = 0 ) THEN 
				CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'BASE' , 10 , 'BASE' , 0 , 0 , 0 , 0 , 0 , 0 , '' , 'Le régime de taxe de l''offre (ou du contrat) est différent de celui du ou des risques' , 'A' , P_USER , P_DATE , P_HEURE ) ; 
			END IF ;		 
			 
			 --Courtier Gestionnaire 
			SELECT PBAVN , TCFVA INTO V_CODEAVN , V_FERME FROM YPOBASE 
			INNER JOIN YCOURTI ON TCICT = PBICT 
			WHERE PBIPB = P_CODE AND PBALX = P_VERSION AND PBTYP = P_TYPE ; 
			 
			IF ( V_CODEAVN = 0 AND V_FERME <> 0 ) THEN 
				CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'SAISIE' , 30 , 'SAISIE' , 0 , 0 , 0 , 0 , 0 , 0 , '' , 'Le courtier gestionnaire est fermé' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
			END IF ; 
			 
			IF ( V_CODEAVN > 0 AND V_FERME <> 0 ) THEN 
				CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'SAISIE' , 10 , 'SAISIE' , 0 , 0 , 0 , 0 , 0 , 0 , '' , 'Le courtier gestionnaire est fermé' , 'A' , P_USER , P_DATE , P_HEURE ) ; 
			END IF ; 
			 
			 --Courtier Apporteur 
			SELECT PBAVN , TCFVA INTO V_CODEAVN , V_FERME FROM YPOBASE 
			INNER JOIN YCOURTI ON TCICT = PBCTA 
			WHERE PBIPB = P_CODE AND PBALX = P_VERSION AND PBTYP = P_TYPE ; 
			 
			IF ( V_CODEAVN = 0 AND V_FERME <> 0 ) THEN 
				CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'SAISIE' , 30 , 'SAISIE' , 0 , 0 , 0 , 0 , 0 , 0 , '' , 'Le courtier apporteur est fermé' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
			END IF ; 
			 
			 --GÉNÉRATION DE CLAUSES PAR ÉTAPES 
			FOR LOOP_CLAUSE AS FREE_LISTCLAUSE CURSOR FOR 
				SELECT KEVETAPE ETAPECLAUSE , KEVETORD ORDETAPECLAUSE , KEVPERI PERICLAUSE , KEVRSQ RSQCLAUSE , KEVOBJ OBJCLAUSE , KEVKBEID INVENTCLAUSE , KEVFOR FORCLAUSE , KEVOPT OPTCLAUSE 
					FROM KPCTRLE 
				WHERE KEVIPB = P_CODE AND KEVALX = P_VERSION AND KEVTYP = P_TYPE AND KEVTAG = 'O' AND KEVTAGC = 'N' 
			DO 
				IF ((ETAPECLAUSE IN ('BASE', 'RSQ', 'OBJ', 'GEN', 'ENG', 'ATT', 'SAISIE', 'GAR', 'FOR', 'COCOURTIER', 'COASSUREUR') AND V_ACTEGES != 'REGUL') 
					OR (ETAPECLAUSE IN ('AVNRM') AND V_ACTEGES = 'AVNRM')
					OR (ETAPECLAUSE IN ('REGUL') AND V_ACTEGES IN ('REGUL', 'AVNRG'))
					OR (ETAPECLAUSE IN ('COT', 'FIN'))) THEN
					CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , ETAPECLAUSE , ORDETAPECLAUSE , PERICLAUSE , RSQCLAUSE , OBJCLAUSE , INVENTCLAUSE , 0 , FORCLAUSE , OPTCLAUSE , '' , 'La génération de clauses de cette étape n''a pas été actualisée' , 'A' , P_USER , P_DATE , P_HEURE ) ;		 
				END IF;
			END FOR ; 
			 
			 --CONTROLE PRIME 
			IF ( V_ACTEGES = 'AFFNV' AND P_TYPE = 'P' AND V_PBPER != 'R' AND V_PBMER != 'M' ) THEN 
				SET V_MNTHT = 0 ; 
				SELECT PKMHT INTO V_MNTHT FROM YPRIPES WHERE PKIPB = P_CODE AND PKALX = P_VERSION ; 
				IF ( V_MNTHT = 0 ) THEN 
					CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'MATF' , 10 , 'MATF' , 0 , 0 , 0 , 0 , 0 , 0 , '' , 'En affaire nouvelle, la quittance est obligatoire' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
				END IF ; 
			END IF ; 
			 
			 --CHANGEMENT DE SOUS-BRANCHE 
			SELECT COUNT ( * ) INTO V_COUNT FROM KPAVTRC WHERE KHOIPB = P_CODE AND KHOALX = P_VERSION AND KHOTYP = P_TYPE AND KHOOEF = 'CC' ; 
			IF ( V_COUNT > 0 ) THEN 
				CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'SBR' , 10 , 'BASE' , 0 , 0 , 0 , 0 , 0 , 0 , '' , 'Le taux de commission a changé' , 'A' , P_USER , P_DATE , P_HEURE ) ; 
			END IF ; 
			 
			/* PERIODICITE "R" PAS DE CONTROLE */ 
			IF ( V_PBPER != 'R' ) THEN 
				SET V_COUNT = 0 ; 
				SELECT COUNT ( * ) INTO V_COUNT FROM KPENGVEN 
					INNER JOIN KPENG ON KDQKDOID = KDOID AND KDOECO = 'O' 
					INNER JOIN KPENGRSQ ON KDRKDQID = KDQID
				WHERE KDQENGC = 0 AND KDQENGF = 0 AND KDQIPB = P_CODE AND KDQALX = P_VERSION AND KDQTYP = P_TYPE ; 
				IF ( V_COUNT > 0 ) THEN 
					CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'ENG' , 61 , 'ENG' , 0 , 0 , 0 , 0 , 0 , 0 , '' , 'Un engagement par traité est à zéro' , 'A' , P_USER , P_DATE , P_HEURE ) ; 
				END IF ; 
			END IF ; 
			 
			IF ( V_ACTEGES = 'REGUL' OR V_ACTEGES = 'AVNRG' ) THEN 
				SELECT PKMTT , TPCA1 INTO V_MONTANT , V_TPCA FROM KPRGU 
				LEFT JOIN YPRIRES ON KHWIPB = PKIPB AND KHWALX = PKALX 
				INNER JOIN YYYYPAR ON TFAM = 'RGMTF' AND TCON = 'ALSPK' AND TCOD = KHWMTF 
				WHERE KHWIPB = P_CODE AND KHWALX = P_VERSION AND KHWTYP = P_TYPE AND KHWAVN = V_CODEAVN ; 
							 							 
				IF ( V_TPCA = 'O' AND V_MONTANT != 0 ) THEN 
					CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'REGUL' , 61 , 'REGUL' , 0 , 0 , 0 , 0 , 0 , 0 , '' , 'Erreur : le motif n''autorise pas l''émission' , 'B' , P_USER , P_DATE , P_HEURE ) ;						 
				END IF ; 
					 		 
				IF (P_REGULID != 0) THEN 
					SELECT TPCA1 INTO V_TPCA FROM KPRGU INNER JOIN YYYYPAR ON TCON = 'ALSPK' AND TFAM = 'RGMTF' AND TCOD = KHWMTF WHERE KHWID = P_REGULID;

					SELECT SUM ( KHXMTT ) INTO V_SUMMNT FROM KPRGUG WHERE KHXIPB = P_CODE AND KHXALX = P_VERSION AND KHXKHWID = P_REGULID ; 
					 
					IF ( V_SUMMNT = 0 AND V_TPCA != 'O' ) THEN 
						CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'REGUL' , 61 , 'REGUL' , 0 , 0 , 0 , 0 , 0 , 0 , '' , 'Toutes les primes sont forcées à 0. Voulez-vous changer le motif de régularisation ?' , 'A' , P_USER , P_DATE , P_HEURE ) ; 
					END IF ; 
				END IF ; 
			END IF ; 
			 
			SELECT DISTINCT JEBRA INTO V_BRANCHE 
			FROM YPRTRSQ 
			WHERE JEIPB = P_CODE AND JEALX = P_VERSION ; 
		 
			 --CONTROLE CODE ACTIVITE 
			IF ( V_BRANCHE = 'RC' ) THEN	 
				SET V_COUNT = 0 ; 
				SELECT COUNT ( * ) INTO V_COUNT FROM KPRSQ WHERE KABIPB = P_CODE AND KABALX = P_VERSION AND KABTYP = P_TYPE AND KABTRE != '' ; 
				IF ( V_COUNT = 0 ) THEN 
					CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'MATR' , 30 , 'MATR' , 0 , 0 , 0 , 0 , 0 , 0 , '' , 'Veuillez renseigner un code NAF ou Siret sur au moins un risque ' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
				END IF ; 
			END IF ; 
		END IF ; 
		 
		 
		 -- CONRTROLE SUR LES DATES DU PARCHEV 
		IF ( V_ACTEGES != 'REGUL' AND V_ACTEGES != 'AVNRS') THEN
			FOR LOOP_FOR AS FREE_LIST CURSOR FOR 
				SELECT KDEID , KDEGARAN , KDEFOR , KDEOPT , KDEDATDEB , KDEDATFIN , KDEHEUDEB , KDEHEUFIN 
				FROM KPGARAN 
				WHERE KDEIPB = P_CODE AND KDEALX = P_VERSION AND KDETYP = P_TYPE AND KDEDEFG = 'H' 
			DO 
				 
				CALL SP_GETDATEGARSTD ( P_CODE , P_VERSION , P_TYPE , KDEFOR , KDEOPT , KDEID , V_DATEDEBSTD , V_DATEFINSTD ) ; 
				 
				SELECT GADFG , TPCN1 INTO V_REFERENTIEL , V_DUREEGAR 
				FROM KGARAN 
				INNER JOIN YYYYPAR ON TCON = 'PRODU' AND TFAM = 'GADFG' AND TCOD = GADFG 
				WHERE GAGAR = KDEGARAN ; 
							 
				IF ( V_DATEFINSTD != 0 AND V_DATEFINSTD != 2359 ) THEN		 
				 
					SET V_HEURESTD = MOD ( V_DATEFINSTD , 10000 ) ; 
					SET V_DATEFSTD = V_DATEFINSTD / 10000 ; 
					SET V_DATEHEURE = ( V_DATEFSTD * CAST ( 10000 AS BIGINT ) + V_HEURESTD ) * 100 ; 
					SET V_DATEFINHEURE = CAST ( V_DATEHEURE || '' AS TIMESTAMP ) ;-- + 1 MINUTES ; 
					SET V_NEWDATE = V_DATEFINHEURE - V_DUREEGAR MONTHS; -- ADD_MONTHS ( V_DATEFINHEURE , - V_DUREEGAR ) ;	 
					SET V_HEUREDEB	= HOUR ( V_NEWDATE ) * 100 + MINUTE ( V_NEWDATE ) ;			 
					SET V_DATEDEB = ( ( YEAR ( V_NEWDATE ) * 10000 + MONTH ( V_NEWDATE ) * 100 + DAY ( V_NEWDATE ) ) * CAST ( 10000 AS BIGINT ) + V_HEUREDEB ) ; 
				 
					IF ( V_DATEDEB != ( KDEDATDEB * 10000 + LEFT ( KDEHEUDEB , 4 ) ) OR ( KDEDATFIN * 10000 + LEFT ( KDEHEUFIN , 4 ) ) != V_DATEFINSTD ) THEN  --OR KDEDATFIN != V_DATEFINSTD 
						CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'OPT' , 30 , 'OPT' , 0 , 0 , 0 , 0 , KDEFOR , 1 , '' , 'Vérification des dates de la garantie parfait achèvement' , 'A' , 4 , P_DATE , P_HEURE ) ; 
					END IF ; 
					 
				END IF ; 
				 
			END FOR ;
		END IF;
		 -- FIN CONRTROLE SUR LES DATES DU PARCHEV 
	END IF ; 
	 
	 
	 
	 -- CONTROLE si prochaine echéance
	IF ( P_ISAVENANT <> 0 ) THEN 
		SELECT CUR . JDPEA * 10000 + CUR . JDPEM * 100 + CUR . JDPEJ DATEDEBRETURNCOL , HIST . JDPEA * 10000 + HIST . JDPEM * 100 + HIST . JDPEJ DATEFINRETURNCOL 
		INTO V_DATEDEBRETURNCOL , V_DATEFINRETURNCOL 
		FROM YPOBASE 
		INNER JOIN YPRTENT CUR ON PBIPB = CUR . JDIPB AND PBALX = CUR . JDALX 
		INNER JOIN YHRTENT HIST ON PBIPB = HIST . JDIPB AND PBALX = HIST . JDALX AND PBAVN - 1 = HIST . JDAVN 
		WHERE PBIPB = P_CODE AND PBALX = P_VERSION AND PBAVN = V_CODEAVN ; 
		 
		 
		IF ( V_DATEDEBRETURNCOL <> V_DATEFINRETURNCOL AND (TRIM ( V_ACTEGES ) = 'AVNRG' OR TRIM ( V_ACTEGES ) = 'AVNMD' )) THEN
			CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'SBR' , 30 , 'SBR' , 0 , 0 , 0 , 0 , 0 , 0 , '' , 'Vérifier la période de garantie qui sera imprimée sur BdeS' , 'A' , P_USER , P_DATE , P_HEURE ) ;	 
		END IF ; 
	END IF ; 
	
	-- CONTRÔLES LTA
  	SET P_CODE = F_PADLEFT ( 9 , TRIM ( P_CODE ) );
	SELECT JDLTA, (JDLDEB * 10000 + JDLDEH), (JDLFIN * 10000 + JDLFIH),
			(PBEFA * 100000000 + PBEFM * 1000000 + PBEFJ * 10000 + PBEFH), (PBFEA * 100000000 + PBFEM * 1000000 + PBFEJ * 10000 + PBFEH)
	INTO V_LTA, V_DEBLTA, V_FINLTA, V_DEBEFF, V_FINEFF
		FROM YPRTENT 
			INNER JOIN YPOBASE ON PBIPB = JDIPB AND PBALX = JDALX
	WHERE JDIPB = P_CODE AND JDALX = P_VERSION;
	IF (V_LTA = 'O') THEN
		
		IF ((V_DEBLTA < V_DEBEFF AND V_DEBEFF > 0) OR (V_DEBLTA >= V_FINEFF AND V_FINEFF > 0)) THEN
				CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'GEN' , 10 , 'GEN' , 0 , 0 , 0 , 0 , 0 , 0 , '' , 'Date de début LTA erronée.' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
		END IF;
		
		IF ((V_FINLTA <= V_DEBEFF AND V_DEBEFF > 0) OR (V_FINLTA > V_FINEFF AND V_FINEFF > 0)) THEN
				CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'GEN' , 10 , 'GEN' , 0 , 0 , 0 , 0 , 0 , 0 , '' , 'Date de fin LTA erronée.' , 'B' , P_USER , P_DATE , P_HEURE ) ; 
		END IF;
	
	END IF;	
	
	IF NOT V_ACTEGES IN ( 'AVNRS' , 'REGUL') THEN
		SET V_COUNT = 0;
		SELECT COUNT(*) INTO V_COUNT FROM KPRSQ WHERE KABIPB = P_CODE AND KABALX = P_VERSION AND KABTYP = P_TYPE AND NOT EXISTS (SELECT * FROM KPOPTAP WHERE KDDIPB = P_CODE AND KDDALX = P_VERSION AND KDDTYP = P_TYPE AND KDDRSQ = KABRSQ);
		IF V_COUNT > 0 THEN
			CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'MATR' , 30 , 'MATR' , 0 , 0 , 0 , 0 , 0 , 0 , '' , 'Il existe des risques sans formule.' , 'B' , P_USER , P_DATE , P_HEURE ) ;
		END IF;	
	
		SET V_COUNT = 0;
		SELECT COUNT(*) INTO V_COUNT FROM KPOBJ WHERE KACIPB = P_CODE AND KACALX = P_VERSION AND KACTYP = P_TYPE AND NOT EXISTS (SELECT * FROM KPOPTAP WHERE KDDIPB = P_CODE AND KDDALX = P_VERSION AND KDDTYP = P_TYPE AND KDDRSQ = KACRSQ AND KDDOBJ IN ( KACOBJ , 0 ));
		IF V_COUNT > 0 THEN
			CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'MATR' , 30 , 'MATR' , 0 , 0 , 0 , 0 , 0 , 0 , '' , 'Il existe des objets sans formule.' , 'B' , P_USER , P_DATE , P_HEURE ) ;
		END IF;	

		SET V_SUMCOM = 0;
		SELECT SUM(PFCOM) INTO V_SUMCOM FROM YPOCOUR WHERE (PFIPB, PFALX, PBTYP) = (P_CODE, P_VERSION, P_TYPE);
		IF V_SUMCOM <> 100 THEN
			CALL SP_CREATECTRL (P_CODE, P_VERSION, P_TYPE, 'GEN', 10, 'GEN', 0, 0, 0, 0, 0, 0, '', 'La somme des % de commissions ne peut pas être différente de 100%', 'B', P_USER, P_DATE, P_HEURE);
		END IF;
	END IF;	
	
	--Pas d'alertes bloquantes PBETA = A
	
	-- SELECT COUNT(*) INTO V_BCTRL  FROM KPCTRL WHERE KEUIPB = P_CODE AND KEUALX = P_VERSION  AND KEUTYP = P_TYPE  AND KEUNIVM = 'B' ;
	
	-- IF ( V_BCTRL = 0 AND V_ETAT = 'N') THEN 
	
	 -- UPDATE YPOBASE SET PBETA = 'A' WHERE PBIPB = P_CODE AND PBALX = P_VERSION AND PBTYP = P_TYPE ; 
	
	-- END IF ;

	IF NOT V_ACTEGES IN ( 'AVNRS') THEN
		SET V_COUNT = 0;
		SELECT COUNT(*) INTO V_COUNT FROM KPINTER INNER JOIN YINTERV ON KHBIIN = INIIN AND (INFVA > 0) WHERE KHBIPB = P_CODE AND KHBALX = P_VERSION AND KHBTYP = P_TYPE;
		IF (V_COUNT > 0) THEN
			CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'GEN' , 10 , 'GEN' , 0 , 0 , 0 , 0 , 0 , 0 , '' , 'Intervenant(s) invalide(s).' , 'B' , P_USER , P_DATE , P_HEURE ) ;
		END IF;
	END IF ;

	SELECT KHWETA INTO V_ETAT FROM KPRGU WHERE KHWID = P_REGULID;
	IF (V_ETAT = 'N') THEN
	 UPDATE KPRGU SET KHWETA = 'A' WHERE KHWID = P_REGULID;	
	END IF ;

	IF NOT V_ACTEGES IN ( 'AVNRS' , 'REGUL') THEN
		FOR LOOP_GARANTIES AS FREE_LIST CURSOR FOR 
			SELECT KDEID GAR_ID, KDEGARAN CODE_GAR, ( KDEDATDEB * 10000 + LEFT ( KDEHEUDEB , 4 ) ) DATE_DEB_GAR, ( KDEDATFIN * 10000 + LEFT ( KDEHEUFIN , 4 ) ) DATE_FIN_GAR, KDEFOR NUM_FOR, KDEOPT NUM_OPT
			FROM KPGARAN 
			WHERE KDEIPB = P_CODE AND KDEALX = P_VERSION AND KDETYP = P_TYPE AND (KDEDATDEB > 0 OR KDEDATFIN > 0) and KDEGAN in ('A','C')
		DO 
			CALL SP_GETDATEGARSTD ( P_CODE, P_VERSION, P_TYPE, NUM_FOR, NUM_OPT, GAR_ID, V_DEB_STD, V_FIN_STD);
			IF (DATE_DEB_GAR > 0 AND DATE_DEB_GAR<V_DEB_STD AND V_DEB_STD > 0) THEN 
				SET V_MESSAGECTRL = 'Incohérence de dates de début de garantie ' CONCAT CODE_GAR;
				CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'OPT' , 30 , 'OPT' , 0 , 0 , 0 , 0 , NUM_FOR , 1 , CODE_GAR , V_MESSAGECTRL , 'B' , P_USER , P_DATE , P_HEURE ) ; 
			END IF ;
			IF (DATE_FIN_GAR > 0 AND DATE_FIN_GAR>V_FIN_STD AND V_FIN_STD > 0) THEN 
				SET V_MESSAGECTRL = 'Incohérence de dates de fin de garantie ' CONCAT CODE_GAR;
				CALL SP_CREATECTRL ( P_CODE , P_VERSION , P_TYPE , 'OPT' , 30 , 'OPT' , 0 , 0 , 0 , 0 , NUM_FOR , 1 , CODE_GAR , V_MESSAGECTRL , 'B' , P_USER , P_DATE , P_HEURE ) ; 
			END IF ;
		END FOR;
	END IF ;
END P1  ;

