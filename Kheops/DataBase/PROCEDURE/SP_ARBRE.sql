CREATE PROCEDURE SP_ARBRE ( 
	IN P_CODEOFFRE CHAR(9) , 
	IN P_VERSION INTEGER , 
	IN P_TYPE CHAR(1) , 
	IN P_CODEAVN INTEGER ) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC SP_ARBRE 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	DBGVIEW = *SOURCE , 
	CLOSQLCSR = *ENDMOD , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = ZALBINKHEO , 
	DYNDFTCOL = *YES , 
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC 
  
/* DECLARE CURSORTREE CURSOR FOR               
SELECT KEVTYP TYPE , KEVIPB CODEOFFRE , KEVALX VERSION , PBREF DESCOFFRE , KEVETAPE ETAPE , KEVETORD ETAPEORD , KEVORDR ORDRE , KEVPERI PERIMETRE ,               
KEVRSQ CODERSQ , IFNULL ( KABDESC , '' ) DESCRSQ , KEVOBJ CODEOBJ ,               
KEVFOR CODEFOR , IFNULL ( KDAALPHA , '' ) LETTREFOR , IFNULL ( KDADESC , '' ) DESCFOR , KEVOPT CODEOPT , IFNULL ( JECCH , 0 ) CHRONORSQ ,               
KEVTAG PASSAGETAG               
FROM KPCTRLE               
INNER JOIN YPOBASE ON PBTYP = KEVTYP AND PBIPB = KEVIPB AND PBALX = KEVALX               
LEFT JOIN YPRTRSQ ON JERSQ = KEVRSQ AND JEIPB = KEVIPB AND JEALX = KEVALX               
LEFT JOIN KPRSQ ON KABTYP = KEVTYP AND KABIPB = KEVIPB AND KABALX = KEVALX AND KABRSQ = KEVRSQ               
LEFT JOIN KPOPTAP ON KDDTYP = KEVTYP AND KDDIPB = KEVIPB AND KDDALX = KEVALX AND KDDRSQ = KEVRSQ               
LEFT JOIN KPFOR ON KDATYP = KEVTYP AND KDAIPB = KEVIPB AND KDAALX = KEVALX AND KDAFOR = KEVFOR               
WHERE KEVTYP = P_TYPE AND KEVIPB = P_CODEOFFRE AND KEVALX = P_VERSION               
ORDER BY KEVETORD , KEVRSQ , KEVOBJ , KEVFOR , KEVOPT ;               
                
OPEN CURSORTREE ;  */ 
  
DECLARE V_TRAITEMENT CHAR( 5 ) DEFAULT '' ;  
DECLARE V_QUERY VARCHAR ( 8000 ) DEFAULT '' ; 
DECLARE CURSORTREE CURSOR WITH RETURN FOR SQL_STATEMENT ; 

SELECT PBTTR INTO V_TRAITEMENT FROM YPOBASE WHERE PBIPB = P_CODEOFFRE AND PBALX = P_VERSION AND PBTYP = P_TYPE;
  
SET V_QUERY = 'SELECT KEVTYP TYPE , KEVIPB CODEOFFRE , KEVALX VERSION , PBREF DESCOFFRE , KEVETAPE ETAPE , KEVETORD ETAPEORD , KEVORDR ORDRE , KEVPERI PERIMETRE , 
KEVRSQ CODERSQ , IFNULL ( KABDESC , '''' ) DESCRSQ , KEVOBJ CODEOBJ , 
KEVFOR CODEFOR , IFNULL ( KDAALPHA , '''' ) LETTREFOR , IFNULL ( KDADESC , '''' ) DESCFOR , KEVOPT CODEOPT , IFNULL ( JECCH , 0 ) CHRONORSQ , 
KEVTAG PASSAGETAG,  (PBAVA * 10000 + PBAVM * 100 + PBAVJ) DATEDEBAVN, DATEFIN DATEFINRSQ, PBAVN NUMAVN' ; 
  
IF ( P_CODEAVN > 0 ) THEN 
	SET V_QUERY = V_QUERY CONCAT ', IFNULL(KHOFOR, 0) AVTFOR, IFNULL(KDBAVE, 0) CREATEAVT, IFNULL(KDBAVG, 0) MODIFAVT' ; 
ELSE 
	SET V_QUERY = V_QUERY CONCAT ', -1 AVTFOR, 0 CREATEAVT, 0 MODIFAVT' ; 
END IF ; 
  
SET V_QUERY = V_QUERY CONCAT ' FROM KPCTRLE 
INNER JOIN YPOBASE ON PBTYP = KEVTYP AND PBIPB = KEVIPB AND PBALX = KEVALX 
LEFT JOIN YPRTRSQ ON JERSQ = KEVRSQ AND JEIPB = KEVIPB AND JEALX = KEVALX 
LEFT JOIN KPRSQ ON KABTYP = KEVTYP AND KABIPB = KEVIPB AND KABALX = KEVALX AND KABRSQ = KEVRSQ 
left join kjobsorti on ipb = kabipb and alx = kabalx and typ = kabtyp and rsq = kabrsq and avn = PBAVN
LEFT JOIN KPOPTAP ON KDDTYP = KEVTYP AND KDDIPB = KEVIPB AND KDDALX = KEVALX AND KDDRSQ = KEVRSQ 
LEFT JOIN KPFOR ON KDATYP = KEVTYP AND KDAIPB = KEVIPB AND KDAALX = KEVALX AND KDAFOR = KEVFOR
LEFT JOIN KPOPT ON KDBKDAID = KDAID' ; 
  
IF ( P_CODEAVN > 0 ) THEN 
	SET V_QUERY = V_QUERY CONCAT ' LEFT JOIN KPAVTRC ON KHOIPB = KDAIPB AND KHOALX = KDAALX AND KHOTYP = KDATYP AND TRIM(KHOPERI) = ''OPT'' AND KHOFOR = KDAFOR' ; 
END IF ; 
  
SET V_QUERY = V_QUERY CONCAT ' WHERE KEVTYP = ''' CONCAT P_TYPE CONCAT ''' AND KEVIPB = ''' CONCAT P_CODEOFFRE CONCAT ''' AND KEVALX = ' CONCAT P_VERSION;
  
IF V_TRAITEMENT != 'REGUL' AND V_TRAITEMENT != 'AVNRG' THEN
	SET V_QUERY = V_QUERY CONCAT ' and ifnull( sorti, ''N'' ) <> ''O''';
END IF ;

SET V_QUERY = V_QUERY CONCAT ' ORDER BY KEVETORD , KEVRSQ , KEVOBJ , KEVFOR , KEVOPT ' ; 


PREPARE SQL_STATEMENT FROM V_QUERY ; 
OPEN CURSORTREE ; 
  
END P1  ; 
  

  

