
  
CREATE OR REPLACE PROCEDURE SP_CCLAUSE ( 
	IN P_CODEOFFRE CHAR(9) , 
	IN P_VERSION INTEGER , 
	IN P_TYPE CHAR(1) , 
	IN P_NEWVERSION INTEGER , 
	IN P_CODECONTRAT CHAR(9) , 
	IN P_VERSIONCONTRAT INTEGER , 
	IN P_TRAITEMENT CHAR(1) , 
	IN P_COPYCODEOFFRE CHAR(9) , 
	IN P_COPYVERSION INTEGER , 
	IN P_MODECOPY CHAR(7) ) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	CLOSQLCSR = *ENDMOD , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = ZALBINKHEO , 
	DYNDFTCOL = *YES , 
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC 
  
	DECLARE V_CODEOFFRE VARCHAR ( 9 ) DEFAULT '' ; 
	DECLARE V_TYPEOFFRE VARCHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_VERSOFFRE INTEGER DEFAULT 0 ; 
	DECLARE V_NEWVERS INTEGER DEFAULT 0 ; 
	 
	SET P_CODEOFFRE = LPAD ( TRIM ( P_CODEOFFRE ) , 9 , ' ');
	SET P_CODECONTRAT = LPAD ( TRIM ( P_CODECONTRAT ) , 9 , ' ');
	SET P_COPYCODEOFFRE = LPAD ( TRIM ( P_COPYCODEOFFRE ) , 9 , ' ');

	SET V_CODEOFFRE = P_CODEOFFRE ; 
	SET V_TYPEOFFRE = P_TYPE ; 
	SET V_VERSOFFRE = P_VERSION ; 
	SET V_NEWVERS = P_NEWVERSION ; 
  
	IF ( P_TRAITEMENT = 'P' ) THEN 
		SET V_CODEOFFRE = P_CODECONTRAT ; 
		SET V_TYPEOFFRE = 'P' ; 
		SET V_VERSOFFRE = P_VERSIONCONTRAT ; 
		SET V_NEWVERS = P_VERSIONCONTRAT ; 
	END IF ; 
	 
	IF ( P_TRAITEMENT = 'C' ) THEN 
		SET V_CODEOFFRE = P_COPYCODEOFFRE ; 
		SET V_VERSOFFRE = P_COPYVERSION ; 
		SET V_NEWVERS = P_COPYVERSION ; 
	END IF ; 
  
  
	IF ( P_MODECOPY = 'VERSION' ) THEN 
		FOR LOOP_CLAUSEVERSION AS FREE_LIST CURSOR FOR 
			SELECT KCAID CODECLAUSE , KCAINVEN CODEINVEN , KCATXL CODECLIBRE 
			FROM KPCLAUSE 
			WHERE KCATYP = P_TYPE AND TRIM ( KCAIPB ) = TRIM ( P_CODEOFFRE ) AND KCAALX = P_VERSION 
		DO 
			CALL SP_COPYCLAUSE ( V_CODEOFFRE , V_VERSOFFRE , V_TYPEOFFRE , V_NEWVERS , P_MODECOPY , CODECLAUSE , CODECLIBRE , CODEINVEN ) ; 
		END FOR ; 
	ELSEIF P_MODECOPY = 'AFFNOUV' THEN
		FOR LOOP_CLAUSEAN AS FREE_LIST CURSOR FOR 
			SELECT KCAID CODECLAUSE , KCAINVEN CODEINVEN , KCATXL CODECLIBRE 
			FROM KPCLAUSE 
			where ( KCAIPB , KCAALX , KCATYP ) = ( P_CODEOFFRE , P_VERSION , P_TYPE )
			and (
				KCAETAPE <> 'OPT' OR
				exists ( 
					select 1 
					from KPOFOPT 
					where 
						( KCAIPB , KCAALX , KCATYP , KCAFOR , KCAOPT , 'O'     , 'O'    , P_CODECONTRAT , P_VERSIONCONTRAT ) 
					  = ( KFJIPB , KFJALX , 'O'    , KFJFOR , KFJOPT , KFJTENG , KFJSEL , KFJPOG        , KFJALG )
				)
			)
			AND ( ( ( KCANTA = 'S' OR KCANTA = '' ) AND KCASIT = 'V' ) OR ( KCANTA = 'P' ) ) 
		DO		 
			CALL SP_COPYCLAUSE ( V_CODEOFFRE , V_VERSOFFRE , V_TYPEOFFRE , V_NEWVERS , P_MODECOPY , CODECLAUSE , CODECLIBRE , CODEINVEN ) ; 
		END FOR ; 
	ELSE 
		FOR LOOP_CLAUSE AS FREE_LIST CURSOR FOR 
			SELECT KCAID CODECLAUSE , KCAINVEN CODEINVEN , KCATXL CODECLIBRE 
			FROM KPCLAUSE 
			WHERE KCATYP = P_TYPE AND KCAIPB = P_CODEOFFRE AND KCAALX = P_VERSION 
			AND ( ( ( KCANTA = 'S' OR KCANTA = '' ) AND KCASIT = 'V' ) OR ( KCANTA = 'P' ) ) 
			 --AJOUT ECM/SLA (25.02.2015) : ON NE COPIE QUE LES CLAUSES COCHÉES ET TOUTES LES PROPOSÉES (COCHÉES OU NON) 
		DO		 
			CALL SP_COPYCLAUSE ( V_CODEOFFRE , V_VERSOFFRE , V_TYPEOFFRE , V_NEWVERS , P_MODECOPY , CODECLAUSE , CODECLIBRE , CODEINVEN ) ; 
		END FOR ; 
	END IF ; 
	 
END P1  ;

