CREATE OR REPLACE PROCEDURE SP_CFORMUL(
	IN P_CODEOFFRE CHAR(9) , 
	IN P_VERSION INTEGER , 
	IN P_TYPE CHAR(1) , 
	IN P_NEWVERSION INTEGER , 
	IN P_CODECONTRAT CHAR(9) , 
	IN P_VERSIONCONTRAT INTEGER , 
	IN P_DATESYSTEME VARCHAR(8) , 
	IN P_USER VARCHAR(15) , 
	IN P_TRAITEMENT VARCHAR(1) , 
	IN P_COPYCODEOFFRE CHAR(9) , 
	IN P_COPYVERSION INTEGER , 
	IN P_MODECOPY CHAR(7) ) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	CLOSQLCSR = *ENDMOD , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = ZALBINKHEO , 
	DYNDFTCOL = *YES , 
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC 
  
	DECLARE V_NEWCODEFORMULE INTEGER DEFAULT 0 ; 
	 
	DECLARE V_SELFOR VARCHAR ( 1 ) DEFAULT 'N' ; 
	DECLARE V_CODEOFFRE VARCHAR ( 9 ) DEFAULT '' ; 
	DECLARE V_TYPEOFFRE VARCHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_VERSOFFRE INTEGER DEFAULT 0 ; 
	DECLARE V_NEWVERS INTEGER DEFAULT 0 ; 
	 
	SET P_CODEOFFRE = LPAD ( TRIM ( P_CODEOFFRE ) , 9 , ' ') ;
	SET P_CODECONTRAT = LPAD ( TRIM ( P_CODECONTRAT ) , 9 , ' ') ;
	SET P_COPYCODEOFFRE = LPAD ( TRIM ( P_COPYCODEOFFRE ) , 9 , ' ') ;
    
	SET V_CODEOFFRE = P_CODEOFFRE ; 
	SET V_TYPEOFFRE = P_TYPE ; 
	SET V_VERSOFFRE = P_VERSION ; 
	SET V_NEWVERS = P_NEWVERSION ; 
	 
	FOR FORM_LOOP AS FREE_LIST CURSOR FOR 
		SELECT KDAID CODEFORMULE FROM KPFOR WHERE P_MODECOPY <> 'AFFNOUV' AND KDAIPB = P_CODEOFFRE AND KDAALX = P_VERSION AND KDATYP = P_TYPE 
		UNION 
		SELECT KDAID CODEFORMULE
		FROM KPFOR
		INNER JOIN KPOFOPT ON P_MODECOPY = 'AFFNOUV'
		AND ( KDAIPB , KDAALX , KDATYP ) = ( P_CODEOFFRE , P_VERSION , P_TYPE )
		AND ( KDAIPB , KDAALX , KDATYP , P_CODECONTRAT , P_VERSIONCONTRAT , 'O' , 'F' , KDAFOR ) = ( KFJIPB , KFJALX , 'O', KFJPOG , KFJALG , KFJSEL , KFJTENG , KFJFOR )
	DO 
		IF ( P_TRAITEMENT = 'P' ) THEN 
			SET V_SELFOR = 'O' ; 
			 
			SET V_CODEOFFRE = P_CODECONTRAT ; 
			SET V_TYPEOFFRE = 'P' ; 
			SET V_VERSOFFRE = P_VERSIONCONTRAT ; 
			SET V_NEWVERS = P_VERSIONCONTRAT ; 
		END IF ; 
		 
		IF ( P_TRAITEMENT = 'C' ) THEN 
			SET V_CODEOFFRE = P_COPYCODEOFFRE ; 
			SET V_VERSOFFRE = P_COPYVERSION ; 
			SET V_NEWVERS = P_COPYVERSION ; 
		END IF ; 
		 
		IF ( P_TRAITEMENT = 'V' OR V_SELFOR = 'O' OR P_TRAITEMENT = 'C' OR P_TRAITEMENT = 'F' ) THEN 
		 
			CALL SP_SECOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KDAID' , CODEFORMULE , V_NEWCODEFORMULE ) ; 
			IF ( V_NEWCODEFORMULE = 0 ) THEN 
				CALL SP_NCHRONO ( 'KDAID' , V_NEWCODEFORMULE ) ; 
				CALL SP_INCOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KDAID' , CODEFORMULE , V_NEWCODEFORMULE ) ; 
			END IF ; 
		 
			INSERT INTO KPFOR 
			( SELECT V_NEWCODEFORMULE , V_TYPEOFFRE , V_CODEOFFRE , V_NEWVERS , KDAFOR , KDACCH , KDAALPHA , 
				KDABRA , KDACIBLE , KDAKAIID , KDADESC , P_USER , P_DATESYSTEME , P_USER , P_DATESYSTEME , KDAFGEN 
				FROM KPFOR WHERE KDAID = CODEFORMULE ) ; 
			 
			CALL SP_COPTION ( P_CODEOFFRE , P_VERSION , P_TYPE , CODEFORMULE , V_NEWCODEFORMULE , P_NEWVERSION , P_CODECONTRAT , P_VERSIONCONTRAT , P_DATESYSTEME , P_USER , P_TRAITEMENT , P_COPYCODEOFFRE , P_COPYVERSION , P_MODECOPY ) ; 
		 
		END IF ; 
	END FOR ; 
  
END P1  ; 
  

  

