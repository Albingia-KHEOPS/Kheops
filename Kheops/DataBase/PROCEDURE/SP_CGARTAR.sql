CREATE OR REPLACE PROCEDURE SP_CGARTAR(
	IN P_CODEOFFRE CHAR(9) , 
	IN P_VERSION INTEGER , 
	IN P_TYPE CHAR(1) , 
	IN P_CODEGARAN INTEGER , 
	IN P_NEWCODEGARAN INTEGER , 
	IN P_NEWVERSION INTEGER , 
	IN P_CODECONTRAT CHAR(9) , 
	IN P_VERSIONCONTRAT INTEGER , 
	IN P_DATESYSTEME VARCHAR(8) , 
	IN P_USER VARCHAR(15) , 
	IN P_TRAITEMENT VARCHAR(1) , 
	IN P_COPYCODEOFFRE CHAR(9) , 
	IN P_COPYVERSION INTEGER , 
	IN P_MODECOPY CHAR(7) ) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	CLOSQLCSR = *ENDMOD , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = ZALBINKHEO , 
	DYNDFTCOL = *YES , 
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC 
  
	DECLARE V_SELTAR VARCHAR ( 1 ) DEFAULT 'N' ; 
	DECLARE V_NEWCODEGARTAR INTEGER DEFAULT 0 ; 
	DECLARE V_NEWCODELCI INTEGER DEFAULT 0 ; 
	DECLARE V_NEWCODEFRH INTEGER DEFAULT 0 ; 
	 
	DECLARE V_CODEOFFRE VARCHAR ( 9 ) DEFAULT '' ; 
	DECLARE V_TYPEOFFRE VARCHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_VERSOFFRE INTEGER DEFAULT 0 ; 
	DECLARE V_NEWVERS INTEGER DEFAULT 0 ; 
		 
	SET P_CODEOFFRE = LPAD ( TRIM ( P_CODEOFFRE ) , 9 , ' ') ;
	SET P_CODECONTRAT = LPAD ( TRIM ( P_CODECONTRAT ) , 9 , ' ') ;
	SET P_COPYCODEOFFRE = LPAD ( TRIM ( P_COPYCODEOFFRE ) , 9 , ' ') ;
	 
	SET V_CODEOFFRE = P_CODEOFFRE ; 
	SET V_TYPEOFFRE = P_TYPE ; 
	SET V_VERSOFFRE = P_VERSION ; 
	SET V_NEWVERS = P_NEWVERSION ; 
	 
	IF ( P_TRAITEMENT = 'P' ) THEN 
		SET V_CODEOFFRE = P_CODECONTRAT ; 
		SET V_TYPEOFFRE = 'P' ; 
		SET V_VERSOFFRE = P_VERSIONCONTRAT ; 
		SET V_NEWVERS = P_VERSIONCONTRAT ; 
	END IF ; 
	 
	IF ( P_TRAITEMENT = 'C' ) THEN 
		SET V_CODEOFFRE = P_COPYCODEOFFRE ; 
		SET V_VERSOFFRE = P_COPYVERSION ; 
		SET V_NEWVERS = P_COPYVERSION ; 
	END IF ; 
	 
	FOR FORM_LOOP AS FREE_LIST CURSOR FOR 
		SELECT KDGID CODEGARTAR , KDGLCIUNIT LCIUNIT , KDGKDIID CODELCI , KDGFRHUNIT FRHUNIT , KDGKDKID CODEFRH FROM KPGARTAR 
		WHERE KDGKDEID = P_CODEGARAN 
	DO 
		SET V_NEWCODEFRH = 0 ; 
		SET V_NEWCODELCI = 0 ; 
		SET V_SELTAR = 'O' ; 
		 
		IF ( V_SELTAR = 'O' ) THEN 
			CALL SP_SECOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KDGID' , CODEGARTAR , V_NEWCODEGARTAR ) ; 
			IF ( V_NEWCODEGARTAR = 0 ) THEN 
				CALL SP_NCHRONO ( 'KDGID' , V_NEWCODEGARTAR ) ; 
				CALL SP_INCOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KDGID' , CODEGARTAR , V_NEWCODEGARTAR ) ; 
			END IF ; 
		 
			IF ( CODELCI != 0 AND TRIM ( LCIUNIT ) = 'CPX' ) THEN 
				CALL SP_SECOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KDIID' , CODELCI , V_NEWCODELCI ) ; 
				IF ( V_NEWCODELCI = 0 ) THEN 
					CALL SP_NCHRONO ( 'KDIID' , V_NEWCODELCI ) ; 
					CALL SP_INCOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KDIID' , CODELCI , V_NEWCODELCI ) ; 
				END IF ; 
			END IF ; 
		 
			IF ( CODEFRH != 0 AND TRIM ( FRHUNIT ) = 'CPX' ) THEN 
				CALL SP_SECOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KDKID' , CODEFRH , V_NEWCODEFRH ) ; 
				IF ( V_NEWCODEFRH = 0 ) THEN 
					CALL SP_NCHRONO ( 'KDKID' , V_NEWCODEFRH ) ; 
					CALL SP_INCOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KDKID' , CODEFRH , V_NEWCODEFRH ) ; 
				END IF ; 
			END IF ; 
		 
			IF ( TRIM ( P_MODECOPY ) = 'OFFRE' OR TRIM ( P_MODECOPY ) = 'AFNCOPY' ) THEN 
				INSERT INTO KPGARTAR 
				( SELECT V_NEWCODEGARTAR , V_TYPEOFFRE , V_CODEOFFRE , V_NEWVERS , KDGFOR , KDGOPT , KDGGARAN , P_NEWCODEGARAN , 
				KDGNUMTAR , KDGLCIMOD , KDGLCIOBL , KDGLCIVALO , KDGLCIVALA , KDGLCIVALW , KDGLCIUNIT , KDGLCIBASE , V_NEWCODELCI , 
				KDGFRHMOD , KDGFRHOBL , KDGFRHVALO , KDGFRHVALA , KDGFRHVALW , KDGFRHUNIT , KDGFRHBASE , V_NEWCODEFRH , 
				KDGFMIVALO , KDGFMIVALA , KDGFMIVALW , KDGFMIUNIT , KDGFMIBASE , KDGFMAVALO , KDGFMAVALA , KDGFMAVALW , 
				KDGFMAUNIT , KDGFMABASE , KDGPRIMOD , KDGPRIOBL , KDGPRIVALA , KDGPRIVALA , KDGPRIVALW , KDGPRIUNIT , KDGPRIBASE , 
				KDGMNTBASE , 0 , KDGTMC , KDGTFF , KDGCMC , KDGCHT , KDGCTT 
				FROM KPGARTAR WHERE KDGID = CODEGARTAR ) ; 
			 
			ELSE 
				INSERT INTO KPGARTAR 
				( SELECT V_NEWCODEGARTAR , V_TYPEOFFRE , V_CODEOFFRE , V_NEWVERS , KDGFOR , KDGOPT , KDGGARAN , P_NEWCODEGARAN , 
				KDGNUMTAR , KDGLCIMOD , KDGLCIOBL , KDGLCIVALO , KDGLCIVALA , KDGLCIVALW , KDGLCIUNIT , KDGLCIBASE , V_NEWCODELCI , 
				KDGFRHMOD , KDGFRHOBL , KDGFRHVALO , KDGFRHVALA , KDGFRHVALW , KDGFRHUNIT , KDGFRHBASE , V_NEWCODEFRH , 
				KDGFMIVALO , KDGFMIVALA , KDGFMIVALW , KDGFMIUNIT , KDGFMIBASE , KDGFMAVALO , KDGFMAVALA , KDGFMAVALW , 
				KDGFMAUNIT , KDGFMABASE , KDGPRIMOD , KDGPRIOBL , KDGPRIVALO , KDGPRIVALA , KDGPRIVALW , KDGPRIUNIT , KDGPRIBASE , 
				KDGMNTBASE , KDGPRIMPRO , KDGTMC , KDGTFF , KDGCMC , KDGCHT , KDGCTT 
				FROM KPGARTAR WHERE KDGID = CODEGARTAR ) ; 
			END IF ; 
		END IF ; 
	END FOR ; 
  
END P1  ; 
  

  

