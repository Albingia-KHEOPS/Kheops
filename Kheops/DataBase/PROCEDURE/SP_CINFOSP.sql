CREATE OR REPLACE PROCEDURE SP_CINFOSP(
	IN P_CODEOFFRE CHAR(9) , 
	IN P_VERSION INTEGER , 
	IN P_TYPE CHAR(1) , 
	IN P_NEWVERSION INTEGER , 
	IN P_CODECONTRAT CHAR(9) , 
	IN P_VERSIONCONTRAT INTEGER , 
	IN P_TRAITEMENT CHAR(1) , 
	IN P_COPYCODEOFFRE CHAR(9) , 
	IN P_COPYVERSION INTEGER , 
	IN P_MODECOPY CHAR(7) ) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	CLOSQLCSR = *ENDMOD , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = ZALBINKHEO , 
	DYNDFTCOL = *YES , 
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC 
  
	DECLARE V_NEWLIENKOPT INTEGER DEFAULT 0 ; 
	DECLARE V_NEWIDOPT INTEGER DEFAULT 0 ; 
	DECLARE V_NEWISVAL INTEGER DEFAULT 0 ; 
	 
	DECLARE V_NEWCODEGARAN INTEGER DEFAULT 0 ; 
	DECLARE V_NEWCODEGARAP INTEGER DEFAULT 0 ; 
	DECLARE V_NEWCODEINVEN INTEGER DEFAULT 0 ; 
	 
	DECLARE V_CODEOFFRE VARCHAR ( 9 ) DEFAULT '' ; 
	DECLARE V_TYPEOFFRE VARCHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_VERSOFFRE INTEGER DEFAULT 0 ; 
	DECLARE V_NEWVERS INTEGER DEFAULT 0 ; 
	 
	SET P_CODEOFFRE = LPAD ( TRIM ( P_CODEOFFRE ) , 9 , ' ') ;
	SET P_CODECONTRAT = LPAD ( TRIM ( P_CODECONTRAT ) , 9 , ' ') ;
	SET P_COPYCODEOFFRE = LPAD ( TRIM ( P_COPYCODEOFFRE ) , 9 , ' ') ;

	SET V_CODEOFFRE = P_CODEOFFRE ; 
	SET V_TYPEOFFRE = P_TYPE ; 
	SET V_VERSOFFRE = P_VERSION ; 
	SET V_NEWVERS = P_NEWVERSION ; 
	 
	IF ( P_TRAITEMENT = 'P' ) THEN 
		SET V_CODEOFFRE = P_CODECONTRAT ; 
		SET V_TYPEOFFRE = 'P' ; 
		SET V_VERSOFFRE = P_VERSIONCONTRAT ; 
		SET V_NEWVERS = P_VERSIONCONTRAT ; 
	END IF ; 
	 
	IF ( P_TRAITEMENT = 'C' ) THEN 
		SET V_CODEOFFRE = P_COPYCODEOFFRE ; 
		SET V_VERSOFFRE = P_COPYVERSION ; 
		SET V_NEWVERS = P_COPYVERSION ; 
	END IF ; 
  
	FOR LOOP_OPT AS FREE_LIST CURSOR FOR 
		SELECT KFCTYP V_TYPEOPT , KFCIPB V_CODEOFFREOPT , KFCALX V_VERSIONOPT , KFCFOR V_CODEFOR , KFCOPT V_CODEOPT , KFCKDBID V_LIENKOPT 
		FROM KPIOPT 
		WHERE P_MODECOPY <> 'AFFNOUV' AND ( KFCIPB , KFCALX , KFCTYP ) = ( P_CODEOFFRE , P_VERSION , P_TYPE ) 
		UNION ALL 
		SELECT KFCTYP V_TYPEOPT , KFCIPB V_CODEOFFREOPT , KFCALX V_VERSIONOPT , KFCFOR V_CODEFOR , KFCOPT V_CODEOPT , KFCKDBID V_LIENKOPT 
		FROM KPIOPT 
		INNER JOIN KPOFOPT ON P_MODECOPY = 'AFFNOUV'
		AND ( KFCIPB , KFCALX , KFCTYP ) = ( P_CODEOFFRE , P_VERSION , P_TYPE )
		AND ( KFCIPB , KFCALX , KFCTYP , KFCFOR , KFCOPT , 'O' , 'O' , P_CODECONTRAT , P_VERSIONCONTRAT ) = ( KFJIPB , KFJALX , 'O' , KFJFOR , KFJOPT , KFJTENG , KFJSEL , KFJPOG , KFJALG )
	DO 
	 
		IF ( V_CODEOPT != 0 ) THEN 
			CALL SP_SECOPID ( V_CODEOFFRE , V_VERSOFFRE , V_TYPEOFFRE , 'KDBID' , V_LIENKOPT , V_NEWLIENKOPT ) ; 
		END IF ; 
		 
		CALL SP_NCHRONO ( 'KFCID' , V_NEWIDOPT ) ; 
		 
		INSERT INTO KPIOPT 
		( SELECT V_NEWIDOPT , V_TYPEOFFRE , V_CODEOFFRE , V_NEWVERS , KFCFOR , KFCOPT , V_NEWLIENKOPT , KFCRRCR , KFCRRC , KFCMNTE , 
		KFCSEUI , KFCSEUR , KFCSEUC , KFCPERR , KFCAUTM , KFCCRD , KFCCRH , KFCMAJU , KFCMAJD , KFCMAJH 
		FROM KPIOPT 
		WHERE KFCTYP = V_TYPEOPT AND KFCIPB = V_CODEOFFREOPT AND KFCALX = V_VERSIONOPT AND KFCFOR = V_CODEFOR AND KFCOPT = V_CODEOPT ) ; 
	 
	END FOR ; 
	 
	FOR LOOP_GAR AS FREE_LIST CURSOR FOR 
		SELECT KFDTYP V_TYPERSGA , KFDIPB V_CODEOFFRERSGA , KFDALX V_VERSIONRSGA , KFDFOR V_CODEFOR , KFDOPT V_CODEOPT 
		FROM KPIRSGA 
		WHERE P_MODECOPY <> 'AFFNOUV' AND ( KFDIPB , KFDALX , KFDTYP ) = ( P_CODEOFFRE , P_VERSION , P_TYPE )
		UNION ALL 
		SELECT KFDTYP V_TYPERSGA , KFDIPB V_CODEOFFRERSGA , KFDALX V_VERSIONRSGA , KFDFOR V_CODEFOR , KFDOPT V_CODEOPT 
		FROM KPIRSGA 
		INNER JOIN KPOFOPT ON P_MODECOPY = 'AFFNOUV'
		AND ( KFDIPB , KFDALX , KFDTYP ) = ( P_CODEOFFRE , P_VERSION , P_TYPE )
		AND ( KFDIPB , KFDALX , KFDTYP , KFDFOR , KFDOPT , 'O' , 'O' , P_CODECONTRAT , P_VERSIONCONTRAT ) = ( KFJIPB , KFJALX , 'O' , KFJFOR , KFJOPT , KFJTENG , KFJSEL , KFJPOG , KFJALG )
	DO 
	 
		INSERT INTO KPIRSGA 
		( KFDTYP , KFDIPB , KFDALX , KFDFOR , KFDOPT , KFDCRD , KFDCRH , KFDMAJU , KFDMAJD , KFDMAJH , 
		KFDAN02 , KFDAN03 , KFDBO01 , KFDBO02 , KFDBO03 , KFDIM08 , KFDIM09 , KFDIM10 , KFDNBGR , KFDEFFV , KFDCNVD , 
		KFDFRDM , KFDSORN , KFDSORD , KFDSORR , 
		KFD05 , KFD06 , KFD07 , KFD08 , KFD09 , KFDIA01 , KFDIA02 , KFDIA03 , KFDIARA17 , KFDRSAT , KFDRCPS , KFDRCPF , KFDRCPD , KFDRASB , KFDRASL , 
		KFDRASS , KFDCOTNB , KFDCOTMT , KFDMNT , KFDMNTNB , KFDMNTMT , KFDRGU , KFDNBJI , KFDAN04 , KFDGARAV , KFDVOLAV , KFDVOLAP , KFDLMA , KFDMXM , 
		KFDAVN , KFDHIN , KFDRAY , KFDAN05 , KFDRAY5 , KFDAN06 , KFDAN07 , KFDCLAL ) 
		 
		( SELECT V_TYPEOFFRE , V_CODEOFFRE , V_NEWVERS , KFDFOR , KFDOPT , KFDCRD , KFDCRH , KFDMAJU , KFDMAJD , KFDMAJH , 
		KFDAN02 , KFDAN03 , KFDBO01 , KFDBO02 , KFDBO03 , KFDIM08 , KFDIM09 , KFDIM10 , KFDNBGR , KFDEFFV , KFDCNVD , 
		KFDFRDM , KFDSORN , KFDSORD , KFDSORR , 
		KFD05 , KFD06 , KFD07 , KFD08 , KFD09 , KFDIA01 , KFDIA02 , KFDIA03 , KFDIARA17 , KFDRSAT , KFDRCPS , KFDRCPF , KFDRCPD , KFDRASB , KFDRASL , 
		KFDRASS , KFDCOTNB , KFDCOTMT , KFDMNT , KFDMNTNB , KFDMNTMT , KFDRGU , KFDNBJI , KFDAN04 , KFDGARAV , KFDVOLAV , KFDVOLAP , KFDLMA , KFDMXM , 
		KFDAVN , KFDHIN , KFDRAY , KFDAN05 , KFDRAY5 , KFDAN06 , KFDAN07 , KFDCLAL 
		FROM KPIRSGA 
		WHERE KFDTYP = V_TYPERSGA AND KFDIPB = V_CODEOFFRERSGA AND KFDALX = V_VERSIONRSGA AND KFDFOR = V_CODEFOR AND KFDOPT = V_CODEOPT ) ; 
	 
	END FOR ; 
	 
	IF ( P_TRAITEMENT = 'P' ) THEN 

		FOR LOOP_ISVAL1 AS FREE_LIST CURSOR FOR
			SELECT KKCID ISVAL_ID
			FROM KPISVAL
			INNER JOIN KPOFRSQ ON KFIIPB = KKCIPB AND KFIALX = KKCALX AND KFIRSQ = KKCRSQ AND KFIOBJ = KKCOBJ
			WHERE ( KKCIPB , KKCALX , KKCTYP ) = ( P_CODEOFFRE , P_VERSION, P_TYPE ) 
		DO
			SET V_NEWISVAL = 0;
			CALL SP_NCHRONO ( 'KKCID' , V_NEWISVAL ) ; 

			INSERT INTO KPISVAL
			(KKCID, KKCTYP, KKCIPB, KKCALX, KKCAVN, KKCHIN, KKCRSQ, KKCOBJ, KKCFOR, KKCOPT, KKCKGBNMID, KKCVDEC, KKCVUN, KKCVDATD, KKCVHEUD, KKCVDATF, KKCVHEUF, KKCVTXT, KKCKFBID, KKCISVAL)
			( SELECT V_NEWISVAL , V_TYPEOFFRE , V_CODEOFFRE , V_NEWVERS , 0 , 0 , KKCRSQ , KKCOBJ , KKCFOR , KKCOPT , KKCKGBNMID , KKCVDEC , KKCVUN , KKCVDATD , KKCVHEUD , KKCVDATF , KKCVHEUF , KKCVTXT , KKCKFBID , KKCISVAL 
			FROM KPISVAL
			WHERE KKCID = ISVAL_ID) ;
			
		END FOR;

		FOR LOOP_OB1 AS FREE_LIST CURSOR FOR 
			SELECT KFATYP V_TYPERSOB , KFAIPB V_CODEOFFRERSOB , KFAALX V_VERSIONRSOB , KFARSQ V_CODERSQ , KFAOBJ V_CODEOBJ 
			FROM KPIRSOB 
			INNER JOIN KPOFRSQ ON KFIIPB = KFAIPB AND KFIALX = KFAALX AND KFIRSQ = KFARSQ AND KFIOBJ = KFAOBJ 
			AND KFIPOG = V_CODEOFFRE AND KFIALG = V_NEWVERS 
			WHERE KFATYP = P_TYPE AND KFAIPB = P_CODEOFFRE AND KFAALX = P_VERSION 
		DO 
  
			INSERT INTO KPIRSOB 
			( KFATYP , KFAIPB , KFAALX , KFARSQ , KFAOBJ , KFANATS , KFANEGA , KFAFRQE , KFANBPA , KFANBEX , KFANBVI , 
			KFAGN08 , KFAGN09 , KFAGN10 , KFANBIN , 
			KFANBPE , KFAGCT , KFANBEM , KFATYTN , KFANMDF , KFAFENT , KFAFSVT , KFANMSC , KFALABD , KFAAVN , KFAHIN , KFANAI , KFALMA , KFAIFP , KFATHF , KFATU1 , KFATU2 , 
	KFAASC , KFAAUTL , KFAQMD , KFASURF , KFAVMC , KFAPROL ) 
			 
			( SELECT V_TYPEOFFRE , V_CODEOFFRE , V_NEWVERS , KFARSQ , KFAOBJ , KFANATS , KFANEGA , KFAFRQE , KFANBPA , KFANBEX , KFANBVI , 
			KFAGN08 , KFAGN09 , KFAGN10 , KFANBIN , 
			KFANBPE , KFAGCT , KFANBEM , KFATYTN , KFANMDF , KFAFENT , KFAFSVT , KFANMSC , KFALABD , KFAAVN , KFAHIN , KFANAI , KFALMA , KFAIFP , KFATHF , KFATU1 , KFATU2 , 
	KFAASC , KFAAUTL , KFAQMD , KFASURF , KFAVMC , KFAPROL		 
			FROM KPIRSOB 
			WHERE KFATYP = V_TYPERSOB AND KFAIPB = V_CODEOFFRERSOB AND KFAALX = V_VERSIONRSOB AND KFARSQ = V_CODERSQ AND KFAOBJ = V_CODEOBJ ) ; 
		 
		END FOR ; 
	ELSE 
		FOR LOOP_ISVAL2 AS FREE_LIST CURSOR FOR
			SELECT KKCID ISVAL_ID
			FROM KPISVAL
			WHERE ( KKCIPB , KKCALX , KKCTYP ) = ( P_CODEOFFRE , P_VERSION, P_TYPE ) 
		DO
			SET V_NEWISVAL = 0;
			CALL SP_NCHRONO ( 'KKCID' , V_NEWISVAL ) ; 

			INSERT INTO KPISVAL
			(KKCID, KKCTYP, KKCIPB, KKCALX, KKCAVN, KKCHIN, KKCRSQ, KKCOBJ, KKCFOR, KKCOPT, KKCKGBNMID, KKCVDEC, KKCVUN, KKCVDATD, KKCVHEUD, KKCVDATF, KKCVHEUF, KKCVTXT, KKCKFBID, KKCISVAL)
			( SELECT V_NEWISVAL , V_TYPEOFFRE , V_CODEOFFRE , V_NEWVERS , 0 , 0 , KKCRSQ , KKCOBJ , KKCFOR , KKCOPT , KKCKGBNMID , KKCVDEC , KKCVUN , KKCVDATD , KKCVHEUD , KKCVDATF , KKCVHEUF , KKCVTXT , KKCKFBID , KKCISVAL 
			FROM KPISVAL
			WHERE KKCID = ISVAL_ID) ;
			
		END FOR;

		FOR LOOP_OB2 AS FREE_LIST CURSOR FOR 
			SELECT KFATYP V_TYPERSOB , KFAIPB V_CODEOFFRERSOB , KFAALX V_VERSIONRSOB , KFARSQ V_CODERSQ , KFAOBJ V_CODEOBJ  --, KFAAUTL V_DESI3 
			FROM KPIRSOB 
			WHERE KFATYP = P_TYPE AND KFAIPB = P_CODEOFFRE AND KFAALX = P_VERSION 
		DO 
  
			INSERT INTO KPIRSOB 
			( KFATYP , KFAIPB , KFAALX , KFARSQ , KFAOBJ , KFANATS , KFANEGA , KFAFRQE , KFANBPA , KFANBEX , KFANBVI , 
			KFAGN08 , KFAGN09 , KFAGN10 , KFANBIN , 
			KFANBPE , KFAGCT , KFANBEM , KFATYTN , KFANMDF , KFAFENT , KFAFSVT , KFANMSC , KFALABD , KFAAVN , KFAHIN , KFANAI , KFALMA , KFAIFP , KFATHF , KFATU1 , KFATU2 , 
	KFAASC , KFAAUTL , KFAQMD , KFASURF , KFAVMC , KFAPROL ) 
			( SELECT V_TYPEOFFRE , V_CODEOFFRE , V_NEWVERS , KFARSQ , KFAOBJ , KFANATS , KFANEGA , KFAFRQE , KFANBPA , KFANBEX , KFANBVI , 
			KFAGN08 , KFAGN09 , KFAGN10 , KFANBIN , 
			KFANBPE , KFAGCT , KFANBEM , KFATYTN , KFANMDF , KFAFENT , KFAFSVT , KFANMSC , KFALABD , KFAAVN , KFAHIN , KFANAI , KFALMA , KFAIFP , KFATHF , KFATU1 , KFATU2 , 
	KFAASC , KFAAUTL , KFAQMD , KFASURF , KFAVMC , KFAPROL		 
			FROM KPIRSOB 
			WHERE KFATYP = V_TYPERSOB AND KFAIPB = V_CODEOFFRERSOB AND KFAALX = V_VERSIONRSOB AND KFARSQ = V_CODERSQ AND KFAOBJ = V_CODEOBJ ) ; 
		 
		END FOR ; 
	END IF ; 
END P1  ; 
  

  

