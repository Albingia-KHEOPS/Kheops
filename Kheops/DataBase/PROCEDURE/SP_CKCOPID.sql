CREATE OR REPLACE PROCEDURE SP_CKCOPID(
	IN P_CODEOFFRE CHAR(9) , 
	IN P_VERSION INTEGER , 
	IN P_TYPE CHAR(1) , 
	IN P_NEWCODE CHAR(9) , 
	IN P_NEWVERSION INTEGER , 
	IN P_NEWTYPE CHAR(1) ) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	CLOSQLCSR = *ENDMOD , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = ZALBINKHEO , 
	DYNDFTCOL = *YES , 
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC 
  
	DECLARE V_EXIT INTEGER DEFAULT 0 ; 
		
	SET P_CODEOFFRE = LPAD ( TRIM ( P_CODEOFFRE ) , 9 , ' ') ;
	SET P_NEWCODE = LPAD ( TRIM ( P_NEWCODE ) , 9 , ' ') ;
	 
	FOR LOOP_ADR AS FREE_LIST CURSOR FOR 
		SELECT KFLTAB V_TABLE , KFLIDO V_OLDCODE , KFLIDC V_NEWCODE FROM KPCOPID 
			WHERE KFLTYP = P_TYPE AND KFLIPB = P_CODEOFFRE AND KFLALX = P_VERSION DO 
		IF ( V_OLDCODE != 0 ) THEN 
			CASE V_TABLE 
				WHEN 'YADRESS' THEN 
					INSERT INTO YADRESS 
					( SELECT V_NEWCODE , ABPLG3 , ABPNUM , ABPEXT , ABPLBN , ABPLG4 , ABPL4F , ABPLG5 , ABPDP6 , ABPCP6 , ABPVI6 , 
					ABPCDX , ABPCEX , ABPL6F , ABPPAY , ABPLOC , ABPMAT , ABPRET , ABPERR , ABPMJU , ABPMJA , ABPMJM , ABPMJJ , ABPVIX 
					FROM YADRESS WHERE ABPCHR = V_OLDCODE ) ; 
			 
				WHEN 'KAJCHR' THEN 
					INSERT INTO KPOBSV 
					( SELECT V_NEWCODE , P_NEWTYPE , P_NEWCODE , P_NEWVERSION , KAJTYPOBS , KAJOBSV 
					FROM KPOBSV WHERE KAJCHR = V_OLDCODE ) ; 
			 
				WHEN 'KADCHR' THEN 
					INSERT INTO KPDESI 
					( SELECT V_NEWCODE , P_NEWTYPE , P_NEWCODE , P_NEWVERSION , KADPERI , KADRSQ , KADOBJ , TRIM ( KADDESI ) 
					FROM KPDESI WHERE KADCHR = V_OLDCODE ) ; 
			 
				WHEN 'KAAKDIID' THEN 
					INSERT INTO KPEXPLCI 
						( KDIID , KDITYP , KDIIPB , KDIALX , KDILCE , KDIDESC , KDIDESI , KDIORI , KDIMODI ) 
					( SELECT V_NEWCODE , P_NEWTYPE , P_NEWCODE , P_NEWVERSION , KDILCE , KDIDESC , KDIDESI , KDIORI , KDIMODI 
					FROM KPEXPLCI WHERE KDIID = V_OLDCODE ) ; 
					CALL SP_CPEXLCI ( P_CODEOFFRE , P_VERSION , P_TYPE , P_NEWVERSION , V_OLDCODE , V_NEWCODE ) ; 
			 
				WHEN 'KDIID' THEN 
					INSERT INTO KPEXPLCI 
						( KDIID , KDITYP , KDIIPB , KDIALX , KDILCE , KDIDESC , KDIDESI , KDIORI , KDIMODI ) 
					( SELECT V_NEWCODE , P_NEWTYPE , P_NEWCODE , P_NEWVERSION , KDILCE , KDIDESC , KDIDESI , KDIORI , KDIMODI 
					FROM KPEXPLCI WHERE KDIID = V_OLDCODE ) ; 
					CALL SP_CPEXLCI ( P_CODEOFFRE , P_VERSION , P_TYPE , P_NEWVERSION , V_OLDCODE , V_NEWCODE ) ; 
			 
				WHEN 'KABKDIID' THEN 
					INSERT INTO KPEXPLCI 
						( KDIID , KDITYP , KDIIPB , KDIALX , KDILCE , KDIDESC , KDIDESI , KDIORI , KDIMODI ) 
					( SELECT V_NEWCODE , P_NEWTYPE , P_NEWCODE , P_NEWVERSION , KDILCE , KDIDESC , KDIDESI , KDIORI , KDIMODI 
					FROM KPEXPLCI WHERE KDIID = V_OLDCODE ) ; 
					CALL SP_CPEXLCI ( P_CODEOFFRE , P_VERSION , P_TYPE , P_NEWVERSION , V_OLDCODE , V_NEWCODE ) ; 
			 
				WHEN 'KAAKDKID' THEN 
					INSERT INTO KPEXPFRH 
						( KDKID , KDKTYP , KDKIPB , KDKALX , KDKFHE , KDKDESC , KDKDESI , KDKORI , KDKMODI ) 
					( SELECT V_NEWCODE , P_NEWTYPE , P_NEWCODE , P_NEWVERSION , KDKFHE , KDKDESC , KDKDESI , KDKORI , KDKMODI 
					FROM KPEXPFRH WHERE KDKID = V_OLDCODE ) ; 
					CALL SP_CPEXFRH ( P_CODEOFFRE , P_VERSION , P_TYPE , P_NEWVERSION , V_OLDCODE , V_NEWCODE ) ; 
			 
				WHEN 'KDKID' THEN 
					INSERT INTO KPEXPFRH 
						( KDKID , KDKTYP , KDKIPB , KDKALX , KDKFHE , KDKDESC , KDKDESI , KDKORI , KDKMODI ) 
					( SELECT V_NEWCODE , P_NEWTYPE , P_NEWCODE , P_NEWVERSION , KDKFHE , KDKDESC , KDKDESI , KDKORI , KDKMODI 
					FROM KPEXPFRH WHERE KDKID = V_OLDCODE ) ; 
					CALL SP_CPEXFRH ( P_CODEOFFRE , P_VERSION , P_TYPE , P_NEWVERSION , V_OLDCODE , V_NEWCODE ) ; 
			 
				WHEN 'KABKDKID' THEN 
					INSERT INTO KPEXPFRH 
						( KDKID , KDKTYP , KDKIPB , KDKALX , KDKFHE , KDKDESC , KDKDESI , KDKORI , KDKMODI ) 
					( SELECT V_NEWCODE , P_NEWTYPE , P_NEWCODE , P_NEWVERSION , KDKFHE , KDKDESC , KDKDESI , KDKORI , KDKMODI 
					FROM KPEXPFRH WHERE KDKID = V_OLDCODE ) ; 
					CALL SP_CPEXFRH ( P_CODEOFFRE , P_VERSION , P_TYPE , P_NEWVERSION , V_OLDCODE , V_NEWCODE ) ; 
			 
				ELSE 
					SET V_EXIT = 1 ; 
			END CASE ; 
		END IF ; 
	 
	END FOR ; 
  
END P1  ; 
  

  

