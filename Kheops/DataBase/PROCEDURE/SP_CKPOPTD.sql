CREATE OR REPLACE PROCEDURE SP_CKPOPTD(
	IN P_CODEOFFRE CHAR(9) , 
	IN P_VERSION INTEGER , 
	IN P_TYPE CHAR(1) , 
	IN P_CODEOPTION INTEGER , 
	IN P_NEWCODEOPTION INTEGER , 
	IN P_NEWVERSION INTEGER , 
	IN P_CODECONTRAT CHAR(9) , 
	IN P_VERSIONCONTRAT INTEGER , 
	IN P_CODEFORMULE INTEGER , 
	IN P_DATESYSTEME VARCHAR(8) , 
	IN P_USER VARCHAR(15) , 
	IN P_TRAITEMENT VARCHAR(1) , 
	IN P_COPYCODEOFFRE CHAR(9) , 
	IN P_COPYVERSION INTEGER , 
	IN P_MODECOPY CHAR(7) ) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	CLOSQLCSR = *ENDMOD , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = ZALBINKHEO , 
	DYNDFTCOL = *YES , 
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC 
  
	DECLARE V_NEWCODEOPTIONDTL INTEGER DEFAULT 0 ; 
	 
	DECLARE V_SELOPTD VARCHAR ( 1 ) DEFAULT 'N' ; 
	DECLARE V_CODEOFFRE VARCHAR ( 9 ) DEFAULT '' ; 
	DECLARE V_TYPEOFFRE VARCHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_VERSOFFRE INTEGER DEFAULT 0 ; 
	DECLARE V_NEWVERS INTEGER DEFAULT 0 ; 
	 
	SET P_CODEOFFRE = LPAD ( TRIM ( P_CODEOFFRE ) , 9 , ' ') ;
	SET P_CODECONTRAT = LPAD ( TRIM ( P_CODECONTRAT ) , 9 , ' ') ;
	SET P_COPYCODEOFFRE = LPAD ( TRIM ( P_COPYCODEOFFRE ) , 9 , ' ') ;


	SET V_CODEOFFRE = P_CODEOFFRE ; 
	SET V_TYPEOFFRE = P_TYPE ; 
	SET V_VERSOFFRE = P_VERSION ; 
	SET V_NEWVERS = P_NEWVERSION ; 
	 
	FOR FORM_LOOP AS FREE_LIST CURSOR FOR 
		SELECT KDCID CODEOPTIONDTL , KDCKAKID GUIDVOLET , KDCTENG TYPEENR FROM KPOPTD 
		WHERE KDCKDBID = P_CODEOPTION 
	DO 
		IF ( P_TRAITEMENT = 'P' ) THEN 
			SET V_SELOPTD = 'O' ; 
			 
			SET V_CODEOFFRE = P_CODECONTRAT ; 
			SET V_TYPEOFFRE = 'P' ; 
			SET V_VERSOFFRE = P_VERSIONCONTRAT ; 
			SET V_NEWVERS = P_VERSIONCONTRAT ; 
		END IF ; 
		 
		IF ( P_TRAITEMENT = 'C' ) THEN 
			SET V_CODEOFFRE = P_COPYCODEOFFRE ; 
			SET V_VERSOFFRE = P_COPYVERSION ; 
			SET V_NEWVERS = P_COPYVERSION ; 
		END IF ; 
		 
		IF ( P_TRAITEMENT = 'V' OR V_SELOPTD = 'O' OR P_TRAITEMENT = 'C' ) THEN 
		 
			CALL SP_SECOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KDCID' , CODEOPTIONDTL , V_NEWCODEOPTIONDTL ) ; 
			IF ( V_NEWCODEOPTIONDTL = 0 ) THEN 
				CALL SP_NCHRONO ( 'KDCID' , V_NEWCODEOPTIONDTL ) ; 
				CALL SP_INCOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KDCID' , CODEOPTIONDTL , V_NEWCODEOPTIONDTL ) ; 
			END IF ; 
			 
			INSERT INTO KPOPTD 
				( KDCID , KDCTYP , KDCIPB , KDCALX , KDCFOR , KDCOPT , KDCKDBID , KDCTENG , 
				KDCKAKID , KDCKAEID , KDCKAQID , KDCMODELE , KDCKARID , KDCCRU , KDCCRD , KDCMAJU , KDCMAJD , KDCFLAG, KDCORDRE ) 
			( SELECT V_NEWCODEOPTIONDTL , V_TYPEOFFRE , V_CODEOFFRE , V_NEWVERS , KDCFOR , KDCOPT , P_NEWCODEOPTION , KDCTENG , 
				KDCKAKID , KDCKAEID , KDCKAQID , KDCMODELE , KDCKARID , P_USER , P_DATESYSTEME , P_USER , P_DATESYSTEME , KDCFLAG, KDCORDRE 
				FROM KPOPTD WHERE KDCID = CODEOPTIONDTL ) ; 
			 
			CALL SP_CGARAN ( P_CODEOFFRE , P_VERSION , P_TYPE , CODEOPTIONDTL , V_NEWCODEOPTIONDTL , 
				P_NEWVERSION , P_CODECONTRAT , P_VERSIONCONTRAT , P_DATESYSTEME , P_USER , P_TRAITEMENT , P_COPYCODEOFFRE , P_COPYVERSION , P_MODECOPY ) ; 
		 
		END IF ; 
		 
	 
	END FOR ; 
  
  
END P1  ; 
  

  

