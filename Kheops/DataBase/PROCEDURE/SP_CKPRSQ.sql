CREATE OR REPLACE PROCEDURE SP_CKPRSQ(
	IN P_CODEOFFRE VARCHAR(9) , 
	IN P_VERSION INTEGER , 
	IN P_TYPE VARCHAR(1) , 
	IN P_CODERSQ INTEGER , 
	IN P_NEWVERSION INTEGER , 
	IN P_CODECONTRAT VARCHAR(9) , 
	IN P_VERSIONCONTRAT INTEGER , 
	IN P_TRAITEMENT VARCHAR(1) , 
	IN P_COPYCODEOFFRE CHAR(9) , 
	IN P_COPYVERSION INTEGER , 
	IN P_MODECOPY CHAR(7) ) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	CLOSQLCSR = *ENDMOD , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = ZALBINKHEO , 
	DYNDFTCOL = *YES , 
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC 
  
	DECLARE V_CIBLE VARCHAR ( 10 ) DEFAULT '' ; 
	DECLARE V_DESCR VARCHAR ( 40 ) DEFAULT '' ; 
	DECLARE V_DESI INTEGER DEFAULT 0 ; 
	DECLARE V_OBSV INTEGER DEFAULT 0 ; 
	DECLARE V_REPORTVAL VARCHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_REPORTOBL VARCHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_LCIVAL NUMERIC ( 13 , 2 ) DEFAULT 0 ; 
	DECLARE V_LCIUNIT CHAR ( 3 ) DEFAULT '' ; 
	DECLARE V_LCIBASE CHAR ( 3 ) DEFAULT '' ; 
	DECLARE V_CPXLCI INTEGER DEFAULT 0 ; 
	DECLARE V_FRHVAL NUMERIC ( 13 , 2 ) DEFAULT 0 ; 
	DECLARE V_FRHUNIT CHAR ( 3 ) DEFAULT '' ; 
	DECLARE V_FRHBASE CHAR ( 3 ) DEFAULT '' ; 
	DECLARE V_CPXFRH INTEGER DEFAULT 0 ; 
	 
	DECLARE V_TRE CHAR ( 5 ) DEFAULT '' ; 
	DECLARE V_NOMEN1 CHAR ( 15 ) DEFAULT '' ; 
	DECLARE V_NOMEN2 CHAR ( 15 ) DEFAULT '' ; 
	DECLARE V_NOMEN3 CHAR ( 15 ) DEFAULT '' ; 
	DECLARE V_NOMEN4 CHAR ( 15 ) DEFAULT '' ; 
	DECLARE V_NOMEN5 CHAR ( 15 ) DEFAULT '' ; 
	 
	DECLARE V_NEWDESI INTEGER DEFAULT 0 ; 
	DECLARE V_NEWOBSV INTEGER DEFAULT 0 ; 
	DECLARE V_NEWCPXLCI INTEGER DEFAULT 0 ; 
	DECLARE V_NEWCPXFRH INTEGER DEFAULT 0 ; 
	 
	DECLARE V_CODEOFFRE VARCHAR ( 9 ) DEFAULT '' ; 
	DECLARE V_TYPEOFFRE VARCHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_VERSOFFRE INTEGER DEFAULT 0 ; 
	DECLARE V_NEWVERS INTEGER DEFAULT 0 ; 
	DECLARE V_CLASSE CHAR ( 2 ) DEFAULT '' ; 
	 
	DECLARE V_MANIFHDEB INTEGER DEFAULT 0 ; 
	DECLARE V_MANIFHFIN INTEGER DEFAULT 0 ; 
	 
	DECLARE V_KABMAND INTEGER DEFAULT 0 ; 
	DECLARE V_KABMANF INTEGER DEFAULT 0 ; 
	 
	DECLARE V_NSIR CHAR ( 14 ) DEFAULT '' ; 
	DECLARE V_SURF DECIMAL ( 11 , 2 ) DEFAULT 0 ; 
	DECLARE V_VMC DECIMAL ( 11 , 2 ) DEFAULT 0 ; 
	DECLARE V_PROL CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_PBI CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_COUTM2 INTEGER DEFAULT 0 ; 
	 
	SET P_CODEOFFRE = LPAD ( TRIM ( P_CODEOFFRE ) , 9 , ' ') ;
	SET P_CODECONTRAT = LPAD ( TRIM ( P_CODECONTRAT ) , 9 , ' ') ;
	SET P_COPYCODEOFFRE = LPAD ( TRIM ( P_COPYCODEOFFRE ) , 9 , ' ') ;
	

	SET V_CODEOFFRE = P_CODEOFFRE ; 
	SET V_TYPEOFFRE = P_TYPE ; 
	SET V_VERSOFFRE = P_VERSION ; 
	SET V_NEWVERS = P_NEWVERSION ; 
	 
	IF ( P_TRAITEMENT = 'P' ) THEN 
		SET V_CODEOFFRE = P_CODECONTRAT ; 
		SET V_TYPEOFFRE = 'P' ; 
		SET V_VERSOFFRE = P_VERSIONCONTRAT ; 
		SET V_NEWVERS = P_VERSIONCONTRAT ; 
	END IF ; 
	 
	IF ( P_TRAITEMENT = 'C' ) THEN 
		SET V_CODEOFFRE = P_COPYCODEOFFRE ; 
		SET V_VERSOFFRE = P_COPYVERSION ; 
		SET V_NEWVERS = P_COPYVERSION ; 
	END IF ; 
	 
	 
	SELECT KABCIBLE , KABDESC , KABDESI , KABOBSV , KABREPVAL , KABREPOBL , 
			KABFRHVALO , KABFRHUNIT , KABFRHBASE , KABKDKID , KABLCIVALO , KABLCIUNIT , KABLCIBASE , KABKDIID , KABTRE , KABNMC01 , KABNMC02 , KABNMC03 , KABNMC04 , KABNMC05 , KABCLASS , KABMANDH , KABMANFH , KABMAND , KABMANF , 
			KABNSIR , KABSURF , KABVMC , KABPROL , KABPBI 
		INTO V_CIBLE , V_DESCR , V_DESI , V_OBSV , V_REPORTVAL , V_REPORTOBL , 
			V_FRHVAL , V_FRHUNIT , V_FRHBASE , V_CPXFRH , V_LCIVAL , V_LCIUNIT , V_LCIBASE , V_CPXLCI , V_TRE , V_NOMEN1 , V_NOMEN2 , V_NOMEN3 , V_NOMEN4 , V_NOMEN5 , V_CLASSE , V_MANIFHDEB , V_MANIFHFIN , V_KABMAND , V_KABMANF , 
			V_NSIR , V_SURF , V_VMC , V_PROL , V_PBI 
		FROM KPRSQ 
		WHERE KABTYP = P_TYPE AND KABIPB = P_CODEOFFRE AND KABALX = P_VERSION AND KABRSQ = P_CODERSQ ; 
	 
	IF ( V_DESI != 0 ) THEN 
		CALL SP_SECOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KADCHR' , V_DESI , V_NEWDESI ) ; 
		IF ( V_NEWDESI = 0 ) THEN 
			CALL SP_NCHRONO ( 'KADCHR' , V_NEWDESI ) ; 
			CALL SP_INCOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KADCHR' , V_DESI , V_NEWDESI ) ; 
		END IF ; 
	END IF ; 
	 
	IF ( V_OBSV != 0 ) THEN 
		CALL SP_SECOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KAJCHR' , V_OBSV , V_NEWOBSV ) ; 
		IF ( V_NEWOBSV = 0 ) THEN 
			CALL SP_NCHRONO ( 'KAJCHR' , V_NEWOBSV ) ; 
			CALL SP_INCOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KAJCHR' , V_OBSV , V_NEWOBSV ) ; 
		END IF ; 
	END IF ; 
	 
	IF ( V_CPXLCI != 0 ) THEN 
		CALL SP_SECOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KDIID' , V_CPXLCI , V_NEWCPXLCI ) ; 
		IF ( V_NEWCPXLCI = 0 ) THEN 
			CALL SP_NCHRONO ( 'KDIID' , V_NEWCPXLCI ) ; 
			CALL SP_INCOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KDIID' , V_CPXLCI , V_NEWCPXLCI ) ; 
		END IF ; 
	END IF ; 
	 
	IF ( V_CPXFRH != 0 ) THEN 
		CALL SP_SECOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KDKID' , V_CPXFRH , V_NEWCPXFRH ) ; 
		IF ( V_NEWCPXFRH = 0 ) THEN 
			CALL SP_NCHRONO ( 'KDKID' , V_NEWCPXFRH ) ; 
			CALL SP_INCOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KDKID' , V_CPXFRH , V_NEWCPXFRH ) ; 
		END IF ; 
	END IF ; 
	 
	 
	IF ( TRIM ( P_MODECOPY ) = 'VERSION' OR TRIM ( P_MODECOPY ) = 'AFFNOUV' ) THEN 
		INSERT INTO KPRSQ 
			( KABTYP , KABIPB , KABALX , KABRSQ , KABCIBLE , KABDESC , KABDESI , KABOBSV , KABREPVAL , KABREPOBL , 
			KABFRHVALO , KABFRHVALA , KABFRHUNIT , KABFRHBASE , KABKDKID , KABLCIVALO , KABLCIVALA , KABLCIUNIT , KABLCIBASE , KABKDIID , 
			KABTRE , KABNMC01 , KABNMC02 , KABNMC03 , KABNMC04 , KABNMC05 , KABCLASS , KABMANDH , KABMANFH , KABMAND , KABMANF , 
			KABNSIR , KABSURF , KABVMC , KABPROL , KABPBI ) 
		VALUES 
			( V_TYPEOFFRE , V_CODEOFFRE , V_NEWVERS , P_CODERSQ , V_CIBLE , V_DESCR , V_NEWDESI , V_NEWOBSV , V_REPORTVAL , V_REPORTOBL , 
			V_FRHVAL , V_FRHVAL , V_FRHUNIT , V_FRHBASE , V_NEWCPXFRH , V_LCIVAL , V_LCIVAL , V_LCIUNIT , V_LCIBASE , V_NEWCPXLCI , 
			V_TRE , V_NOMEN1 , V_NOMEN2 , V_NOMEN3 , V_NOMEN4 , V_NOMEN5 , V_CLASSE , V_MANIFHDEB , V_MANIFHFIN , V_KABMAND , V_KABMANF , 
			V_NSIR , V_SURF , V_VMC , V_PROL , V_PBI ) ; 
	ELSE 
		INSERT INTO KPRSQ 
			( KABTYP , KABIPB , KABALX , KABRSQ , KABCIBLE , KABDESC , KABDESI , KABOBSV , KABREPVAL , KABREPOBL , 
			KABFRHVALO , KABFRHVALA , KABFRHUNIT , KABFRHBASE , KABKDKID , KABLCIVALO , KABLCIVALA , KABLCIUNIT , KABLCIBASE , KABKDIID , 
			KABTRE , KABNMC01 , KABNMC02 , KABNMC03 , KABNMC04 , KABNMC05 , KABCLASS , KABMANDH , KABMANFH ) 
		VALUES 
			( V_TYPEOFFRE , V_CODEOFFRE , V_NEWVERS , P_CODERSQ , V_CIBLE , V_DESCR , V_NEWDESI , V_NEWOBSV , V_REPORTVAL , V_REPORTOBL , 
			V_FRHVAL , V_FRHVAL , V_FRHUNIT , V_FRHBASE , V_NEWCPXFRH , V_LCIVAL , V_LCIVAL , V_LCIUNIT , V_LCIBASE , V_NEWCPXLCI , 
			V_TRE , V_NOMEN1 , V_NOMEN2 , V_NOMEN3 , V_NOMEN4 , V_NOMEN5 , V_CLASSE , 0 , 0 ) ; 
	END IF ; 
	 
	 
	 
END P1  ; 
  

  

