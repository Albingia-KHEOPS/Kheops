CREATE PROCEDURE SP_CONVSIMPLEFOLDERTOSTD ( 
	IN P_CODEOFFRE CHAR(9) , 
	IN P_VERSION INTEGER , 
	IN P_TYPE CHAR(1) , 
	IN P_BRANCHE CHAR(2) , 
	IN P_CIBLE CHAR(10) , 
	IN P_USER CHAR(10) , 
	IN P_DATENOW CHAR(8) , 
	IN P_HOURNOW CHAR(6) , 
	IN P_TYPO CHAR(3) , 
	OUT P_OUTMESSAGE CHAR(100) ) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC SP_CONVSIMPLEFOLDERTOSTD 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	DBGVIEW = *SOURCE , 
	CLOSQLCSR = *ENDMOD , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = ZALBINKHEO , 
	DYNDFTCOL = *YES , 
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC 
  
DECLARE V_NEWFORMID INTEGER DEFAULT 0 ; 
DECLARE V_NEWOPTID INTEGER DEFAULT 0 ; 
DECLARE V_IDCIBLE INTEGER DEFAULT 0 ; 
DECLARE V_CODEPORTEE INTEGER DEFAULT 0 ; 
DECLARE V_CODEGARANTIE INTEGER DEFAULT 0 ; 
DECLARE V_CODEOBJ INTEGER DEFAULT 1 ; 
  
DECLARE V_CODESIMPLEFOL INTEGER DEFAULT 0 ; 
DECLARE V_DESCRSQ CHAR ( 60 ) DEFAULT '' ; 
  
DECLARE V_DESCOBJ1 CHAR ( 60 ) DEFAULT '' ; 
DECLARE V_VALOBJ1 INTEGER DEFAULT 0 ; 
DECLARE V_UNITOBJ1 CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_TYPEOBJ1 CHAR ( 5 ) DEFAULT '' ; 
  
DECLARE V_DESCOBJ2 CHAR ( 60 ) DEFAULT '' ; 
DECLARE V_VALOBJ2 INTEGER DEFAULT 0 ; 
DECLARE V_UNITOBJ2 CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_TYPEOBJ2 CHAR ( 5 ) DEFAULT '' ; 
  
DECLARE V_DESCOBJ3 CHAR ( 60 ) DEFAULT '' ; 
DECLARE V_VALOBJ3 INTEGER DEFAULT 0 ; 
DECLARE V_UNITOBJ3 CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_TYPEOBJ3 CHAR ( 5 ) DEFAULT '' ; 
  
DECLARE V_DESCOBJ4 CHAR ( 60 ) DEFAULT '' ; 
DECLARE V_VALOBJ4 INTEGER DEFAULT 0 ; 
DECLARE V_UNITOBJ4 CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_TYPEOBJ4 CHAR ( 5 ) DEFAULT '' ; 
  
DECLARE V_DESCOBJ5 CHAR ( 60 ) DEFAULT '' ; 
DECLARE V_VALOBJ5 INTEGER DEFAULT 0 ; 
DECLARE V_UNITOBJ5 CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_TYPEOBJ5 CHAR ( 5 ) DEFAULT '' ; 
  
DECLARE V_FORMDESC CHAR ( 60 ) DEFAULT '' ; 
DECLARE V_APPOBJ1 CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_APPOBJ2 CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_APPOBJ3 CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_APPOBJ4 CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_APPOBJ5 CHAR ( 1 ) DEFAULT '' ; 
  
DECLARE V_ANNORGACQUIS CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_ANNOTSACQUIS CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_ANNULASSVAL INTEGER DEFAULT 0 ; 
DECLARE V_ANNULASSUNIT CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_ANNULASSTYPE CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_ANNULFRHVAL INTEGER DEFAULT 0 ; 
DECLARE V_ANNULFRHUNIT CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_ANNULFRHTYPE CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_ANNULPRIVAL INTEGER DEFAULT 0 ; 
DECLARE V_ANNULPRIUNIT CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_ANNULPRITYPE CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_ANNULEXCOBJ1 CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_ANNULEXCOBJ2 CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_ANNULEXCOBJ3 CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_ANNULEXCOBJ4 CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_ANNULEXCOBJ5 CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_INDISPSACQUIS CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_INDISPASSVAL INTEGER DEFAULT 0 ; 
DECLARE V_INDISPASSUNIT CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_INDISPASSTYPE CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_INDISPFRHVAL INTEGER DEFAULT 0 ; 
DECLARE V_INDISPFRHUNIT CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_INDISPFRHTYPE CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_INDISPPRIVAL INTEGER DEFAULT 0 ; 
DECLARE V_INDISPPRIUNIT CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_INDISPPRITYPE CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_INDISPEXCOBJ1 CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_INDISPEXCOBJ2 CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_INDISPEXCOBJ3 CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_INDISPEXCOBJ4 CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_INDISPEXCOBJ5 CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_INTEMPSACQUIS CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_INTEMPASSVAL INTEGER DEFAULT 0 ; 
DECLARE V_INTEMPASSUNIT CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_INTEMPASSTYPE CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_INTEMPFRHVAL INTEGER DEFAULT 0 ; 
DECLARE V_INTEMPFRHUNIT CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_INTEMPFRHTYPE CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_INTEMPPRIVAL INTEGER DEFAULT 0 ; 
DECLARE V_INTEMPPRIUNIT CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_INTEMPPRITYPE CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_INTEMPEXCOBJ1 CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_INTEMPEXCOBJ2 CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_INTEMPEXCOBJ3 CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_INTEMPEXCOBJ4 CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_INTEMPEXCOBJ5 CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_ATTENTSACQUIS CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_ATTENTASSVAL INTEGER DEFAULT 0 ; 
DECLARE V_ATTENTASSUNIT CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_ATTENTASSTYPE CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_ATTENTFRHVAL INTEGER DEFAULT 0 ; 
DECLARE V_ATTENTFRHUNIT CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_ATTENTFRHTYPE CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_ATTENTPRIVAL INTEGER DEFAULT 0 ; 
DECLARE V_ATTENTPRIUNIT CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_ATTENTPRITYPE CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_ATTENTEXCOBJ1 CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_ATTENTEXCOBJ2 CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_ATTENTEXCOBJ3 CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_ATTENTEXCOBJ4 CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_ATTENTEXCOBJ5 CHAR ( 1 ) DEFAULT '' ; 
  
DECLARE V_GUIDV NUMERIC ( 15 , 0 ) DEFAULT 0 ; 
DECLARE V_GUIDB NUMERIC ( 15 , 0 ) DEFAULT 0 ; 
DECLARE V_GUIDM INTEGER DEFAULT 0 ; 
DECLARE V_CODENIV1 NUMERIC ( 10 , 0 ) DEFAULT 0 ; 
DECLARE V_CODENIV2 NUMERIC ( 10 , 0 ) DEFAULT 0 ; 
DECLARE V_CODENIV3 NUMERIC ( 10 , 0 ) DEFAULT 0 ; 
DECLARE V_CODENIV4 NUMERIC ( 10 , 0 ) DEFAULT 0 ; 
DECLARE V_TYPOBLOC CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_GUIDMODELE INTEGER DEFAULT 0 ; 
DECLARE V_GUIDOPTION INTEGER DEFAULT 0 ; 
DECLARE V_GUIDIDBLOC INTEGER DEFAULT 0 ; 
  
DECLARE V_CARAC CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_NATURE CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_PARAMNAT CHAR ( 1 ) DEFAULT '' ; 
  
DECLARE V_SOUSBRANCHE CHAR ( 2 ) DEFAULT '' ; 
DECLARE V_CATEGORIE CHAR ( 5 ) DEFAULT '' ; 
DECLARE V_ERROR VARCHAR ( 5000 ) DEFAULT '' ; 
  
  
SELECT KAISBR , KAICAT INTO V_SOUSBRANCHE , V_CATEGORIE 
FROM KCIBLEF 
WHERE KAICIBLE = P_CIBLE AND KAIBRA = P_BRANCHE ; 
  
SET P_OUTMESSAGE = '' ; 
  
SELECT KGNID , KGNR1DES , 
KGNO11DS , KGNO11VL , KGNO11VU , KGNO11VT , 
KGNO12DS , KGNO12VL , KGNO12VU , KGNO12VT , 
KGNO13DS , KGNO13VL , KGNO13VU , KGNO13VT , 
KGNO14DS , KGNO14VL , KGNO14VU , KGNO14VT , 
KGNO15DS , KGNO15VL , KGNO15VU , KGNO15VT , 
KGNF1DES , KGNF1AO1 , KGNF1AO2 , KGNF1AO3 , KGNF1AO4 , KGNF1AO5 , 
KGNG11OR , 
KGNG11NO , KGNG11VL , KGNG11VU , KGNG11VT , KGNG11FV , KGNG11FU , KGNG11FT , KGNG11PV , KGNG11PU , KGNG11PM , 
KGNG11E1 , KGNG11E2 , KGNG11E3 , KGNG11E4 , KGNG11E5 , 
KGNG12IN , KGNG12VL , KGNG12VU , KGNG12VT , KGNG12FV , KGNG12FU , KGNG12FT , KGNG12PV , KGNG12PU , KGNG12PM , 
KGNG12E1 , KGNG12E2 , KGNG12E3 , KGNG12E4 , KGNG12E5 , 
KGNG13IM , KGNG13VL , KGNG13VU , KGNG13VT , KGNG13FV , KGNG13FU , KGNG13FT , KGNG13PV , KGNG13PU , KGNG13PM , 
KGNG13E1 , KGNG13E2 , KGNG13E3 , KGNG13E4 , KGNG13E5 , 
KGNG14AT , KGNG14VL , KGNG14VU , KGNG14VT , KGNG14FV , KGNG14FU , KGNG14FT , KGNG14PV , KGNG14PU , KGNG14PM , 
KGNG14E1 , KGNG14E2 , KGNG14E3 , KGNG14E4 , KGNG14E5 
INTO V_CODESIMPLEFOL , V_DESCRSQ , 
V_DESCOBJ1 , V_VALOBJ1 , V_UNITOBJ1 , V_TYPEOBJ1 , 
V_DESCOBJ2 , V_VALOBJ2 , V_UNITOBJ2 , V_TYPEOBJ2 , 
V_DESCOBJ3 , V_VALOBJ3 , V_UNITOBJ3 , V_TYPEOBJ3 , 
V_DESCOBJ4 , V_VALOBJ4 , V_UNITOBJ4 , V_TYPEOBJ4 , 
V_DESCOBJ5 , V_VALOBJ5 , V_UNITOBJ5 , V_TYPEOBJ5 , 
V_FORMDESC , V_APPOBJ1 , V_APPOBJ2 , V_APPOBJ3 , V_APPOBJ4 , V_APPOBJ5 , 
V_ANNORGACQUIS , 
V_ANNOTSACQUIS , V_ANNULASSVAL , V_ANNULASSUNIT , V_ANNULASSTYPE , V_ANNULFRHVAL , V_ANNULFRHUNIT , V_ANNULFRHTYPE , V_ANNULPRIVAL , V_ANNULPRIUNIT , V_ANNULPRITYPE , 
V_ANNULEXCOBJ1 , V_ANNULEXCOBJ2 , V_ANNULEXCOBJ3 , V_ANNULEXCOBJ4 , V_ANNULEXCOBJ5 , 
V_INDISPSACQUIS , V_INDISPASSVAL , V_INDISPASSUNIT , V_INDISPASSTYPE , V_INDISPFRHVAL , V_INDISPFRHUNIT , V_INDISPFRHTYPE , V_INDISPPRIVAL , V_INDISPPRIUNIT , V_INDISPPRITYPE , 
V_INDISPEXCOBJ1 , V_INDISPEXCOBJ2 , V_INDISPEXCOBJ3 , V_INDISPEXCOBJ4 , V_INDISPEXCOBJ5 , 
V_INTEMPSACQUIS , V_INTEMPASSVAL , V_INTEMPASSUNIT , V_INTEMPASSTYPE , V_INTEMPFRHVAL , V_INTEMPFRHUNIT , V_INTEMPFRHTYPE , V_INTEMPPRIVAL , V_INTEMPPRIUNIT , V_INTEMPPRITYPE , 
V_INTEMPEXCOBJ1 , V_INTEMPEXCOBJ2 , V_INTEMPEXCOBJ3 , V_INTEMPEXCOBJ4 , V_INTEMPEXCOBJ5 , 
V_ATTENTSACQUIS , V_ATTENTASSVAL , V_ATTENTASSUNIT , V_ATTENTASSTYPE , V_ATTENTFRHVAL , V_ATTENTFRHUNIT , V_ATTENTFRHTYPE , V_ATTENTPRIVAL , V_ATTENTPRIUNIT , V_ATTENTPRITYPE , 
V_ATTENTEXCOBJ1 , V_ATTENTEXCOBJ2 , V_ATTENTEXCOBJ3 , V_ATTENTEXCOBJ4 , V_ATTENTEXCOBJ5 
FROM KPEXL 
WHERE TRIM ( KGNIPB ) = TRIM ( P_CODEOFFRE ) AND KGNALX = P_VERSION AND KGNTYP = P_TYPE AND KGNTYPO = 'OFFRESIMPLIFIE' AND KGNECO = 'O' ; 
  
  
IF ( V_CODESIMPLEFOL > 0 ) THEN 
  
DELETE FROM KPOBJ WHERE KACIPB = P_CODEOFFRE AND KACALX = P_VERSION AND KACTYP = P_TYPE ; 
DELETE FROM KPRSQ WHERE KABIPB = P_CODEOFFRE AND KABALX = P_VERSION AND KABTYP = P_TYPE ; 
DELETE FROM YPRTRSQ WHERE JEIPB = P_CODEOFFRE AND JEALX = P_VERSION ; 
DELETE FROM YPRTOBJ WHERE JGIPB = P_CODEOFFRE AND JGALX = P_VERSION ; 
  
INSERT INTO KPRSQ 
( KABIPB , KABALX , KABTYP , KABRSQ , KABCIBLE , KABDESC ) 
VALUES 
( P_CODEOFFRE , P_VERSION , P_TYPE , 1 , P_CIBLE , V_DESCRSQ ) ; 
  
INSERT INTO YPRTRSQ 
( JEIPB , JEALX , JERSQ , JECCH , JEBRA , JESBR , JECAT ) 
VALUES 
( P_CODEOFFRE , P_VERSION , 1 , 1 , P_BRANCHE , V_SOUSBRANCHE , V_CATEGORIE ) ; 
  
IF ( V_DESCOBJ1 != '' ) THEN 
INSERT INTO KPOBJ 
( KACIPB , KACALX , KACTYP , KACRSQ , KACOBJ , KACCIBLE , KACDESC ) 
VALUES 
( P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , P_CIBLE , V_DESCOBJ1 ) ; 
  
INSERT INTO YPRTOBJ 
( JGIPB , JGALX , JGRSQ , JGOBJ , JGCCH , JGBRA , JGVAL , JGVAA , JGVAU , JGVAT , JGSBR , JGCAT ) 
VALUES 
( P_CODEOFFRE , P_VERSION , 1 , V_CODEOBJ , V_CODEOBJ , P_BRANCHE , V_VALOBJ1 , V_VALOBJ1 , V_UNITOBJ1 , V_TYPEOBJ1 , V_SOUSBRANCHE , V_CATEGORIE ) ; 
  
SET V_CODEOBJ = V_CODEOBJ + 1 ; 
END IF ; 
  
IF ( V_DESCOBJ2 != '' ) THEN 
INSERT INTO KPOBJ 
( KACIPB , KACALX , KACTYP , KACRSQ , KACOBJ , KACCIBLE , KACDESC ) 
VALUES 
( P_CODEOFFRE , P_VERSION , P_TYPE , 1 , V_CODEOBJ , P_CIBLE , V_DESCOBJ2 ) ; 
  
INSERT INTO YPRTOBJ 
( JGIPB , JGALX , JGRSQ , JGOBJ , JGCCH , JGBRA , JGVAL , JGVAA , JGVAU , JGVAT , JGSBR , JGCAT ) 
VALUES 
( P_CODEOFFRE , P_VERSION , 1 , V_CODEOBJ , V_CODEOBJ , P_BRANCHE , V_VALOBJ2 , V_VALOBJ2 , V_UNITOBJ2 , V_TYPEOBJ2 , V_SOUSBRANCHE , V_CATEGORIE ) ; 
  
SET V_CODEOBJ = V_CODEOBJ + 1 ; 
END IF ; 
  
IF ( V_DESCOBJ3 != '' ) THEN 
INSERT INTO KPOBJ 
( KACIPB , KACALX , KACTYP , KACRSQ , KACOBJ , KACCIBLE , KACDESC ) 
VALUES 
( P_CODEOFFRE , P_VERSION , P_TYPE , 1 , V_CODEOBJ , P_CIBLE , V_DESCOBJ3 ) ; 
  
INSERT INTO YPRTOBJ 
( JGIPB , JGALX , JGRSQ , JGOBJ , JGCCH , JGBRA , JGVAL , JGVAA , JGVAU , JGVAT , JGSBR , JGCAT ) 
VALUES 
( P_CODEOFFRE , P_VERSION , 1 , V_CODEOBJ , V_CODEOBJ , P_BRANCHE , V_VALOBJ3 , V_VALOBJ3 , V_UNITOBJ3 , V_TYPEOBJ3 , V_SOUSBRANCHE , V_CATEGORIE ) ; 
  
SET V_CODEOBJ = V_CODEOBJ + 1 ; 
END IF ; 
  
IF ( V_DESCOBJ4 != '' ) THEN 
INSERT INTO KPOBJ 
( KACIPB , KACALX , KACTYP , KACRSQ , KACOBJ , KACCIBLE , KACDESC ) 
VALUES 
( P_CODEOFFRE , P_VERSION , P_TYPE , 1 , V_CODEOBJ , P_CIBLE , V_DESCOBJ4 ) ; 
  
INSERT INTO YPRTOBJ 
( JGIPB , JGALX , JGRSQ , JGOBJ , JGCCH , JGBRA , JGVAL , JGVAA , JGVAU , JGVAT , JGSBR , JGCAT ) 
VALUES 
( P_CODEOFFRE , P_VERSION , 1 , V_CODEOBJ , V_CODEOBJ , P_BRANCHE , V_VALOBJ4 , V_VALOBJ4 , V_UNITOBJ4 , V_TYPEOBJ4 , V_SOUSBRANCHE , V_CATEGORIE ) ; 
  
SET V_CODEOBJ = V_CODEOBJ + 1 ; 
END IF ; 
  
IF ( V_DESCOBJ5 != '' ) THEN 
INSERT INTO KPOBJ 
( KACIPB , KACALX , KACTYP , KACRSQ , KACOBJ , KACCIBLE , KACDESC ) 
VALUES 
( P_CODEOFFRE , P_VERSION , P_TYPE , 1 , V_CODEOBJ , P_CIBLE , V_DESCOBJ5 ) ; 
  
INSERT INTO YPRTOBJ 
( JGIPB , JGALX , JGRSQ , JGOBJ , JGCCH , JGBRA , JGVAL , JGVAA , JGVAU , JGVAT , JGSBR , JGCAT ) 
VALUES 
( P_CODEOFFRE , P_VERSION , 1 , V_CODEOBJ , V_CODEOBJ , P_BRANCHE , V_VALOBJ5 , V_VALOBJ5 , V_UNITOBJ5 , V_TYPEOBJ5 , V_SOUSBRANCHE , V_CATEGORIE ) ; 
  
SET V_CODEOBJ = V_CODEOBJ + 1 ; 
END IF ; 
  
IF ( V_FORMDESC != '' ) THEN 
SELECT KAIID INTO V_IDCIBLE FROM KCIBLEF WHERE KAICIBLE = P_CIBLE AND KAIBRA = P_BRANCHE ; 
  
CALL SP_NCHRONO ( 'KDAID' , V_NEWFORMID ) ; 
  
INSERT INTO KPFOR 
( KDAID , KDATYP , KDAIPB , KDAALX , KDAFOR , KDACCH , KDAALPHA , KDABRA , KDACIBLE , KDAKAIID , KDADESC , KDACRU , KDACRD , KDAMAJU , KDAMAJD , KDAFGEN ) 
VALUES 
( V_NEWFORMID , P_TYPE , P_CODEOFFRE , P_VERSION , 1 , 1 , 'A' , P_BRANCHE , P_CIBLE , V_IDCIBLE , V_FORMDESC , P_USER , P_DATENOW , P_USER , P_DATENOW , '' ) ; 
  
CALL SP_NCHRONO ( 'KDBID' , V_NEWOPTID ) ; 
  
INSERT INTO KPOPT 
( KDBID , KDBTYP , KDBIPB , KDBALX , KDBFOR , KDBKDAID , KDBOPT , KDBDESC , KDBFORR , KDBKDAIDR , KDBSPEID , KDBCRU , KDBCRD , KDBCRH , KDBMAJU , KDBMAJD , KDBMAJH ) 
VALUES 
( V_NEWOPTID , P_TYPE , P_CODEOFFRE , P_VERSION , 1 , V_NEWFORMID , 1 , '' , 0 , 0 , 0 , P_USER , P_DATENOW , P_HOURNOW , P_USER , P_DATENOW , P_HOURNOW ) ; 
  
IF ( V_APPOBJ1 = 'O' AND V_APPOBJ2 = 'O' AND V_APPOBJ3 = 'O' AND V_APPOBJ4 = 'O' AND V_APPOBJ5 = 'O' ) THEN 
CALL SP_INSERTAPPSIMPLEFOLDER ( P_CODEOFFRE , P_VERSION , P_TYPE , V_NEWOPTID , 'RQ' , 1 , 0 , P_USER , P_DATENOW ) ; 
ELSE 
IF ( V_APPOBJ1 = 'O' ) THEN 
CALL SP_INSERTAPPSIMPLEFOLDER ( P_CODEOFFRE , P_VERSION , P_TYPE , V_NEWOPTID , 'OB' , 1 , 1 , P_USER , P_DATENOW ) ; 
END IF ; 
IF ( V_APPOBJ2 = 'O' ) THEN 
CALL SP_INSERTAPPSIMPLEFOLDER ( P_CODEOFFRE , P_VERSION , P_TYPE , V_NEWOPTID , 'OB' , 1 , 2 , P_USER , P_DATENOW ) ; 
END IF ; 
IF ( V_APPOBJ3 = 'O' ) THEN 
CALL SP_INSERTAPPSIMPLEFOLDER ( P_CODEOFFRE , P_VERSION , P_TYPE , V_NEWOPTID , 'OB' , 1 , 3 , P_USER , P_DATENOW ) ; 
END IF ; 
IF ( V_APPOBJ4 = 'O' ) THEN 
CALL SP_INSERTAPPSIMPLEFOLDER ( P_CODEOFFRE , P_VERSION , P_TYPE , V_NEWOPTID , 'OB' , 1 , 4 , P_USER , P_DATENOW ) ; 
END IF ; 
IF ( V_APPOBJ5 = 'O' ) THEN 
CALL SP_INSERTAPPSIMPLEFOLDER ( P_CODEOFFRE , P_VERSION , P_TYPE , V_NEWOPTID , 'OB' , 1 , 5 , P_USER , P_DATENOW ) ; 
END IF ; 
END IF ; 
  
FOR LOOP_MODELE AS FREE_LIST CURSOR FOR 
SELECT KAPID GUIDV , KAKVOLET CODEVOLET , KAKDESC DESCRVOLET , KAPCAR CARACVOLET , KAKID GUIDVOLET , 
KAQID GUIDB , KAEBLOC CODEBLOC , KAEDESC DESCRBLOC , KAQCAR CARACBLOC , KAEID GUIDBLOC , KAKFGEN FORMGEN 
FROM KVOLET 
INNER JOIN KCATVOLET ON KAKVOLET = KAPVOLET AND KAPKAIID = V_IDCIBLE 
  
LEFT JOIN KCATBLOC ON KAQKAPID = KAPID 
LEFT JOIN KBLOC ON KAEBLOC = KAQBLOC 
ORDER BY GUIDV , GUIDB 
DO 
CALL SP_GETTYPO ( P_CODEOFFRE , P_VERSION , P_TYPE , GUIDB , P_DATENOW , V_TYPOBLOC ) ; 
  
SET V_GUIDMODELE = 0 ; 
  
SELECT KARID INTO V_GUIDMODELE 
FROM KCATMODELE 
INNER JOIN KCATBLOC ON KARKAQID = KAQID AND KAQID = GUIDB 
INNER JOIN KCATVOLET ON KAQKAPID = KAPID AND KAPKAIID = V_IDCIBLE AND KAPID = GUIDV 
WHERE KARTYPO = V_TYPOBLOC AND KARDATEAPP <= P_DATENOW 
ORDER BY KARDATEAPP DESC 
FETCH FIRST 1 ROW ONLY ; 
  
IF ( V_GUIDMODELE > 0 ) THEN 
FOR LOOP_GAR AS FREE_LIST CURSOR FOR 
SELECT NIV1 . KARID GUIDM , 
GAR1 . C2SEQ CODENIV1 , GAR1 . C2GAR CODEGARNIV1 , GARAN1 . GADES DESCRNIV1 , GAR1 . C2CAR CARACNIV1 , GAR1 . C2NAT NATURENIV1 , GAR1 . C2SEM CODEPARENTNIV1 , GAR1 . C2SE1 CODENIV1NIV1 , GAR1 . C2NIV NIVEAUNIV1 , GAR1 . C2TRI TRINIV1 , IFNULL ( GARAN1 . GADFG , '' ) DEFGARANTIENIV1 , GAR1 . C2CNA CATNATNIV1 , GAR1 . C2INA INDEXEENIV1 , GAR1 . C2TAX CODETAXENIV1 , GAL1 . C4VAL ASSIETTEVALEURNIV1 , GAL1 . C4UNT ASSIETTEUNITENIV1 , GAL1 . C4BAS ASSIETTEBASENIV1 , GAL1 . C4MAJ ASSIETTEMODIFIABLENIV1 , GAR1 . C2TCD TYPECONTROLEDATENIV1 , GAR1 . C2MRF MONTANTREFNIV1 , GAL1 . C4OBL ASSOBLIGATOIRENIV1 , GAR1 . C2NTM PARAMNATMODNIV1 , GAL1 . C4ALA MODEALIMNIV1 , IFNULL ( GARAN1 . GAINV , '' ) INVENPOSSIBLE1 , 
GAR2 . C2SEQ CODENIV2 , GAR2 . C2GAR CODEGARNIV2 , GARAN2 . GADES DESCRNIV2 , GAR2 . C2CAR CARACNIV2 , GAR2 . C2NAT NATURENIV2 , GAR2 . C2SEM CODEPARENTNIV2 , GAR2 . C2SE1 CODENIV1NIV2 , GAR2 . C2NIV NIVEAUNIV2 , GAR2 . C2TRI TRINIV2 , IFNULL ( GARAN2 . GADFG , '' ) DEFGARANTIENIV2 , GAR2 . C2CNA CATNATNIV2 , GAR2 . C2INA INDEXEENIV2 , GAR2 . C2TAX CODETAXENIV2 , GAL2 . C4VAL ASSIETTEVALEURNIV2 , GAL2 . C4UNT ASSIETTEUNITENIV2 , GAL2 . C4BAS ASSIETTEBASENIV2 , GAL2 . C4MAJ ASSIETTEMODIFIABLENIV2 , GAR2 . C2TCD TYPECONTROLEDATENIV2 , GAR2 . C2MRF MONTANTREFNIV2 , GAL2 . C4OBL ASSOBLIGATOIRENIV2 , GAR2 . C2NTM PARAMNATMODNIV2 , GAL2 . C4ALA MODEALIMNIV2 , IFNULL ( GARAN2 . GAINV , '' ) INVENPOSSIBLE2 , 
GAR3 . C2SEQ CODENIV3 , GAR3 . C2GAR CODEGARNIV3 , GARAN3 . GADES DESCRNIV3 , GAR3 . C2CAR CARACNIV3 , GAR3 . C2NAT NATURENIV3 , GAR3 . C2SEM CODEPARENTNIV3 , GAR3 . C2SE1 CODENIV1NIV3 , GAR3 . C2NIV NIVEAUNIV3 , GAR3 . C2TRI TRINIV3 , IFNULL ( GARAN3 . GADFG , '' ) DEFGARANTIENIV3 , GAR3 . C2CNA CATNATNIV3 , GAR3 . C2INA INDEXEENIV3 , GAR3 . C2TAX CODETAXENIV3 , GAL3 . C4VAL ASSIETTEVALEURNIV3 , GAL3 . C4UNT ASSIETTEUNITENIV3 , GAL3 . C4BAS ASSIETTEBASENIV3 , GAL3 . C4MAJ ASSIETTEMODIFIABLENIV3 , GAR3 . C2TCD TYPECONTROLEDATENIV3 , GAR3 . C2MRF MONTANTREFNIV3 , GAL3 . C4OBL ASSOBLIGATOIRENIV3 , GAR3 . C2NTM PARAMNATMODNIV3 , GAL3 . C4ALA MODEALIMNIV3 , IFNULL ( GARAN3 . GAINV , '' ) INVENPOSSIBLE3 , 
GAR4 . C2SEQ CODENIV4 , GAR4 . C2GAR CODEGARNIV4 , GARAN4 . GADES DESCRNIV4 , GAR4 . C2CAR CARACNIV4 , GAR4 . C2NAT NATURENIV4 , GAR4 . C2SEM CODEPARENTNIV4 , GAR4 . C2SE1 CODENIV1NIV4 , GAR4 . C2NIV NIVEAUNIV4 , GAR4 . C2TRI TRINIV4 , IFNULL ( GARAN4 . GADFG , '' ) DEFGARANTIENIV4 , GAR4 . C2CNA CATNATNIV4 , GAR4 . C2INA INDEXEENIV4 , GAR4 . C2TAX CODETAXENIV4 , GAL4 . C4VAL ASSIETTEVALEURNIV4 , GAL4 . C4UNT ASSIETTEUNITENIV4 , GAL4 . C4BAS ASSIETTEBASENIV4 , GAL4 . C4MAJ ASSIETTEMODIFIABLENIV4 , GAR4 . C2TCD TYPECONTROLEDATENIV4 , GAR4 . C2MRF MONTANTREFNIV4 , GAL4 . C4OBL ASSOBLIGATOIRENIV4 , GAR4 . C2NTM PARAMNATMODNIV4 , GAL4 . C4ALA MODEALIMNIV4 , IFNULL ( GARAN4 . GAINV , '' ) INVENPOSSIBLE4 
  
FROM KCATMODELE NIV1 
LEFT JOIN ZALBINKMOD . YPLTGAR GAR1 ON NIV1 . KARMODELE = GAR1 . C2MGA AND GAR1 . C2CAR IN ( 'A' , 'F' , 'B' , 'O' , 'P' , 'S' ) AND GAR1 . C2NIV = 1 AND GAR1 . C2SEM = 0 
LEFT JOIN KGARAN GARAN1 ON GAR1 . C2GAR = GARAN1 . GAGAR 
LEFT JOIN ZALBINKMOD . YPLTGAL GAL1 ON GAR1 . C2SEQ = GAL1 . C4SEQ AND GAL1 . C4TYP = 0 
  
LEFT JOIN KCATMODELE NIV2 ON NIV2 . KARID = NIV1 . KARID 
LEFT JOIN ZALBINKMOD . YPLTGAR GAR2 ON NIV2 . KARMODELE = GAR2 . C2MGA AND GAR2 . C2CAR IN ( 'A' , 'F' , 'B' , 'O' , 'P' , 'S' ) AND GAR2 . C2NIV = 2 AND GAR2 . C2SEM = GAR1 . C2SEQ 
LEFT JOIN KGARAN GARAN2 ON GAR2 . C2GAR = GARAN2 . GAGAR 
LEFT JOIN ZALBINKMOD . YPLTGAL GAL2 ON GAR2 . C2SEQ = GAL2 . C4SEQ AND GAL2 . C4TYP = 0 
  
LEFT JOIN KCATMODELE NIV3 ON NIV3 . KARID = NIV2 . KARID 
LEFT JOIN ZALBINKMOD . YPLTGAR GAR3 ON NIV3 . KARMODELE = GAR3 . C2MGA AND GAR3 . C2CAR IN ( 'A' , 'F' , 'B' , 'O' , 'P' , 'S' ) AND GAR3 . C2NIV = 3 AND GAR3 . C2SEM = GAR2 . C2SEQ 
LEFT JOIN KGARAN GARAN3 ON GAR3 . C2GAR = GARAN3 . GAGAR 
LEFT JOIN ZALBINKMOD . YPLTGAL GAL3 ON GAR3 . C2SEQ = GAL3 . C4SEQ AND GAL3 . C4TYP = 0 
  
LEFT JOIN KCATMODELE NIV4 ON NIV4 . KARID = NIV3 . KARID 
LEFT JOIN ZALBINKMOD . YPLTGAR GAR4 ON NIV4 . KARMODELE = GAR4 . C2MGA AND GAR4 . C2CAR IN ( 'A' , 'F' , 'B' , 'O' , 'P' , 'S' ) AND GAR4 . C2NIV = 4 AND GAR4 . C2SEM = GAR3 . C2SEQ 
LEFT JOIN KGARAN GARAN4 ON GAR4 . C2GAR = GARAN4 . GAGAR 
LEFT JOIN ZALBINKMOD . YPLTGAL GAL4 ON GAR4 . C2SEQ = GAL4 . C4SEQ AND GAL4 . C4TYP = 0 
  
WHERE NIV1 . KARKAQID = GUIDB AND NIV1 . KARID = V_GUIDMODELE 
ORDER BY CODENIV1 , CODENIV2 , CODENIV3 , CODENIV4 
DO 
  
IF ( V_GUIDV <> GUIDV ) THEN 
SET V_GUIDV = GUIDV ; 
SET V_GUIDB = GUIDB ; 
SET V_GUIDM = GUIDM ; 
SET V_CODENIV1 = CODENIV1 ; 
SET V_CODENIV2 = CODENIV2 ; 
SET V_CODENIV3 = CODENIV3 ; 
SET V_CODENIV4 = CODENIV4 ; 
  
IF ( V_GUIDV != '' ) THEN 
CALL SP_INSVOL ( P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'A' , P_BRANCHE , V_FORMDESC , P_USER , P_DATENOW , V_GUIDOPTION , CARACVOLET , GUIDVOLET ) ; 
END IF ; 
  
--IF ( V_GUIDB != '' ) THEN 
--CALL SP_INSBLOC ( P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'A' , P_BRANCHE , V_FORMDESC , P_USER , P_DATENOW , V_GUIDOPTION , GUIDVOLET , CARACBLOC , GUIDBLOC , GUIDB , V_GUIDIDBLOC ) ; 
--END IF ; 
--IF ( V_CODENIV1 != '' ) THEN 
--CALL SP_INSNIV ( P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'A' , P_BRANCHE , V_FORMDESC , P_USER , P_DATENOW , V_GUIDIDBLOC , CODENIV1 , CODEGARNIV1 , DESCRNIV1 , CARACNIV1 , NATURENIV1 , CODEPARENTNIV1 , CODENIV1NIV1 , NIVEAUNIV1 , TRINIV1 , DEFGARANTIENIV1 , CATNATNIV1 , INDEXEENIV1 , CODETAXENIV1 , ASSIETTEVALEURNIV1 , ASSIETTEUNITENIV1 , ASSIETTEBASENIV1 , ASSIETTEMODIFIABLENIV1 , TYPECONTROLEDATENIV1 , MONTANTREFNIV1 , ASSOBLIGATOIRENIV1 , PARAMNATMODNIV1 , MODEALIMNIV1 , IN
  -- 
-- 
-- 
--VENPOSSIBLE1 ) ; 
--END IF ; 
--IF ( V_CODENIV2 != '' ) THEN 
--CALL SP_INSNIV ( P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'A' , P_BRANCHE , V_FORMDESC , P_USER , P_DATENOW , V_GUIDIDBLOC , CODENIV2 , CODEGARNIV2 , DESCRNIV2 , CARACNIV2 , NATURENIV2 , CODEPARENTNIV2 , CODENIV1NIV2 , NIVEAUNIV2 , TRINIV2 , DEFGARANTIENIV2 , CATNATNIV2 , INDEXEENIV2 , CODETAXENIV2 , ASSIETTEVALEURNIV2 , ASSIETTEUNITENIV2 , ASSIETTEBASENIV2 , ASSIETTEMODIFIABLENIV2 , TYPECONTROLEDATENIV2 , MONTANTREFNIV2 , ASSOBLIGATOIRENIV2 , PARAMNATMODNIV2 , MODEALIMNIV2 , IN
  -- 
-- 
-- 
--VENPOSSIBLE2 ) ; 
--END IF ; 
--IF ( V_CODENIV3 != '' ) THEN 
--CALL SP_INSNIV ( P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'A' , P_BRANCHE , V_FORMDESC , P_USER , P_DATENOW , V_GUIDIDBLOC , CODENIV3 , CODEGARNIV3 , DESCRNIV3 , CARACNIV3 , NATURENIV3 , CODEPARENTNIV3 , CODENIV1NIV3 , NIVEAUNIV3 , TRINIV3 , DEFGARANTIENIV3 , CATNATNIV3 , INDEXEENIV3 , CODETAXENIV3 , ASSIETTEVALEURNIV3 , ASSIETTEUNITENIV3 , ASSIETTEBASENIV3 , ASSIETTEMODIFIABLENIV3 , TYPECONTROLEDATENIV3 , MONTANTREFNIV3 , ASSOBLIGATOIRENIV3 , PARAMNATMODNIV3 , MODEALIMNIV3 , IN
  -- 
-- 
-- 
--VENPOSSIBLE3 ) ; 
--END IF ; 
--IF ( V_CODENIV4 != '' ) THEN 
--CALL SP_INSNIV ( P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'A' , P_BRANCHE , V_FORMDESC , P_USER , P_DATENOW , V_GUIDIDBLOC , CODENIV4 , CODEGARNIV4 , DESCRNIV4 , CARACNIV4 , NATURENIV4 , CODEPARENTNIV4 , CODENIV1NIV4 , NIVEAUNIV4 , TRINIV4 , DEFGARANTIENIV4 , CATNATNIV4 , INDEXEENIV4 , CODETAXENIV4 , ASSIETTEVALEURNIV4 , ASSIETTEUNITENIV4 , ASSIETTEBASENIV4 , ASSIETTEMODIFIABLENIV4 , TYPECONTROLEDATENIV4 , MONTANTREFNIV4 , ASSOBLIGATOIRENIV4 , PARAMNATMODNIV4 , MODEALIMNIV4 , IN
  -- 
-- 
-- 
--VENPOSSIBLE4 ) ; 
--END IF ; 
ELSE 
IF ( V_GUIDB <> GUIDB ) THEN 
  
SET V_GUIDB = GUIDB ; 
SET V_GUIDM = GUIDM ; 
SET V_CODENIV1 = CODENIV1 ; 
SET V_CODENIV2 = CODENIV2 ; 
SET V_CODENIV3 = CODENIV3 ; 
SET V_CODENIV4 = CODENIV4 ; 
  
--IF ( V_GUIDB != '' ) THEN 
--CALL SP_INSBLOC ( P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'A' , P_BRANCHE , V_FORMDESC , P_USER , P_DATENOW , V_GUIDOPTION , GUIDVOLET , CARACBLOC , GUIDBLOC , GUIDB , V_GUIDIDBLOC ) ; 
--END IF ; 
--IF ( V_CODENIV1 != '' ) THEN 
--CALL SP_INSNIV ( P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'A' , P_BRANCHE , V_FORMDESC , P_USER , P_DATENOW , V_GUIDIDBLOC , CODENIV1 , CODEGARNIV1 , DESCRNIV1 , CARACNIV1 , NATURENIV1 , CODEPARENTNIV1 , CODENIV1NIV1 , NIVEAUNIV1 , TRINIV1 , DEFGARANTIENIV1 , CATNATNIV1 , INDEXEENIV1 , CODETAXENIV1 , ASSIETTEVALEURNIV1 , ASSIETTEUNITENIV1 , ASSIETTEBASENIV1 , ASSIETTEMODIFIABLENIV1 , TYPECONTROLEDATENIV1 , MONTANTREFNIV1 , ASSOBLIGATOIRENIV1 , PARAMNATMODNIV1 , MODEALIMNIV1 , IN
  -- 
-- 
-- 
--VENPOSSIBLE1 ) ; 
--END IF ; 
--IF ( V_CODENIV2 != '' ) THEN 
--CALL SP_INSNIV ( P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'A' , P_BRANCHE , V_FORMDESC , P_USER , P_DATENOW , V_GUIDIDBLOC , CODENIV2 , CODEGARNIV2 , DESCRNIV2 , CARACNIV2 , NATURENIV2 , CODEPARENTNIV2 , CODENIV1NIV2 , NIVEAUNIV2 , TRINIV2 , DEFGARANTIENIV2 , CATNATNIV2 , INDEXEENIV2 , CODETAXENIV2 , ASSIETTEVALEURNIV2 , ASSIETTEUNITENIV2 , ASSIETTEBASENIV2 , ASSIETTEMODIFIABLENIV2 , TYPECONTROLEDATENIV2 , MONTANTREFNIV2 , ASSOBLIGATOIRENIV2 , PARAMNATMODNIV2 , MODEALIMNIV2 , IN
  -- 
-- 
-- 
--VENPOSSIBLE2 ) ; 
--END IF ; 
--IF ( V_CODENIV3 != '' ) THEN 
--CALL SP_INSNIV ( P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'A' , P_BRANCHE , V_FORMDESC , P_USER , P_DATENOW , V_GUIDIDBLOC , CODENIV3 , CODEGARNIV3 , DESCRNIV3 , CARACNIV3 , NATURENIV3 , CODEPARENTNIV3 , CODENIV1NIV3 , NIVEAUNIV3 , TRINIV3 , DEFGARANTIENIV3 , CATNATNIV3 , INDEXEENIV3 , CODETAXENIV3 , ASSIETTEVALEURNIV3 , ASSIETTEUNITENIV3 , ASSIETTEBASENIV3 , ASSIETTEMODIFIABLENIV3 , TYPECONTROLEDATENIV3 , MONTANTREFNIV3 , ASSOBLIGATOIRENIV3 , PARAMNATMODNIV3 , MODEALIMNIV3 , IN
  -- 
-- 
-- 
--VENPOSSIBLE3 ) ; 
--END IF ; 
--IF ( V_CODENIV4 != '' ) THEN 
--CALL SP_INSNIV ( P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'A' , P_BRANCHE , V_FORMDESC , P_USER , P_DATENOW , V_GUIDIDBLOC , CODENIV4 , CODEGARNIV4 , DESCRNIV4 , CARACNIV4 , NATURENIV4 , CODEPARENTNIV4 , CODENIV1NIV4 , NIVEAUNIV4 , TRINIV4 , DEFGARANTIENIV4 , CATNATNIV4 , INDEXEENIV4 , CODETAXENIV4 , ASSIETTEVALEURNIV4 , ASSIETTEUNITENIV4 , ASSIETTEBASENIV4 , ASSIETTEMODIFIABLENIV4 , TYPECONTROLEDATENIV4 , MONTANTREFNIV4 , ASSOBLIGATOIRENIV4 , PARAMNATMODNIV4 , MODEALIMNIV4 , IN
  -- 
-- 
-- 
--VENPOSSIBLE4 ) ; 
--END IF ; 
ELSE 
IF ( V_GUIDM <> GUIDM ) THEN 
SET V_GUIDM = GUIDM ; 
SET V_CODENIV1 = CODENIV1 ; 
SET V_CODENIV2 = CODENIV2 ; 
SET V_CODENIV3 = CODENIV3 ; 
SET V_CODENIV4 = CODENIV4 ; 
  
--IF ( V_CODENIV1 != '' ) THEN 
--CALL SP_INSNIV ( P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'A' , P_BRANCHE , V_FORMDESC , P_USER , P_DATENOW , V_GUIDIDBLOC , CODENIV1 , CODEGARNIV1 , DESCRNIV1 , CARACNIV1 , NATURENIV1 , CODEPARENTNIV1 , CODENIV1NIV1 , NIVEAUNIV1 , TRINIV1 , DEFGARANTIENIV1 , CATNATNIV1 , INDEXEENIV1 , CODETAXENIV1 , ASSIETTEVALEURNIV1 , ASSIETTEUNITENIV1 , ASSIETTEBASENIV1 , ASSIETTEMODIFIABLENIV1 , TYPECONTROLEDATENIV1 , MONTANTREFNIV1 , ASSOBLIGATOIRENIV1 , PARAMNATMODNIV1 , MODEALIMNIV1 , IN
  -- 
-- 
-- 
--VENPOSSIBLE1 ) ; 
--END IF ; 
--IF ( V_CODENIV2 != '' ) THEN 
--CALL SP_INSNIV ( P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'A' , P_BRANCHE , V_FORMDESC , P_USER , P_DATENOW , V_GUIDIDBLOC , CODENIV2 , CODEGARNIV2 , DESCRNIV2 , CARACNIV2 , NATURENIV2 , CODEPARENTNIV2 , CODENIV1NIV2 , NIVEAUNIV2 , TRINIV2 , DEFGARANTIENIV2 , CATNATNIV2 , INDEXEENIV2 , CODETAXENIV2 , ASSIETTEVALEURNIV2 , ASSIETTEUNITENIV2 , ASSIETTEBASENIV2 , ASSIETTEMODIFIABLENIV2 , TYPECONTROLEDATENIV2 , MONTANTREFNIV2 , ASSOBLIGATOIRENIV2 , PARAMNATMODNIV2 , MODEALIMNIV2 , IN
  -- 
-- 
-- 
--VENPOSSIBLE2 ) ; 
--END IF ; 
--IF ( V_CODENIV3 != '' ) THEN 
--CALL SP_INSNIV ( P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'A' , P_BRANCHE , V_FORMDESC , P_USER , P_DATENOW , V_GUIDIDBLOC , CODENIV3 , CODEGARNIV3 , DESCRNIV3 , CARACNIV3 , NATURENIV3 , CODEPARENTNIV3 , CODENIV1NIV3 , NIVEAUNIV3 , TRINIV3 , DEFGARANTIENIV3 , CATNATNIV3 , INDEXEENIV3 , CODETAXENIV3 , ASSIETTEVALEURNIV3 , ASSIETTEUNITENIV3 , ASSIETTEBASENIV3 , ASSIETTEMODIFIABLENIV3 , TYPECONTROLEDATENIV3 , MONTANTREFNIV3 , ASSOBLIGATOIRENIV3 , PARAMNATMODNIV3 , MODEALIMNIV3 , IN
  -- 
-- 
-- 
--VENPOSSIBLE3 ) ; 
--END IF ; 
--IF ( V_CODENIV4 != '' ) THEN 
--CALL SP_INSNIV ( P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'A' , P_BRANCHE , V_FORMDESC , P_USER , P_DATENOW , V_GUIDIDBLOC , CODENIV4 , CODEGARNIV4 , DESCRNIV4 , CARACNIV4 , NATURENIV4 , CODEPARENTNIV4 , CODENIV1NIV4 , NIVEAUNIV4 , TRINIV4 , DEFGARANTIENIV4 , CATNATNIV4 , INDEXEENIV4 , CODETAXENIV4 , ASSIETTEVALEURNIV4 , ASSIETTEUNITENIV4 , ASSIETTEBASENIV4 , ASSIETTEMODIFIABLENIV4 , TYPECONTROLEDATENIV4 , MONTANTREFNIV4 , ASSOBLIGATOIRENIV4 , PARAMNATMODNIV4 , MODEALIMNIV4 , IN
  -- 
-- 
-- 
--VENPOSSIBLE4 ) ; 
--END IF ; 
ELSE 
IF ( V_CODENIV1 <> CODENIV1 ) THEN 
SET V_CODENIV1 = CODENIV1 ; 
SET V_CODENIV2 = CODENIV2 ; 
SET V_CODENIV3 = CODENIV3 ; 
SET V_CODENIV4 = CODENIV4 ; 
  
--IF ( V_CODENIV1 != '' ) THEN 
--CALL SP_INSNIV ( P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'A' , P_BRANCHE , V_FORMDESC , P_USER , P_DATENOW , V_GUIDIDBLOC , CODENIV1 , CODEGARNIV1 , DESCRNIV1 , CARACNIV1 , NATURENIV1 , CODEPARENTNIV1 , CODENIV1NIV1 , NIVEAUNIV1 , TRINIV1 , DEFGARANTIENIV1 , CATNATNIV1 , INDEXEENIV1 , CODETAXENIV1 , ASSIETTEVALEURNIV1 , ASSIETTEUNITENIV1 , ASSIETTEBASENIV1 , ASSIETTEMODIFIABLENIV1 , TYPECONTROLEDATENIV1 , MONTANTREFNIV1 , ASSOBLIGATOIRENIV1 , PARAMNATMODNIV1 , MODEALIMNIV1 , IN
  -- 
-- 
-- 
--VENPOSSIBLE1 ) ; 
--END IF ; 
--IF ( V_CODENIV2 != '' ) THEN 
--CALL SP_INSNIV ( P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'A' , P_BRANCHE , V_FORMDESC , P_USER , P_DATENOW , V_GUIDIDBLOC , CODENIV2 , CODEGARNIV2 , DESCRNIV2 , CARACNIV2 , NATURENIV2 , CODEPARENTNIV2 , CODENIV1NIV2 , NIVEAUNIV2 , TRINIV2 , DEFGARANTIENIV2 , CATNATNIV2 , INDEXEENIV2 , CODETAXENIV2 , ASSIETTEVALEURNIV2 , ASSIETTEUNITENIV2 , ASSIETTEBASENIV2 , ASSIETTEMODIFIABLENIV2 , TYPECONTROLEDATENIV2 , MONTANTREFNIV2 , ASSOBLIGATOIRENIV2 , PARAMNATMODNIV2 , MODEALIMNIV2 , IN
  -- 
-- 
-- 
--VENPOSSIBLE2 ) ; 
--END IF ; 
--IF ( V_CODENIV3 != '' ) THEN 
--CALL SP_INSNIV ( P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'A' , P_BRANCHE , V_FORMDESC , P_USER , P_DATENOW , V_GUIDIDBLOC , CODENIV3 , CODEGARNIV3 , DESCRNIV3 , CARACNIV3 , NATURENIV3 , CODEPARENTNIV3 , CODENIV1NIV3 , NIVEAUNIV3 , TRINIV3 , DEFGARANTIENIV3 , CATNATNIV3 , INDEXEENIV3 , CODETAXENIV3 , ASSIETTEVALEURNIV3 , ASSIETTEUNITENIV3 , ASSIETTEBASENIV3 , ASSIETTEMODIFIABLENIV3 , TYPECONTROLEDATENIV3 , MONTANTREFNIV3 , ASSOBLIGATOIRENIV3 , PARAMNATMODNIV3 , MODEALIMNIV3 , IN
  -- 
-- 
-- 
--VENPOSSIBLE3 ) ; 
--END IF ; 
--IF ( V_CODENIV4 != '' ) THEN 
--CALL SP_INSNIV ( P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'A' , P_BRANCHE , V_FORMDESC , P_USER , P_DATENOW , V_GUIDIDBLOC , CODENIV4 , CODEGARNIV4 , DESCRNIV4 , CARACNIV4 , NATURENIV4 , CODEPARENTNIV4 , CODENIV1NIV4 , NIVEAUNIV4 , TRINIV4 , DEFGARANTIENIV4 , CATNATNIV4 , INDEXEENIV4 , CODETAXENIV4 , ASSIETTEVALEURNIV4 , ASSIETTEUNITENIV4 , ASSIETTEBASENIV4 , ASSIETTEMODIFIABLENIV4 , TYPECONTROLEDATENIV4 , MONTANTREFNIV4 , ASSOBLIGATOIRENIV4 , PARAMNATMODNIV4 , MODEALIMNIV4 , IN
  -- 
-- 
-- 
--VENPOSSIBLE4 ) ; 
--END IF ; 
ELSE 
IF ( V_CODENIV2 <> CODENIV2 ) THEN 
SET V_CODENIV2 = CODENIV2 ; 
SET V_CODENIV3 = CODENIV3 ; 
SET V_CODENIV4 = CODENIV4 ; 
  
--IF ( V_CODENIV2 != '' ) THEN 
--CALL SP_INSNIV ( P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'A' , P_BRANCHE , V_FORMDESC , P_USER , P_DATENOW , V_GUIDIDBLOC , CODENIV2 , CODEGARNIV2 , DESCRNIV2 , CARACNIV2 , NATURENIV2 , CODEPARENTNIV2 , CODENIV1NIV2 , NIVEAUNIV2 , TRINIV2 , DEFGARANTIENIV2 , CATNATNIV2 , INDEXEENIV2 , CODETAXENIV2 , ASSIETTEVALEURNIV2 , ASSIETTEUNITENIV2 , ASSIETTEBASENIV2 , ASSIETTEMODIFIABLENIV2 , TYPECONTROLEDATENIV2 , MONTANTREFNIV2 , ASSOBLIGATOIRENIV2 , PARAMNATMODNIV2 , MODEALIMNIV2 , IN
  -- 
-- 
-- 
--VENPOSSIBLE2 ) ; 
--END IF ; 
--IF ( V_CODENIV3 != '' ) THEN 
--CALL SP_INSNIV ( P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'A' , P_BRANCHE , V_FORMDESC , P_USER , P_DATENOW , V_GUIDIDBLOC , CODENIV3 , CODEGARNIV3 , DESCRNIV3 , CARACNIV3 , NATURENIV3 , CODEPARENTNIV3 , CODENIV1NIV3 , NIVEAUNIV3 , TRINIV3 , DEFGARANTIENIV3 , CATNATNIV3 , INDEXEENIV3 , CODETAXENIV3 , ASSIETTEVALEURNIV3 , ASSIETTEUNITENIV3 , ASSIETTEBASENIV3 , ASSIETTEMODIFIABLENIV3 , TYPECONTROLEDATENIV3 , MONTANTREFNIV3 , ASSOBLIGATOIRENIV3 , PARAMNATMODNIV3 , MODEALIMNIV3 , IN
  -- 
-- 
-- 
--VENPOSSIBLE3 ) ; 
--END IF ; 
--IF ( V_CODENIV4 != '' ) THEN 
--CALL SP_INSNIV ( P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'A' , P_BRANCHE , V_FORMDESC , P_USER , P_DATENOW , V_GUIDIDBLOC , CODENIV4 , CODEGARNIV4 , DESCRNIV4 , CARACNIV4 , NATURENIV4 , CODEPARENTNIV4 , CODENIV1NIV4 , NIVEAUNIV4 , TRINIV4 , DEFGARANTIENIV4 , CATNATNIV4 , INDEXEENIV4 , CODETAXENIV4 , ASSIETTEVALEURNIV4 , ASSIETTEUNITENIV4 , ASSIETTEBASENIV4 , ASSIETTEMODIFIABLENIV4 , TYPECONTROLEDATENIV4 , MONTANTREFNIV4 , ASSOBLIGATOIRENIV4 , PARAMNATMODNIV4 , MODEALIMNIV4 , IN
  -- 
-- 
-- 
--VENPOSSIBLE4 ) ; 
--END IF ; 
ELSE 
IF ( V_CODENIV3 <> CODENIV3 ) THEN 
SET V_CODENIV3 = CODENIV3 ; 
SET V_CODENIV4 = CODENIV4 ; 
  
--IF ( V_CODENIV3 != '' ) THEN 
--CALL SP_INSNIV ( P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'A' , P_BRANCHE , V_FORMDESC , P_USER , P_DATENOW , V_GUIDIDBLOC , CODENIV3 , CODEGARNIV3 , DESCRNIV3 , CARACNIV3 , NATURENIV3 , CODEPARENTNIV3 , CODENIV1NIV3 , NIVEAUNIV3 , TRINIV3 , DEFGARANTIENIV3 , CATNATNIV3 , INDEXEENIV3 , CODETAXENIV3 , ASSIETTEVALEURNIV3 , ASSIETTEUNITENIV3 , ASSIETTEBASENIV3 , ASSIETTEMODIFIABLENIV3 , TYPECONTROLEDATENIV3 , MONTANTREFNIV3 , ASSOBLIGATOIRENIV3 , PARAMNATMODNIV3 , MODEALIMNIV3 , IN
  -- 
-- 
-- 
--VENPOSSIBLE3 ) ; 
--END IF ; 
--IF ( V_CODENIV4 != '' ) THEN 
--CALL SP_INSNIV ( P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'A' , P_BRANCHE , V_FORMDESC , P_USER , P_DATENOW , V_GUIDIDBLOC , CODENIV4 , CODEGARNIV4 , DESCRNIV4 , CARACNIV4 , NATURENIV4 , CODEPARENTNIV4 , CODENIV1NIV4 , NIVEAUNIV4 , TRINIV4 , DEFGARANTIENIV4 , CATNATNIV4 , INDEXEENIV4 , CODETAXENIV4 , ASSIETTEVALEURNIV4 , ASSIETTEUNITENIV4 , ASSIETTEBASENIV4 , ASSIETTEMODIFIABLENIV4 , TYPECONTROLEDATENIV4 , MONTANTREFNIV4 , ASSOBLIGATOIRENIV4 , PARAMNATMODNIV4 , MODEALIMNIV4 , IN
  -- 
-- 
-- 
--VENPOSSIBLE4 ) ; 
--END IF ; 
ELSE 
IF ( V_CODENIV4 <> CODENIV4 ) THEN 
SET V_CODENIV4 = CODENIV4 ; 
  
--IF ( V_CODENIV4 != '' ) THEN 
--CALL SP_INSNIV ( P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'A' , P_BRANCHE , V_FORMDESC , P_USER , P_DATENOW , V_GUIDIDBLOC , CODENIV4 , CODEGARNIV4 , DESCRNIV4 , CARACNIV4 , NATURENIV4 , CODEPARENTNIV4 , CODENIV1NIV4 , NIVEAUNIV4 , TRINIV4 , DEFGARANTIENIV4 , CATNATNIV4 , INDEXEENIV4 , CODETAXENIV4 , ASSIETTEVALEURNIV4 , ASSIETTEUNITENIV4 , ASSIETTEBASENIV4 , ASSIETTEMODIFIABLENIV4 , TYPECONTROLEDATENIV4 , MONTANTREFNIV4 , ASSOBLIGATOIRENIV4 , PARAMNATMODNIV4 , MODEALIMNIV4 , IN
  -- 
-- 
-- 
--VENPOSSIBLE4 ) ; 
--END IF ; 
END IF ; 
END IF ; 
END IF ; 
END IF ; 
END IF ; 
END IF ; 
END IF ; 
END FOR ; 
END IF ; 
END FOR ; 
  
FOR LOOP_GAR AS FREE_LIST CURSOR FOR 
SELECT KDEID CODEGARAN , KDECAR CARACGARAN , KDENAT NATUREGARAN FROM KPGARAW 
DO 
SET V_PARAMNAT = '' ; 
  
IF ( CARACGARAN != '' AND NATUREGARAN != '' ) THEN 
SELECT IFNULL ( TRIM ( KAUGANNC ) , '' ) INTO V_PARAMNAT FROM KGANPAR 
WHERE KAUCAR = CARACGARAN AND KAUNAT = NATUREGARAN ; 
UPDATE KPGARAW SET KDEGAN = V_PARAMNAT WHERE KDEID = CODEGARAN ; 
END IF ; 
  
END FOR ; 
  
SET V_CARAC = '' ; 
SET V_NATURE = '' ; 
SET V_PARAMNAT = '' ; 
SELECT KDECAR , KDENAT INTO V_CARAC , V_NATURE FROM KPGARAW WHERE KDEIPB = P_CODEOFFRE AND KDEALX = P_VERSION AND KDETYP = P_TYPE AND KDEFOR = 1 AND KDEOPT = 1 AND KDEGARAN = 'ANNORG' ; 
IF ( V_CARAC != '' AND V_NATURE != '' ) THEN 
IF ( V_ANNORGACQUIS = 'O' ) THEN 
SELECT IFNULL ( TRIM ( KAUGANC ) , '' ) INTO V_PARAMNAT FROM KGANPAR 
WHERE KAUCAR = V_CARAC AND KAUNAT = V_NATURE ; 
ELSE 
SELECT IFNULL ( TRIM ( KAUGANNC ) , '' ) INTO V_PARAMNAT FROM KGANPAR 
WHERE KAUCAR = V_CARAC AND KAUNAT = V_NATURE ; 
END IF ; 
UPDATE KPGARAW SET KDEGAN = V_PARAMNAT WHERE KDEIPB = P_CODEOFFRE AND KDEALX = P_VERSION AND KDETYP = P_TYPE AND KDEFOR = 1 AND KDEOPT = 1 AND KDEGARAN = 'ANNORG' ; 
ELSE 
SET P_OUTMESSAGE = TRIM ( P_OUTMESSAGE ) CONCAT '_ANNORG.KO' ; 
END IF ; 
  
SET V_CODEGARANTIE = 0 ; 
SET V_CARAC = '' ; 
SET V_NATURE = '' ; 
SET V_PARAMNAT = '' ; 
SELECT KDEID , KDECAR , KDENAT INTO V_CODEGARANTIE , V_CARAC , V_NATURE FROM KPGARAW WHERE KDEIPB = P_CODEOFFRE AND KDEALX = P_VERSION AND KDETYP = P_TYPE AND KDEFOR = 1 AND KDEOPT = 1 AND KDEGARAN = 'ANNOTS' ; 
IF ( V_CARAC != '' AND V_NATURE != '' ) THEN 
IF ( V_ANNOTSACQUIS = 'O' ) THEN 
SELECT IFNULL ( TRIM ( KAUGANC ) , '' ) INTO V_PARAMNAT FROM KGANPAR 
WHERE KAUCAR = V_CARAC AND KAUNAT = V_NATURE ; 
ELSE 
SELECT IFNULL ( TRIM ( KAUGANNC ) , '' ) INTO V_PARAMNAT FROM KGANPAR 
WHERE KAUCAR = V_CARAC AND KAUNAT = V_NATURE ; 
END IF ; 
UPDATE KPGARAW SET KDEGAN = V_PARAMNAT , KDEASVALO = V_ANNULASSVAL , KDEASVALA = V_ANNULASSVAL , KDEASUNIT = V_ANNULASSUNIT , KDEASBASE = V_ANNULASSTYPE 
WHERE KDEIPB = P_CODEOFFRE AND KDEALX = P_VERSION AND KDETYP = P_TYPE AND KDEFOR = 1 AND KDEOPT = 1 AND KDEGARAN = 'ANNOTS' ; 
  
UPDATE KPGARTAW SET KDGFRHVALO = V_ANNULFRHVAL , KDGFRHVALA = V_ANNULFRHVAL , KDGFRHUNIT = V_ANNULFRHUNIT , KDGFRHBASE = V_ANNULFRHTYPE , 
KDGPRIVALO = V_ANNULPRIVAL , KDGPRIVALA = V_ANNULPRIVAL , KDGPRIUNIT = V_ANNULPRIUNIT , KDGPRIBASE = V_ANNULPRITYPE 
WHERE KDGIPB = P_CODEOFFRE AND KDGALX = P_VERSION AND KDGTYP = P_TYPE AND KDGFOR = 1 AND KDGOPT = 1 AND KDGGARAN = 'ANNOTS' ; 
  
IF ( V_ANNULEXCOBJ1 = 'O' ) THEN 
CALL SP_NCHRONO ( 'KDFID' , V_CODEPORTEE ) ; 
INSERT INTO KPGARAP 
( KDFID , KDFIPB , KDFALX , KDFTYP , KDFFOR , KDFOPT , KDFGARAN , KDFKDEID , KDFGAN , 
KDFPERI , KDFRSQ , KDFOBJ , KDFINVEN , KDFINVEP , KDFCRU , KDFCRD , KDFMAJU , KDFMAJD ) 
VALUES 
( V_CODEPORTEE , P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'ANNOTS' , V_CODEGARANTIE , 'E' , 
'' , 1 , 1 , 0 , 0 , P_USER , P_DATENOW , P_USER , P_DATENOW ) ; 
END IF ; 
IF ( V_ANNULEXCOBJ2 = 'O' ) THEN 
CALL SP_NCHRONO ( 'KDFID' , V_CODEPORTEE ) ; 
INSERT INTO KPGARAP 
( KDFID , KDFIPB , KDFALX , KDFTYP , KDFFOR , KDFOPT , KDFGARAN , KDFKDEID , KDFGAN , 
KDFPERI , KDFRSQ , KDFOBJ , KDFINVEN , KDFINVEP , KDFCRU , KDFCRD , KDFMAJU , KDFMAJD ) 
VALUES 
( V_CODEPORTEE , P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'ANNOTS' , V_CODEGARANTIE , 'E' , 
'' , 1 , 2 , 0 , 0 , P_USER , P_DATENOW , P_USER , P_DATENOW ) ; 
END IF ; 
IF ( V_ANNULEXCOBJ3 = 'O' ) THEN 
CALL SP_NCHRONO ( 'KDFID' , V_CODEPORTEE ) ; 
INSERT INTO KPGARAP 
( KDFID , KDFIPB , KDFALX , KDFTYP , KDFFOR , KDFOPT , KDFGARAN , KDFKDEID , KDFGAN , 
KDFPERI , KDFRSQ , KDFOBJ , KDFINVEN , KDFINVEP , KDFCRU , KDFCRD , KDFMAJU , KDFMAJD ) 
VALUES 
( V_CODEPORTEE , P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'ANNOTS' , V_CODEGARANTIE , 'E' , 
'' , 1 , 3 , 0 , 0 , P_USER , P_DATENOW , P_USER , P_DATENOW ) ; 
END IF ; 
IF ( V_ANNULEXCOBJ4 = 'O' ) THEN 
CALL SP_NCHRONO ( 'KDFID' , V_CODEPORTEE ) ; 
INSERT INTO KPGARAP 
( KDFID , KDFIPB , KDFALX , KDFTYP , KDFFOR , KDFOPT , KDFGARAN , KDFKDEID , KDFGAN , 
KDFPERI , KDFRSQ , KDFOBJ , KDFINVEN , KDFINVEP , KDFCRU , KDFCRD , KDFMAJU , KDFMAJD ) 
VALUES 
( V_CODEPORTEE , P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'ANNOTS' , V_CODEGARANTIE , 'E' , 
'' , 1 , 4 , 0 , 0 , P_USER , P_DATENOW , P_USER , P_DATENOW ) ; 
END IF ; 
IF ( V_ANNULEXCOBJ5 = 'O' ) THEN 
CALL SP_NCHRONO ( 'KDFID' , V_CODEPORTEE ) ; 
INSERT INTO KPGARAP 
( KDFID , KDFIPB , KDFALX , KDFTYP , KDFFOR , KDFOPT , KDFGARAN , KDFKDEID , KDFGAN , 
KDFPERI , KDFRSQ , KDFOBJ , KDFINVEN , KDFINVEP , KDFCRU , KDFCRD , KDFMAJU , KDFMAJD ) 
VALUES 
( V_CODEPORTEE , P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'ANNOTS' , V_CODEGARANTIE , 'E' , 
'' , 1 , 5 , 0 , 0 , P_USER , P_DATENOW , P_USER , P_DATENOW ) ; 
END IF ; 
ELSE 
SET P_OUTMESSAGE = TRIM ( P_OUTMESSAGE ) CONCAT '_ANNOTS.KO' ; 
END IF ; 
  
SET V_CODEGARANTIE = 0 ; 
SET V_CARAC = '' ; 
SET V_NATURE = '' ; 
SET V_PARAMNAT = '' ; 
SELECT KDEID , KDECAR , KDENAT INTO V_CODEGARANTIE , V_CARAC , V_NATURE FROM KPGARAW WHERE KDEIPB = P_CODEOFFRE AND KDEALX = P_VERSION AND KDETYP = P_TYPE AND KDEFOR = 1 AND KDEOPT = 1 AND KDEGARAN = 'INDISP' ; 
IF ( V_CARAC != '' AND V_NATURE != '' ) THEN 
IF ( V_INDISPSACQUIS = 'O' ) THEN 
SELECT IFNULL ( TRIM ( KAUGANC ) , '' ) INTO V_PARAMNAT FROM KGANPAR 
WHERE KAUCAR = V_CARAC AND KAUNAT = V_NATURE ; 
ELSE 
SELECT IFNULL ( TRIM ( KAUGANNC ) , '' ) INTO V_PARAMNAT FROM KGANPAR 
WHERE KAUCAR = V_CARAC AND KAUNAT = V_NATURE ; 
END IF ; 
  
UPDATE KPGARAW SET KDEGAN = V_PARAMNAT , KDEASVALO = V_INDISPASSVAL , KDEASVALA = V_INDISPASSVAL , KDEASUNIT = V_INDISPASSUNIT , KDEASBASE = V_INDISPASSTYPE 
WHERE KDEIPB = P_CODEOFFRE AND KDEALX = P_VERSION AND KDETYP = P_TYPE AND KDEFOR = 1 AND KDEOPT = 1 AND KDEGARAN = 'INDISP' ; 
  
UPDATE KPGARTAW SET KDGFRHVALO = V_INDISPFRHVAL , KDGFRHVALA = V_INDISPFRHVAL , KDGFRHUNIT = V_INDISPFRHUNIT , KDGFRHBASE = V_INDISPFRHTYPE , 
KDGPRIVALO = V_INDISPPRIVAL , KDGPRIVALA = V_INDISPPRIVAL , KDGPRIUNIT = V_INDISPPRIUNIT , KDGPRIBASE = V_INDISPPRITYPE 
WHERE KDGIPB = P_CODEOFFRE AND KDGALX = P_VERSION AND KDGTYP = P_TYPE AND KDGFOR = 1 AND KDGOPT = 1 AND KDGGARAN = 'INDISP' ; 
  
IF ( V_INDISPEXCOBJ1 = 'O' ) THEN 
CALL SP_NCHRONO ( 'KDFID' , V_CODEPORTEE ) ; 
INSERT INTO KPGARAP 
( KDFID , KDFIPB , KDFALX , KDFTYP , KDFFOR , KDFOPT , KDFGARAN , KDFKDEID , KDFGAN , 
KDFPERI , KDFRSQ , KDFOBJ , KDFINVEN , KDFINVEP , KDFCRU , KDFCRD , KDFMAJU , KDFMAJD ) 
VALUES 
( V_CODEPORTEE , P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'INDISP' , V_CODEGARANTIE , 'E' , 
'' , 1 , 1 , 0 , 0 , P_USER , P_DATENOW , P_USER , P_DATENOW ) ; 
END IF ; 
IF ( V_INDISPEXCOBJ2 = 'O' ) THEN 
CALL SP_NCHRONO ( 'KDFID' , V_CODEPORTEE ) ; 
INSERT INTO KPGARAP 
( KDFID , KDFIPB , KDFALX , KDFTYP , KDFFOR , KDFOPT , KDFGARAN , KDFKDEID , KDFGAN , 
KDFPERI , KDFRSQ , KDFOBJ , KDFINVEN , KDFINVEP , KDFCRU , KDFCRD , KDFMAJU , KDFMAJD ) 
VALUES 
( V_CODEPORTEE , P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'INDISP' , V_CODEGARANTIE , 'E' , 
'' , 1 , 2 , 0 , 0 , P_USER , P_DATENOW , P_USER , P_DATENOW ) ; 
END IF ; 
IF ( V_INDISPEXCOBJ3 = 'O' ) THEN 
CALL SP_NCHRONO ( 'KDFID' , V_CODEPORTEE ) ; 
INSERT INTO KPGARAP 
( KDFID , KDFIPB , KDFALX , KDFTYP , KDFFOR , KDFOPT , KDFGARAN , KDFKDEID , KDFGAN , 
KDFPERI , KDFRSQ , KDFOBJ , KDFINVEN , KDFINVEP , KDFCRU , KDFCRD , KDFMAJU , KDFMAJD ) 
VALUES 
( V_CODEPORTEE , P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'INDISP' , V_CODEGARANTIE , 'E' , 
'' , 1 , 3 , 0 , 0 , P_USER , P_DATENOW , P_USER , P_DATENOW ) ; 
END IF ; 
IF ( V_INDISPEXCOBJ4 = 'O' ) THEN 
CALL SP_NCHRONO ( 'KDFID' , V_CODEPORTEE ) ; 
INSERT INTO KPGARAP 
( KDFID , KDFIPB , KDFALX , KDFTYP , KDFFOR , KDFOPT , KDFGARAN , KDFKDEID , KDFGAN , 
KDFPERI , KDFRSQ , KDFOBJ , KDFINVEN , KDFINVEP , KDFCRU , KDFCRD , KDFMAJU , KDFMAJD ) 
VALUES 
( V_CODEPORTEE , P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'INDISP' , V_CODEGARANTIE , 'E' , 
'' , 1 , 4 , 0 , 0 , P_USER , P_DATENOW , P_USER , P_DATENOW ) ; 
END IF ; 
IF ( V_INDISPEXCOBJ5 = 'O' ) THEN 
CALL SP_NCHRONO ( 'KDFID' , V_CODEPORTEE ) ; 
INSERT INTO KPGARAP 
( KDFID , KDFIPB , KDFALX , KDFTYP , KDFFOR , KDFOPT , KDFGARAN , KDFKDEID , KDFGAN , 
KDFPERI , KDFRSQ , KDFOBJ , KDFINVEN , KDFINVEP , KDFCRU , KDFCRD , KDFMAJU , KDFMAJD ) 
VALUES 
( V_CODEPORTEE , P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'INDISP' , V_CODEGARANTIE , 'E' , 
'' , 1 , 5 , 0 , 0 , P_USER , P_DATENOW , P_USER , P_DATENOW ) ; 
END IF ; 
ELSE 
SET P_OUTMESSAGE = TRIM ( P_OUTMESSAGE ) CONCAT '_INDISP.KO' ; 
END IF ; 
  
SET V_CODEGARANTIE = 0 ; 
SET V_CARAC = '' ; 
SET V_NATURE = '' ; 
SET V_PARAMNAT = '' ; 
SELECT KDEID , KDECAR , KDENAT INTO V_CODEGARANTIE , V_CARAC , V_NATURE FROM KPGARAW WHERE KDEIPB = P_CODEOFFRE AND KDEALX = P_VERSION AND KDETYP = P_TYPE AND KDEFOR = 1 AND KDEOPT = 1 AND KDEGARAN = 'INTEMP' ; 
IF ( V_CARAC != '' AND V_NATURE != '' ) THEN 
IF ( V_INTEMPSACQUIS = 'O' ) THEN 
SELECT IFNULL ( TRIM ( KAUGANC ) , '' ) INTO V_PARAMNAT FROM KGANPAR 
WHERE KAUCAR = V_CARAC AND KAUNAT = V_NATURE ; 
ELSE 
SELECT IFNULL ( TRIM ( KAUGANNC ) , '' ) INTO V_PARAMNAT FROM KGANPAR 
WHERE KAUCAR = V_CARAC AND KAUNAT = V_NATURE ; 
END IF ; 
UPDATE KPGARAW SET KDEGAN = V_PARAMNAT , KDEASVALO = V_INTEMPASSVAL , KDEASVALA = V_INTEMPASSVAL , KDEASUNIT = V_INTEMPASSUNIT , KDEASBASE = V_INTEMPASSTYPE 
WHERE KDEIPB = P_CODEOFFRE AND KDEALX = P_VERSION AND KDETYP = P_TYPE AND KDEFOR = 1 AND KDEOPT = 1 AND KDEGARAN = 'INTEMP' ; 
  
UPDATE KPGARTAW SET KDGFRHVALO = V_INTEMPFRHVAL , KDGFRHVALA = V_INTEMPFRHVAL , KDGFRHUNIT = V_INTEMPFRHUNIT , KDGFRHBASE = V_INTEMPFRHTYPE , 
KDGPRIVALO = V_INTEMPPRIVAL , KDGPRIVALA = V_INTEMPPRIVAL , KDGPRIUNIT = V_INTEMPPRIUNIT , KDGPRIBASE = V_INTEMPPRITYPE 
WHERE KDGIPB = P_CODEOFFRE AND KDGALX = P_VERSION AND KDGTYP = P_TYPE AND KDGFOR = 1 AND KDGOPT = 1 AND KDGGARAN = 'INTEMP' ; 
  
IF ( V_INTEMPEXCOBJ1 = 'O' ) THEN 
CALL SP_NCHRONO ( 'KDFID' , V_CODEPORTEE ) ; 
INSERT INTO KPGARAP 
( KDFID , KDFIPB , KDFALX , KDFTYP , KDFFOR , KDFOPT , KDFGARAN , KDFKDEID , KDFGAN , 
KDFPERI , KDFRSQ , KDFOBJ , KDFINVEN , KDFINVEP , KDFCRU , KDFCRD , KDFMAJU , KDFMAJD ) 
VALUES 
( V_CODEPORTEE , P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'INTEMP' , V_CODEGARANTIE , 'E' , 
'' , 1 , 1 , 0 , 0 , P_USER , P_DATENOW , P_USER , P_DATENOW ) ; 
END IF ; 
IF ( V_INTEMPEXCOBJ2 = 'O' ) THEN 
CALL SP_NCHRONO ( 'KDFID' , V_CODEPORTEE ) ; 
INSERT INTO KPGARAP 
( KDFID , KDFIPB , KDFALX , KDFTYP , KDFFOR , KDFOPT , KDFGARAN , KDFKDEID , KDFGAN , 
KDFPERI , KDFRSQ , KDFOBJ , KDFINVEN , KDFINVEP , KDFCRU , KDFCRD , KDFMAJU , KDFMAJD ) 
VALUES 
( V_CODEPORTEE , P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'INTEMP' , V_CODEGARANTIE , 'E' , 
'' , 1 , 2 , 0 , 0 , P_USER , P_DATENOW , P_USER , P_DATENOW ) ; 
END IF ; 
IF ( V_INTEMPEXCOBJ3 = 'O' ) THEN 
CALL SP_NCHRONO ( 'KDFID' , V_CODEPORTEE ) ; 
INSERT INTO KPGARAP 
( KDFID , KDFIPB , KDFALX , KDFTYP , KDFFOR , KDFOPT , KDFGARAN , KDFKDEID , KDFGAN , 
KDFPERI , KDFRSQ , KDFOBJ , KDFINVEN , KDFINVEP , KDFCRU , KDFCRD , KDFMAJU , KDFMAJD ) 
VALUES 
( V_CODEPORTEE , P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'INTEMP' , V_CODEGARANTIE , 'E' , 
'' , 1 , 3 , 0 , 0 , P_USER , P_DATENOW , P_USER , P_DATENOW ) ; 
END IF ; 
IF ( V_INTEMPEXCOBJ4 = 'O' ) THEN 
CALL SP_NCHRONO ( 'KDFID' , V_CODEPORTEE ) ; 
INSERT INTO KPGARAP 
( KDFID , KDFIPB , KDFALX , KDFTYP , KDFFOR , KDFOPT , KDFGARAN , KDFKDEID , KDFGAN , 
KDFPERI , KDFRSQ , KDFOBJ , KDFINVEN , KDFINVEP , KDFCRU , KDFCRD , KDFMAJU , KDFMAJD ) 
VALUES 
( V_CODEPORTEE , P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'INTEMP' , V_CODEGARANTIE , 'E' , 
'' , 1 , 4 , 0 , 0 , P_USER , P_DATENOW , P_USER , P_DATENOW ) ; 
END IF ; 
IF ( V_INTEMPEXCOBJ5 = 'O' ) THEN 
CALL SP_NCHRONO ( 'KDFID' , V_CODEPORTEE ) ; 
INSERT INTO KPGARAP 
( KDFID , KDFIPB , KDFALX , KDFTYP , KDFFOR , KDFOPT , KDFGARAN , KDFKDEID , KDFGAN , 
KDFPERI , KDFRSQ , KDFOBJ , KDFINVEN , KDFINVEP , KDFCRU , KDFCRD , KDFMAJU , KDFMAJD ) 
VALUES 
( V_CODEPORTEE , P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'INTEMP' , V_CODEGARANTIE , 'E' , 
'' , 1 , 5 , 0 , 0 , P_USER , P_DATENOW , P_USER , P_DATENOW ) ; 
END IF ; 
ELSE 
SET P_OUTMESSAGE = TRIM ( P_OUTMESSAGE ) CONCAT '_INTEMP.KO' ; 
END IF ; 
  
SET V_CODEGARANTIE = 0 ; 
SET V_CARAC = '' ; 
SET V_NATURE = '' ; 
SET V_PARAMNAT = '' ; 
SELECT KDEID , KDECAR , KDENAT INTO V_CODEGARANTIE , V_CARAC , V_NATURE FROM KPGARAW WHERE KDEIPB = P_CODEOFFRE AND KDEALX = P_VERSION AND KDETYP = P_TYPE AND KDEFOR = 1 AND KDEOPT = 1 AND KDEGARAN = 'ATTENT' ; 
IF ( V_CARAC != '' AND V_NATURE != '' ) THEN 
IF ( V_ATTENTSACQUIS = 'O' ) THEN 
SELECT IFNULL ( TRIM ( KAUGANC ) , '' ) INTO V_PARAMNAT FROM KGANPAR 
WHERE KAUCAR = V_CARAC AND KAUNAT = V_NATURE ; 
ELSE 
SELECT IFNULL ( TRIM ( KAUGANNC ) , '' ) INTO V_PARAMNAT FROM KGANPAR 
WHERE KAUCAR = V_CARAC AND KAUNAT = V_NATURE ; 
END IF ; 
UPDATE KPGARAW SET KDEGAN = V_PARAMNAT , KDEASVALO = V_ATTENTASSVAL , KDEASVALA = V_ATTENTASSVAL , KDEASUNIT = V_ATTENTASSUNIT , KDEASBASE = V_ATTENTASSTYPE 
WHERE KDEIPB = P_CODEOFFRE AND KDEALX = P_VERSION AND KDETYP = P_TYPE AND KDEFOR = 1 AND KDEOPT = 1 AND KDEGARAN = 'ATTENT' ; 
  
UPDATE KPGARTAW SET KDGFRHVALO = V_ATTENTFRHVAL , KDGFRHVALA = V_ATTENTFRHVAL , KDGFRHUNIT = V_ATTENTFRHUNIT , KDGFRHBASE = V_ATTENTFRHTYPE , 
KDGPRIVALO = V_ATTENTPRIVAL , KDGPRIVALA = V_ATTENTPRIVAL , KDGPRIUNIT = V_ATTENTPRIUNIT , KDGPRIBASE = V_ATTENTPRITYPE 
WHERE KDGIPB = P_CODEOFFRE AND KDGALX = P_VERSION AND KDGTYP = P_TYPE AND KDGFOR = 1 AND KDGOPT = 1 AND KDGGARAN = 'ATTENT' ; 
  
IF ( V_ATTENTEXCOBJ1 = 'O' ) THEN 
CALL SP_NCHRONO ( 'KDFID' , V_CODEPORTEE ) ; 
INSERT INTO KPGARAP 
( KDFID , KDFIPB , KDFALX , KDFTYP , KDFFOR , KDFOPT , KDFGARAN , KDFKDEID , KDFGAN , 
KDFPERI , KDFRSQ , KDFOBJ , KDFINVEN , KDFINVEP , KDFCRU , KDFCRD , KDFMAJU , KDFMAJD ) 
VALUES 
( V_CODEPORTEE , P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'ATTENT' , V_CODEGARANTIE , 'E' , 
'' , 1 , 1 , 0 , 0 , P_USER , P_DATENOW , P_USER , P_DATENOW ) ; 
END IF ; 
IF ( V_ATTENTEXCOBJ2 = 'O' ) THEN 
CALL SP_NCHRONO ( 'KDFID' , V_CODEPORTEE ) ; 
INSERT INTO KPGARAP 
( KDFID , KDFIPB , KDFALX , KDFTYP , KDFFOR , KDFOPT , KDFGARAN , KDFKDEID , KDFGAN , 
KDFPERI , KDFRSQ , KDFOBJ , KDFINVEN , KDFINVEP , KDFCRU , KDFCRD , KDFMAJU , KDFMAJD ) 
VALUES 
( V_CODEPORTEE , P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'ATTENT' , V_CODEGARANTIE , 'E' , 
'' , 1 , 2 , 0 , 0 , P_USER , P_DATENOW , P_USER , P_DATENOW ) ; 
END IF ; 
IF ( V_ATTENTEXCOBJ3 = 'O' ) THEN 
CALL SP_NCHRONO ( 'KDFID' , V_CODEPORTEE ) ; 
INSERT INTO KPGARAP 
( KDFID , KDFIPB , KDFALX , KDFTYP , KDFFOR , KDFOPT , KDFGARAN , KDFKDEID , KDFGAN , 
KDFPERI , KDFRSQ , KDFOBJ , KDFINVEN , KDFINVEP , KDFCRU , KDFCRD , KDFMAJU , KDFMAJD ) 
VALUES 
( V_CODEPORTEE , P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'ATTENT' , V_CODEGARANTIE , 'E' , 
'' , 1 , 3 , 0 , 0 , P_USER , P_DATENOW , P_USER , P_DATENOW ) ; 
END IF ; 
IF ( V_ATTENTEXCOBJ4 = 'O' ) THEN 
CALL SP_NCHRONO ( 'KDFID' , V_CODEPORTEE ) ; 
INSERT INTO KPGARAP 
( KDFID , KDFIPB , KDFALX , KDFTYP , KDFFOR , KDFOPT , KDFGARAN , KDFKDEID , KDFGAN , 
KDFPERI , KDFRSQ , KDFOBJ , KDFINVEN , KDFINVEP , KDFCRU , KDFCRD , KDFMAJU , KDFMAJD ) 
VALUES 
( V_CODEPORTEE , P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'ATTENT' , V_CODEGARANTIE , 'E' , 
'' , 1 , 4 , 0 , 0 , P_USER , P_DATENOW , P_USER , P_DATENOW ) ; 
END IF ; 
IF ( V_ATTENTEXCOBJ5 = 'O' ) THEN 
CALL SP_NCHRONO ( 'KDFID' , V_CODEPORTEE ) ; 
INSERT INTO KPGARAP 
( KDFID , KDFIPB , KDFALX , KDFTYP , KDFFOR , KDFOPT , KDFGARAN , KDFKDEID , KDFGAN , 
KDFPERI , KDFRSQ , KDFOBJ , KDFINVEN , KDFINVEP , KDFCRU , KDFCRD , KDFMAJU , KDFMAJD ) 
VALUES 
( V_CODEPORTEE , P_CODEOFFRE , P_VERSION , P_TYPE , 1 , 1 , 'ATTENT' , V_CODEGARANTIE , 'E' , 
'' , 1 , 5 , 0 , 0 , P_USER , P_DATENOW , P_USER , P_DATENOW ) ; 
END IF ; 
ELSE 
SET P_OUTMESSAGE = TRIM ( P_OUTMESSAGE ) CONCAT '_ATTENT.KO' ; 
END IF ; 
  
CALL SP_SVOPTD ( P_CODEOFFRE , P_VERSION , P_TYPE , 0 , 1 , 1 , V_FORMDESC , 0 , '' , 0 , 0 , V_ERROR ) ; 
  
END IF ; 
  
UPDATE KPEXL SET KGNECO = 'N' WHERE KGNID = V_CODESIMPLEFOL ; 
  
  
CALL SP_SPLIT ( P_OUTMESSAGE , '_' , 'R' , P_OUTMESSAGE ) ; 
  
END IF ; 
SET P_OUTMESSAGE = TRIM ( P_OUTMESSAGE ) ; 
END P1  ; 
  

  

