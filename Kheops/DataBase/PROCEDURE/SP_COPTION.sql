CREATE OR REPLACE PROCEDURE SP_COPTION(
	IN P_CODEOFFRE CHAR(9) , 
	IN P_VERSION INTEGER , 
	IN P_TYPE CHAR(1) , 
	IN P_CODEFORMULE INTEGER , 
	IN P_NEWCODEFORMULE INTEGER , 
	IN P_NEWVERSION INTEGER , 
	IN P_CODECONTRAT CHAR(9) , 
	IN P_VERSIONCONTRAT INTEGER , 
	IN P_DATESYSTEME VARCHAR(8) , 
	IN P_USER VARCHAR(15) , 
	IN P_TRAITEMENT VARCHAR(1) , 
	IN P_COPYCODEOFFRE CHAR(9) , 
	IN P_COPYVERSION INTEGER , 
	IN P_MODECOPY CHAR(7) ) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	CLOSQLCSR = *ENDMOD , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = ZALBINKHEO , 
	DYNDFTCOL = *YES , 
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC 
  
	DECLARE V_NEWCODEOPTION INTEGER DEFAULT 0 ; 
	 
	DECLARE V_SELOPT VARCHAR ( 1 ) DEFAULT 'N' ; 
	DECLARE V_CODEOFFRE VARCHAR ( 9 ) DEFAULT '' ; 
	DECLARE V_TYPEOFFRE VARCHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_VERSOFFRE INTEGER DEFAULT 0 ; 
	DECLARE V_NEWVERS INTEGER DEFAULT 0 ; 

	SET P_CODEOFFRE = LPAD ( TRIM ( P_CODEOFFRE ) , 9 , ' ') ;
	SET P_CODECONTRAT = LPAD ( TRIM ( P_CODECONTRAT ) , 9 , ' ') ;
	SET P_COPYCODEOFFRE = LPAD ( TRIM ( P_COPYCODEOFFRE ) , 9 , ' ') ;
	 
	SET V_CODEOFFRE = P_CODEOFFRE ; 
	SET V_TYPEOFFRE = P_TYPE ; 
	SET V_VERSOFFRE = P_VERSION ; 
	SET V_NEWVERS = P_NEWVERSION ; 
	 
	FOR FORM_LOOP AS FREE_LIST CURSOR FOR 
		SELECT KDBID CODEOPTION FROM KPOPT WHERE P_MODECOPY <> 'AFFNOUV' AND KDBKDAID = P_CODEFORMULE 
		UNION ALL 
		SELECT DISTINCT KDBID CODEOPTION
		FROM KPOPT 
		INNER JOIN KPOFOPT ON P_MODECOPY = 'AFFNOUV'
		AND (KDBIPB, KDBALX, KDBTYP, KDBOPT, 'O', 'O', KDBKDAID, KDBFOR, P_CODECONTRAT , P_VERSIONCONTRAT) = (KFJIPB, KFJALX, 'O', KFJOPT, KFJTENG, KFJSEL, P_CODEFORMULE, KFJFOR, KFJPOG, KFJALG)
	DO 
		IF ( P_TRAITEMENT = 'P' ) THEN 
			SET V_SELOPT = 'O' ; 
			 
			SET V_CODEOFFRE = P_CODECONTRAT ; 
			SET V_TYPEOFFRE = 'P' ; 
			SET V_VERSOFFRE = P_VERSIONCONTRAT ; 
			SET V_NEWVERS = P_VERSIONCONTRAT ; 
		END IF ; 
		 
		IF ( P_TRAITEMENT = 'C' ) THEN 
			SET V_CODEOFFRE = P_COPYCODEOFFRE ; 
			SET V_VERSOFFRE = P_COPYVERSION ; 
			SET V_NEWVERS = P_COPYVERSION ; 
		END IF ; 
		 
		IF ( P_TRAITEMENT = 'V' OR V_SELOPT = 'O' OR ( P_TRAITEMENT = 'C' AND P_MODECOPY != 'OFFRE' ) ) THEN 
		 
			CALL SP_SECOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KDBID' , CODEOPTION , V_NEWCODEOPTION ) ; 
			IF ( V_NEWCODEOPTION = 0 ) THEN 
				CALL SP_NCHRONO ( 'KDBID' , V_NEWCODEOPTION ) ; 
				CALL SP_INCOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KDBID' , CODEOPTION , V_NEWCODEOPTION ) ; 
			END IF ; 
			 
			INSERT INTO KPOPT 
			( KDBID , KDBTYP , KDBIPB , KDBALX , KDBFOR , KDBKDAID , KDBOPT , KDBDESC , 
			KDBFORR , KDBKDAIDR , KDBSPEID , KDBCRU , KDBCRD , KDBCRH , KDBMAJU , KDBMAJD , KDBMAJH , KDBPAQ , KDBACQ , KDBTMC , 
			KDBTFF , KDBTFP , KDBPRO , KDBTMI , KDBTFM , KDBCMC , KDBCFO , KDBCHT , KDBCTT , KDBCCP , KDBVAL , KDBVAA , KDBVAW , KDBVAT , KDBVAU , KDBVAH , KDBIVO , 
			KDBIVA , KDBIVW , KDBAVE , KDBAVG , KDBECO , KDBAVA , KDBAVM , KDBAVJ , KDBEHH , KDBEHC , KDBEHI , KDBASVALO , KDBASVALA , KDBASVALW , KDBASUNIT , KDBASBASE , KDBGER ) 
			( SELECT V_NEWCODEOPTION , V_TYPEOFFRE , V_CODEOFFRE , V_NEWVERS , KDBFOR , P_NEWCODEFORMULE , CAST(CASE WHEN P_MODECOPY = 'AFFNOUV' THEN 1 ELSE KDBOPT END AS INTEGER), KDBDESC , 
			KDBFORR , KDBKDAIDR , KDBSPEID , P_USER , P_DATESYSTEME , KDBCRH , P_USER , P_DATESYSTEME , KDBMAJH , KDBPAQ , KDBACQ , KDBTMC , 
			KDBTFF , KDBTFP , KDBPRO , KDBTMI , KDBTFM , KDBCMC , KDBCFO , KDBCHT , KDBCTT , KDBCCP , KDBVAL , KDBVAA , KDBVAW , KDBVAT , KDBVAU , KDBVAH , KDBIVO , 
			KDBIVA , KDBIVW , 0 , 0 , KDBECO , 0 , 0 , 0 , KDBEHH , KDBEHC , KDBEHI , KDBASVALO , KDBASVALA , KDBASVALW , KDBASUNIT , KDBASBASE , KDBGER 
			FROM KPOPT WHERE KDBID = CODEOPTION ) ; 
			 
			CALL SP_CKPOPTD ( P_CODEOFFRE , P_VERSION , P_TYPE , CODEOPTION , V_NEWCODEOPTION , 
				P_NEWVERSION , P_CODECONTRAT , P_VERSIONCONTRAT , P_CODEFORMULE , P_DATESYSTEME , P_USER , P_TRAITEMENT , P_COPYCODEOFFRE , P_COPYVERSION , P_MODECOPY ) ; 
			 
			CALL SP_CPOPTAP ( P_CODEOFFRE , P_VERSION , P_TYPE , CODEOPTION , V_NEWCODEOPTION , 
				P_NEWVERSION , P_CODECONTRAT , P_VERSIONCONTRAT , P_DATESYSTEME , P_USER , P_TRAITEMENT , P_COPYCODEOFFRE , P_COPYVERSION ) ; 
		 
		END IF ;	 
		 
		IF ( ( P_TRAITEMENT = 'N' OR P_TRAITEMENT = 'C' ) AND P_MODECOPY = 'OFFRE' ) THEN 
		 
			CALL SP_SECOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KDBID' , CODEOPTION , V_NEWCODEOPTION ) ; 
			IF ( V_NEWCODEOPTION = 0 ) THEN 
				CALL SP_NCHRONO ( 'KDBID' , V_NEWCODEOPTION ) ; 
				CALL SP_INCOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KDBID' , CODEOPTION , V_NEWCODEOPTION ) ; 
			END IF ; 
			 
			INSERT INTO KPOPT 
			( KDBID , KDBTYP , KDBIPB , KDBALX , KDBFOR , KDBKDAID , KDBOPT , KDBDESC , 
			KDBFORR , KDBKDAIDR , KDBSPEID , KDBCRU , KDBCRD , KDBCRH , KDBMAJU , KDBMAJD , KDBMAJH , KDBPAQ , KDBACQ , KDBTMC , 
			KDBTFF , KDBTFP , KDBPRO , KDBTMI , KDBTFM , KDBCMC , KDBCFO , KDBCHT , KDBCTT , KDBCCP , KDBVAL , KDBVAA , KDBVAW , KDBVAT , KDBVAU , KDBVAH , KDBIVO , 
			KDBIVA , KDBIVW , KDBAVE , KDBAVG , KDBECO , KDBAVA , KDBAVM , KDBAVJ , KDBEHH , KDBEHC , KDBEHI , KDBASVALO , KDBASVALA , KDBASVALW , KDBASUNIT , KDBASBASE , KDBGER ) 
			( SELECT V_NEWCODEOPTION , V_TYPEOFFRE , V_CODEOFFRE , V_NEWVERS , KDBFOR , P_NEWCODEFORMULE , KDBOPT , KDBDESC , 
			KDBFORR , KDBKDAIDR , KDBSPEID , P_USER , P_DATESYSTEME , KDBCRH , P_USER , P_DATESYSTEME , KDBMAJH , KDBPAQ , 0 , KDBTMC , 
			0 , KDBTFP , KDBPRO , KDBTMI , KDBTFM , KDBCMC , KDBCFO , KDBCHT , KDBCTT , KDBCCP , KDBVAL , KDBVAA , KDBVAW , KDBVAT , KDBVAU , KDBVAH , KDBIVO , 
			KDBIVA , KDBIVW , 0 , 0 , KDBECO , 0 , 0 , 0 , KDBEHH , KDBEHC , KDBEHI , KDBASVALO , KDBASVALA , KDBASVALW , KDBASUNIT , KDBASBASE , KDBGER 
			FROM KPOPT WHERE KDBID = CODEOPTION ) ; 
			 
			CALL SP_CKPOPTD ( P_CODEOFFRE , P_VERSION , P_TYPE , CODEOPTION , V_NEWCODEOPTION , 
				P_NEWVERSION , P_CODECONTRAT , P_VERSIONCONTRAT , P_CODEFORMULE , P_DATESYSTEME , P_USER , P_TRAITEMENT , P_COPYCODEOFFRE , P_COPYVERSION , P_MODECOPY ) ; 
			 
			CALL SP_CPOPTAP ( P_CODEOFFRE , P_VERSION , P_TYPE , CODEOPTION , V_NEWCODEOPTION , 
				P_NEWVERSION , P_CODECONTRAT , P_VERSIONCONTRAT , P_DATESYSTEME , P_USER , P_TRAITEMENT , P_COPYCODEOFFRE , P_COPYVERSION ) ; 
		 
		END IF ; 
	END FOR ; 
  
END P1  ; 
  

  

