CREATE OR REPLACE PROCEDURE SP_COPYRSQ( 
	IN P_CODEOFFRE CHAR(9) , 
	IN P_VERSION INTEGER , 
	IN P_TYPE CHAR(1) , 
	IN P_CODERSQ INTEGER , 
	IN P_USER CHAR(10) , 
	IN P_DATESYSTEM NUMERIC(10, 0) , 
	IN P_BNSPB CHAR(8) , 
	OUT P_NEWCODERSQ INTEGER ) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC SP_COPYRSQ 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = ZALBINKHEO , 
	DYNDFTCOL = *YES , 
	DYNUSRPRF = *USER , 
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC 
  
DECLARE V_AVENANT DECIMAL DEFAULT 0 ; 
DECLARE V_AVENANTANNEE INTEGER DEFAULT 0 ; 
DECLARE V_AVENANTMOIS INTEGER DEFAULT 0 ; 
DECLARE V_AVENANTJOUR INTEGER DEFAULT 0 ; 
DECLARE V_AVENANTHEURE INTEGER DEFAULT 0 ; 
DECLARE V_AVENANTDATE INTEGER DEFAULT 0 ; 
  
DECLARE V_COUNTRSQ INTEGER DEFAULT 0 ; 
DECLARE V_NEWCODERSQ INTEGER DEFAULT 0 ; 
DECLARE V_COUNTTRACEAVN INTEGER DEFAULT 0 ; 
DECLARE V_TRACEAVNID INTEGER DEFAULT 0 ; 
  
DECLARE V_CHRONODESI INTEGER DEFAULT 0 ; 
DECLARE V_DESIGNATION CHAR ( 5000 ) DEFAULT '' ; 
DECLARE V_CHRONOOBSV INTEGER DEFAULT 0 ; 
DECLARE V_TYPEOBS CHAR ( 10 ) DEFAULT '' ; 
DECLARE V_OBSERVATION CHAR ( 5000 ) DEFAULT '' ; 
DECLARE V_CHRONOCLAUSE INTEGER DEFAULT 0 ; 
  
DECLARE V_OLDCODEFORMULE INTEGER DEFAULT 0 ; 
DECLARE V_NEWIDFORMULE INTEGER DEFAULT 0 ; 
DECLARE V_NEWALPHAFORMULE CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_NEWCODEFORMULE INTEGER DEFAULT 0 ; 
  
DECLARE V_NEWIDOPTION INTEGER DEFAULT 0 ; 
DECLARE V_NEWIDOPTAP INTEGER DEFAULT 0 ; 
DECLARE V_NEWIDOPTDETAIL INTEGER DEFAULT 0 ; 
DECLARE V_NEWIDGARANTIE INTEGER DEFAULT 0 ; 
DECLARE V_NEWIDGARTAR INTEGER DEFAULT 0 ; 
  
DECLARE V_ASVAL NUMERIC ( 15 , 4 ) DEFAULT 0 ; 
DECLARE V_ASUNIT CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_ASBASE CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_ASMOD CHAR ( 1 ) DEFAULT 'N' ; 
DECLARE V_ASOBL CHAR ( 1 ) DEFAULT 'N' ; 
DECLARE V_ASALA CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_LCIVAL NUMERIC ( 15 , 4 ) DEFAULT 0 ; 
DECLARE V_LCIUNIT CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_LCIBASE CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_LCIMOD CHAR ( 1 ) DEFAULT 'N' ; 
DECLARE V_LCIOBL CHAR ( 1 ) DEFAULT 'N' ; 
DECLARE V_FRHVAL NUMERIC ( 15 , 4 ) DEFAULT 0 ; 
DECLARE V_FRHUNIT CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_FRHBASE CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_FRHMOD CHAR ( 1 ) DEFAULT 'N' ; 
DECLARE V_FRHOBL CHAR ( 1 ) DEFAULT 'N' ; 
DECLARE V_PRIVAL NUMERIC ( 15 , 4 ) DEFAULT 0 ; 
DECLARE V_PRIUNIT CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_PRIBASE CHAR ( 3 ) DEFAULT '' ; 
DECLARE V_PRIMOD CHAR ( 1 ) DEFAULT 'N' ; 
DECLARE V_PRIOBL CHAR ( 1 ) DEFAULT 'N' ; 
  
DECLARE V_GARIND CHAR ( 1 ) DEFAULT 'N' ; 
DECLARE V_CATNAT CHAR ( 1 ) DEFAULT 'N' ; 
DECLARE V_MNTREF CHAR ( 1 ) DEFAULT 'N' ; 
DECLARE V_CODTAX CHAR ( 1 ) DEFAULT '' ; 
DECLARE V_DEFGAR CHAR ( 1 ) DEFAULT '' ; 
  
  
SET P_CODEOFFRE = LPAD ( TRIM ( P_CODEOFFRE ) , 9 , ' ' ) ; 
  
--Check si le risque existe en base 
SELECT COUNT ( * ) INTO V_COUNTRSQ FROM YPRTRSQ WHERE JEIPB = P_CODEOFFRE AND JEALX = P_VERSION AND JERSQ = P_CODERSQ ; 
IF ( V_COUNTRSQ = 1 ) THEN 
	 --Récupération des données avenants 
	SELECT PBAVN , PBAVA , PBAVM , PBAVJ , KAAAVH INTO V_AVENANT , V_AVENANTANNEE , V_AVENANTMOIS , V_AVENANTJOUR , V_AVENANTHEURE FROM YPOBASE 
	INNER JOIN KPENT ON PBIPB = KAAIPB AND PBALX = KAAALX AND PBTYP = KAATYP 
	WHERE PBIPB = P_CODEOFFRE AND PBALX = P_VERSION AND PBTYP = P_TYPE ; 
  
	IF ( V_AVENANT = 0 ) THEN 
		SET V_AVENANTANNEE = 0 ; 
		SET V_AVENANTMOIS = 0 ; 
		SET V_AVENANTJOUR = 0 ; 
		SET V_AVENANTHEURE = 0 ; 
	END IF ; 
	 
	SET V_AVENANTDATE = CAST ( ( V_AVENANTANNEE CONCAT LPAD ( V_AVENANTMOIS , 2 , '0' ) CONCAT LPAD ( V_AVENANTJOUR , 2 , '0' ) ) AS INTEGER ) ; 
  
	 --Nouveau code risque à insérer 
	SELECT ( IFNULL ( MAX ( JERSQ ) , 0 ) + 1 ) INTO V_NEWCODERSQ FROM YPRTRSQ WHERE JEIPB = P_CODEOFFRE AND JEALX = P_VERSION ; 
	 
	 -- INSERTION dans KPDESI 
	CALL SP_NCHRONO ( 'KADCHR' , V_CHRONODESI ) ; 
	SELECT KADDESI INTO V_DESIGNATION FROM KPRSQ INNER JOIN KPDESI ON KABDESI = KPDESI . KADCHR WHERE KABIPB = P_CODEOFFRE AND KABALX = P_VERSION AND KABRSQ = P_CODERSQ ; 
	 
	INSERT INTO KPDESI 
		( KADIPB , KADALX , KADCHR , KADTYP , KADRSQ , KADDESI ) 
	VALUES 
	( P_CODEOFFRE , P_VERSION , V_CHRONODESI , P_TYPE , V_NEWCODERSQ , V_DESIGNATION ) ; 
  
	 -- INSERTION dans KPOBSV 
	CALL SP_NCHRONO ( 'KAJCHR' , V_CHRONOOBSV ) ; 
	SELECT KAJTYPOBS , KAJOBSV INTO V_TYPEOBS , V_OBSERVATION FROM KPRSQ INNER JOIN KPOBSV ON KABOBSV = KPOBSV . KAJCHR WHERE KABIPB = P_CODEOFFRE AND KABALX = P_VERSION AND KABRSQ = P_CODERSQ ; 
	 
	INSERT INTO KPOBSV 
		( KAJIPB , KAJALX , KAJCHR , KAJTYP , KAJTYPOBS , KAJOBSV ) 
	VALUES 
	( P_CODEOFFRE , P_VERSION , V_CHRONOOBSV , P_TYPE , V_TYPEOBS , V_OBSERVATION ) ; 
	 
	 --INSERTION dans KPRSQ et YPRTRSQ 
	 
	IF ( P_BNSPB = 'True' ) THEN 
		INSERT INTO YPRTRSQ ( JEIPB , JEALX , JERSQ , JECCH , JEDRO , JENBO , JEMGD , JEBRA , JESBR , JECAT , JECCS , JERCS , JEOBJ , JEROJ , JERGT , JETRR , JECNA , JELCV , JELCA , JELCW , JELCU , JELCE , JERUL , JERUT , JEAVE , JEAVA , JEAVM , JEAVJ , JEAVF , JEVDA , JEVDM , JEVDJ , JEVDH , JEPBN, JEPBT, JEPBC, JEPBA, JEPBS, JEPBR, JEPBP ) 
	     SELECT JEIPB , JEALX , V_NEWCODERSQ , V_NEWCODERSQ , JEDRO , JENBO , JEMGD , JEBRA , JESBR , JECAT , JECCS , JERCS , JEOBJ , JEROJ , JERGT , JETRR , JECNA , JELCV , JELCA , JELCW , JELCU , JELCE , JERUL , JERUT , V_AVENANT , V_AVENANTANNEE , V_AVENANTMOIS , V_AVENANTJOUR , V_AVENANT , V_AVENANTANNEE , V_AVENANTMOIS , V_AVENANTJOUR , TRUNCATE ( V_AVENANTHEURE / 100 ), JEPBN, JEPBT, JEPBC, JEPBA, JEPBS, JEPBR, JEPBP 
	     FROM YPRTRSQ 
	     WHERE JEIPB = P_CODEOFFRE AND JEALX = P_VERSION AND JERSQ = P_CODERSQ ; 
	END IF ;
	IF ( P_BNSPB = 'False' ) THEN 
		INSERT INTO YPRTRSQ ( JEIPB , JEALX , JERSQ , JECCH , JEDRO , JENBO , JEMGD , JEBRA , JESBR , JECAT , JECCS , JERCS , JEOBJ , JEROJ , JERGT , JETRR , JECNA , JELCV , JELCA , JELCW , JELCU , JELCE , JERUL , JERUT , JEAVE , JEAVA , JEAVM , JEAVJ , JEAVF , JEVDA , JEVDM , JEVDJ , JEVDH )  --, JEPBN, JEPBT, JEPBC, JEPBA, JEPBS, JEPBR, JEPBP ) 
	     SELECT JEIPB , JEALX , V_NEWCODERSQ , V_NEWCODERSQ , JEDRO , JENBO , JEMGD , JEBRA , JESBR , JECAT , JECCS , JERCS , JEOBJ , JEROJ , JERGT , JETRR , JECNA , JELCV , JELCA , JELCW , JELCU , JELCE , JERUL , JERUT , V_AVENANT , V_AVENANTANNEE , V_AVENANTMOIS , V_AVENANTJOUR , V_AVENANT , V_AVENANTANNEE , V_AVENANTMOIS , V_AVENANTJOUR , TRUNCATE ( V_AVENANTHEURE / 100 )  -- , JEPBN, JEPBT, JEPBC, JEPBA, JEPBS, JEPBR, JEPBP 
	     FROM YPRTRSQ 
	     WHERE JEIPB = P_CODEOFFRE AND JEALX = P_VERSION AND JERSQ = P_CODERSQ ; 
	END IF; 

	 
	INSERT INTO KPRSQ ( KABTYP , KABIPB , KABALX , KABRSQ , KABDESI , KABOBSV , KABCIBLE , KABDESC , KABREPVAL , KABREPOBL , KABAPE , KABTRE , KABCLASS , KABNMC01 , KABNMC02 , KABNMC03 , KABNMC04 , KABNMC05 , 
	KABLCIVALO , KABLCIVALA , KABLCIVALW , KABLCIUNIT , KABLCIBASE , KABKDIID , KABFRHVALO , KABFRHVALA , KABFRHVALW , KABFRHUNIT , KABFRHBASE , KABKDKID , KABNSIR ) 
	SELECT KABTYP , KABIPB , KABALX , V_NEWCODERSQ , V_CHRONODESI , 0 , KABCIBLE , KABDESC , KABREPVAL , KABREPOBL , KABAPE , KABTRE , KABCLASS , KABNMC01 , KABNMC02 , KABNMC03 , KABNMC04 , KABNMC05 , 
	KABLCIVALO , KABLCIVALA , KABLCIVALW , KABLCIUNIT , KABLCIBASE , KABKDIID , KABFRHVALO , KABFRHVALA , KABFRHVALW , KABFRHUNIT , KABFRHBASE , KABKDKID , KABNSIR 
	FROM KPRSQ 
	WHERE KABIPB = P_CODEOFFRE AND KABALX = P_VERSION AND KABRSQ = P_CODERSQ ; 
  
	SELECT COUNT ( * ) INTO V_COUNTTRACEAVN FROM KPAVTRC 
	WHERE KHOTYP = P_TYPE AND KHOIPB = P_CODEOFFRE AND KHOALX = P_VERSION 
	AND KHOPERI = 'RSQ' AND KHORSQ = V_NEWCODERSQ AND KHOETAPE = '**********' ; 
	IF ( V_COUNTTRACEAVN = 0 ) THEN 
		CALL SP_NCHRONO ( 'KHOID' , V_TRACEAVNID ) ; 
		INSERT INTO KPAVTRC ( KHOID , KHOTYP , KHOIPB , KHOALX , KHOPERI , KHORSQ , KHOOBJ , KHOFOR , KHOOPT , KHOETAPE , KHOCHAM , KHOACT , KHOANV , KHONVV , KHOAVO , KHOOEF , KHOCRU , KHOCRD , KHOCRH ) 
		VALUES ( V_TRACEAVNID , P_TYPE , P_CODEOFFRE , P_VERSION , 'RSQ' , V_NEWCODERSQ , 0 , 0 , 0 , '**********' , '' , 'C' , '' , '' , 'O' , '' , P_USER , P_DATESYSTEM , 0 ) ; 
	END IF ; 
  
	FOR V_CLAUSERSQ AS SELECT KCAID 
	FROM KPCLAUSE 
	WHERE KCAIPB = P_CODEOFFRE AND KCAALX = P_VERSION AND KCAETAFF = 'RSQ' AND KCARSQ = P_CODERSQ 
	DO 
		 -- Nouvel identifiant pour la clause 
		CALL SP_NCHRONO ( 'KCAID' , V_CHRONOCLAUSE ) ; 
		 
		 -- Insertion dans KPCLAUSE 
		INSERT INTO KPCLAUSE ( KCAID , KCATYP , KCAIPB , KCAALX , KCARSQ , KCAOBJ , KCAINVEN , KCAINLGN , KCAFOR , KCAOPT , KCAGAR , 
		KCAETAPE , KCAPERI , KCACTX , KCAAJT , KCANTA , KCAKDUID , KCACLNM1 , KCACLNM2 , KCACLNM3 , KCAVER , KCATXL , KCAMER , KCADOC , 
		KCACHI , KCACHIS , KCAIMP , KCACXI , KCAIAN , KCAIAC , KCASIT , KCASITD , KCASPA , KCATYPO , KCAAIM , KCATAE , KCAELGO , KCAELGI , 
		KCAXTL , KCATYPD , KCAETAFF , KCAXTLM , KCACRD , KCAMAJD , KCAAVNC , KCAAVNM ) 
		SELECT V_CHRONOCLAUSE , KCATYP , KCAIPB , KCAALX , V_NEWCODERSQ , 0 , 0 , 0 , 0 , 0 , '' , KCAETAPE , KCAPERI , KCACTX , KCAAJT , 
		KCANTA , KCAKDUID , KCACLNM1 , KCACLNM2 , KCACLNM3 , KCAVER , KCATXL , KCAMER , KCADOC , KCACHI , KCACHIS , KCAIMP , KCACXI , 
		KCAIAN , KCAIAC , KCASIT , KCASITD , KCASPA , KCATYPO , KCAAIM , KCATAE , KCAELGO , KCAELGI , KCAXTL , KCATYPD , KCAETAFF , 
		KCAXTLM , P_DATESYSTEM , P_DATESYSTEM , V_AVENANT , V_AVENANT 
		FROM KPCLAUSE 
		WHERE KCAID = V_CLAUSERSQ . KCAID ; 
	END FOR ; 
	 
	 --Boucle sur les objets 
	FOR V_OBJET AS SELECT JGOBJ 
	FROM YPRTOBJ 
	 --INNER JOIN KPOBJ ON KPOBJ.KACIPB = JGIPB AND KPOBJ.KACALX = JGALX AND KPOBJ.KACRSQ = JGRSQ AND KPOBJ.KACOBJ = JGOBJ 
	WHERE JGIPB = P_CODEOFFRE AND JGALX = P_VERSION AND JGRSQ = P_CODERSQ 
	DO 
		 -- INSERTION dans KPDESI pour l'objet 
		CALL SP_NCHRONO ( 'KADCHR' , V_CHRONODESI ) ; 
		SELECT KADDESI INTO V_DESIGNATION FROM KPOBJ INNER JOIN KPDESI ON KACDESI = KPDESI . KADCHR WHERE KACIPB = P_CODEOFFRE AND KACALX = P_VERSION AND KACRSQ = P_CODERSQ AND KACOBJ = V_OBJET . JGOBJ ; 
	 
		INSERT INTO KPDESI 
			( KADIPB , KADALX , KADCHR , KADTYP , KADRSQ , KADOBJ , KADDESI ) 
		VALUES 
		( P_CODEOFFRE , P_VERSION , V_CHRONODESI , P_TYPE , V_NEWCODERSQ , V_OBJET . JGOBJ , V_DESIGNATION ) ; 
  
		 -- INSERTION dans KPOBSV pour l'objet 
		CALL SP_NCHRONO ( 'KAJCHR' , V_CHRONOOBSV ) ; 
		SELECT KAJTYPOBS , KAJOBSV INTO V_TYPEOBS , V_OBSERVATION FROM KPOBJ INNER JOIN KPOBSV ON KACOBSV = KPOBSV . KAJCHR WHERE KACIPB = P_CODEOFFRE AND KACALX = P_VERSION AND KACRSQ = P_CODERSQ AND KACOBJ = V_OBJET . JGOBJ ; 
	 
		INSERT INTO KPOBSV 
			( KAJIPB , KAJALX , KAJCHR , KAJTYP , KAJTYPOBS , KAJOBSV ) 
		VALUES 
		( P_CODEOFFRE , P_VERSION , V_CHRONOOBSV , P_TYPE , V_TYPEOBS , V_OBSERVATION ) ; 
	 
		 --INSERTION dans KPOBJ et YPRTOBJ 
		
		
		INSERT INTO YPRTOBJ ( JGIPB , JGALX , JGRSQ , JGOBJ , JGCCH , JGIGD , JGBRA , JGSBR , JGCAT , JGRCS , JGCCS , JGRGT , JGTRR , JGCNA , JGRUT , JGRUL , 
		JGAVE , JGAVA , JGAVM , JGAVJ , JGAVF , JGVDA , JGVDM , JGVDJ , JGVDH ) 
		SELECT JGIPB , JGALX , V_NEWCODERSQ , JGOBJ , JGCCH , JGIGD , JGBRA , JGSBR , JGCAT , JGRCS , JGCCS , JGRGT , JGTRR , JGCNA , JGRUT , JGRUL , 
		V_AVENANT , V_AVENANTANNEE , V_AVENANTMOIS , V_AVENANTJOUR , V_AVENANT , V_AVENANTANNEE , V_AVENANTMOIS , V_AVENANTJOUR , TRUNCATE ( V_AVENANTHEURE / 100 ) 
		FROM YPRTOBJ 
		WHERE JGIPB = P_CODEOFFRE AND JGALX = P_VERSION AND JGRSQ = P_CODERSQ AND JGOBJ = V_OBJET . JGOBJ ; 
	
		
		INSERT INTO KPOBJ ( KACTYP , KACIPB , KACALX , KACRSQ , KACOBJ , KACDESI , KACOBSV , KACINVEN , KACCIBLE , KACDESC , KACAPE , KACTRE , KACCLASS , KACNMC01 , KACNMC02 , KACNMC03 , KACNMC04 , KACNMC05 , 
		KACLCIVALO , KACLCIVALA , KACLCIVALW , KACLCIUNIT , KACLCIBASE , KACKDIID , KACFRHVALO , KACFRHVALA , KACFRHVALW , KACFRHUNIT , KACFRHBASE , KACKDKID , KACNSIR ) 
		SELECT KACTYP , KACIPB , KACALX , V_NEWCODERSQ , KACOBJ , V_CHRONODESI , V_CHRONOOBSV , 0 , KACCIBLE , KACDESC , KACAPE , KACTRE , KACCLASS , KACNMC01 , KACNMC02 , KACNMC03 , KACNMC04 , KACNMC05 , 
		KACLCIVALO , KACLCIVALA , KACLCIVALW , KACLCIUNIT , KACLCIBASE , KACKDIID , KACFRHVALO , KACFRHVALA , KACFRHVALW , KACFRHUNIT , KACFRHBASE , KACKDKID , KACNSIR 
		FROM KPOBJ 
		WHERE KACIPB = P_CODEOFFRE AND KACALX = P_VERSION AND KACRSQ = P_CODERSQ AND KACOBJ = V_OBJET . JGOBJ ; 
  
		FOR V_CLAUSEOBJ AS SELECT KCAID 
		FROM KPCLAUSE 
		WHERE KCAIPB = P_CODEOFFRE AND KCAALX = P_VERSION AND KCAETAFF = 'OBJ' AND KCARSQ = P_CODERSQ AND KCAOBJ = V_OBJET . JGOBJ 
		DO 
			 -- Nouvel identifiant pour la clause 
			CALL SP_NCHRONO ( 'KCAID' , V_CHRONOCLAUSE ) ; 
			 
			 -- Insertion dans KPCLAUSE 
			INSERT INTO KPCLAUSE ( KCAID , KCATYP , KCAIPB , KCAALX , KCARSQ , KCAOBJ , KCAINVEN , KCAINLGN , KCAFOR , KCAOPT , KCAGAR , 
			KCAETAPE , KCAPERI , KCACTX , KCAAJT , KCANTA , KCAKDUID , KCACLNM1 , KCACLNM2 , KCACLNM3 , KCAVER , KCATXL , KCAMER , KCADOC , 
			KCACHI , KCACHIS , KCAIMP , KCACXI , KCAIAN , KCAIAC , KCASIT , KCASITD , KCASPA , KCATYPO , KCAAIM , KCATAE , KCAELGO , KCAELGI , 
			KCAXTL , KCATYPD , KCAETAFF , KCAXTLM , KCACRD , KCAMAJD , KCAAVNC , KCAAVNM ) 
			SELECT V_CHRONOCLAUSE , KCATYP , KCAIPB , KCAALX , V_NEWCODERSQ , V_OBJET . JGOBJ , 0 , 0 , 0 , 0 , '' , KCAETAPE , KCAPERI , KCACTX , KCAAJT , 
			KCANTA , KCAKDUID , KCACLNM1 , KCACLNM2 , KCACLNM3 , KCAVER , KCATXL , KCAMER , KCADOC , KCACHI , KCACHIS , KCAIMP , KCACXI , 
			KCAIAN , KCAIAC , KCASIT , KCASITD , KCASPA , KCATYPO , KCAAIM , KCATAE , KCAELGO , KCAELGI , KCAXTL , KCATYPD , KCAETAFF , 
			KCAXTLM , P_DATESYSTEM , P_DATESYSTEM , V_AVENANT , V_AVENANT 
			FROM KPCLAUSE 
			WHERE KCAID = V_CLAUSEOBJ . KCAID ; 
		END FOR ; 
		 
	END FOR ; 
	 
	 --BOUCLE sur les Formules 
	FOR V_FORMULE AS SELECT DISTINCT KDBKDAID FROM KPOPTAP 
	INNER JOIN KPOPT ON KPOPT . KDBID = KDDKDBID 
	WHERE KDDIPB = P_CODEOFFRE AND KDDALX = P_VERSION AND KDDRSQ = P_CODERSQ 
	DO 
		 -- Nouveau identifiant pour la création de formule 
		CALL SP_NCHRONO ( 'KDAID' , V_NEWIDFORMULE ) ; 
		SELECT CHR ( ASCII ( IFNULL ( MAX ( KDAALPHA ) , '@' ) ) + 1 ) INTO V_NEWALPHAFORMULE FROM KPFOR WHERE KDAIPB = P_CODEOFFRE AND KDAALX = P_VERSION ; 
		SELECT ( IFNULL ( MAX ( KDAFOR ) , 0 ) + 1 ) INTO V_NEWCODEFORMULE FROM KPFOR WHERE KDAIPB = P_CODEOFFRE AND KDAALX = P_VERSION ; 
  
		SELECT KDAFOR INTO V_OLDCODEFORMULE FROM KPFOR WHERE KDAID = V_FORMULE . KDBKDAID ; 
	 
		 -- INSERTION dans KPFOR 
		INSERT INTO KPFOR ( KDAID , KDATYP , KDAIPB , KDAALX , KDAFOR , KDACCH , KDAALPHA , KDABRA , KDACIBLE , KDAKAIID , KDADESC , KDACRU , KDACRD , KDAMAJU , KDAMAJD ) 
		SELECT V_NEWIDFORMULE , KDATYP , KDAIPB , KDAALX , V_NEWCODEFORMULE , V_NEWCODEFORMULE , V_NEWALPHAFORMULE , KDABRA , KDACIBLE , KDAKAIID , KDADESC , P_USER , P_DATESYSTEM , P_USER , P_DATESYSTEM 
		FROM KPFOR 
		WHERE KDAID = V_FORMULE . KDBKDAID ; 
		 
		 -- Boucle sur les options 
		FOR V_OPTION AS SELECT KDBID , KDBOPT FROM KPOPT 
		WHERE KDBKDAID = V_FORMULE . KDBKDAID 
		DO 
			 -- Nouveaux identifiants pour la création d'option 
			CALL SP_NCHRONO ( 'KDBID' , V_NEWIDOPTION ) ; 
	 
			 -- INSERTION DANS KPOPT 
			INSERT INTO KPOPT ( KDBID , KDBTYP , KDBIPB , KDBALX , KDBFOR , KDBOPT , KDBKDAID , KDBDESC , KDBECO , KDBCRU , KDBCRD , KDBMAJU , KDBMAJD , KDBASVALA , KDBASVALO , KDBASVALW , KDBASUNIT , KDBASBASE , KDBAVE , KDBAVA , KDBAVM , KDBAVJ , KDBAVG ) 
			SELECT V_NEWIDOPTION , KDBTYP , KDBIPB , KDBALX , V_NEWCODEFORMULE , KDBOPT , V_NEWIDFORMULE , KDBDESC , KDBECO , P_USER , P_DATESYSTEM , P_USER , P_DATESYSTEM , KDBASVALA , KDBASVALO , KDBASVALW , KDBASUNIT , KDBASBASE , V_AVENANT , V_AVENANTANNEE , V_AVENANTMOIS , V_AVENANTJOUR , V_AVENANT 
			FROM KPOPT 
			WHERE KDBID = V_OPTION . KDBID ; 
			 
			 --Boucle sur les liens options risques/objets 
			FOR V_OPTAP AS SELECT KDDID 
			FROM KPOPTAP 
			WHERE KDDKDBID = V_OPTION . KDBID 
			DO 
				 -- Nouveaux identifiants pour la création d'option 
				CALL SP_NCHRONO ( 'KDDID' , V_NEWIDOPTAP ) ; 
  
				 -- INSERTION DANS KPTOPTAP 
				INSERT INTO KPOPTAP ( KDDID , KDDTYP , KDDIPB , KDDALX , KDDFOR , KDDOPT , KDDKDBID , KDDPERI , KDDRSQ , KDDOBJ , KDDINVEN , KDDINVEP , KDDCRU , KDDCRD , KDDMAJU , KDDMAJD ) 
				SELECT V_NEWIDOPTAP , KDDTYP , KDDIPB , KDDALX , V_NEWCODEFORMULE , KDDOPT , V_NEWIDOPTION , KDDPERI , V_NEWCODERSQ , KDDOBJ , 0 , 0 , P_USER , P_DATESYSTEM , P_USER , P_DATESYSTEM 
				FROM KPOPTAP 
				WHERE KDDID = V_OPTAP . KDDID ; 
  
			END FOR ; 
			 
			 -- Boucle sur les détails d'option 
			FOR V_OPTDETAIL AS SELECT KDCID 
			FROM KPOPTD 
			WHERE KDCKDBID = V_OPTION . KDBID 
			DO 
				 -- Nouveaux identifiants pour la création de détails 
				CALL SP_NCHRONO ( 'KDCID' , V_NEWIDOPTDETAIL ) ; 
				 
				 -- INSERTION DANS KPOPTD 
				INSERT INTO KPOPTD ( KDCID , KDCTYP , KDCIPB , KDCALX , KDCFOR , KDCOPT , KDCKDBID , KDCTENG , KDCKAKID , KDCKAEID , KDCKAQID , KDCMODELE , KDCKARID , KDCORDRE , KDCFLAG , KDCCRU , KDCCRD , KDCMAJU , KDCMAJD ) 
				SELECT V_NEWIDOPTDETAIL , KDCTYP , KDCIPB , KDCALX , V_NEWCODEFORMULE , KDCOPT , V_NEWIDOPTION , KDCTENG , KDCKAKID , KDCKAEID , KDCKAQID , KDCMODELE , KDCKARID , KDCORDRE , KDCFLAG , P_USER , P_DATESYSTEM , P_USER , P_DATESYSTEM 
				FROM KPOPTD 
				WHERE KDCID = V_OPTDETAIL . KDCID ; 
				 
				 -- Boucle sur les garanties 
				FOR V_GARANTIE AS SELECT KDEID , KDESEQ 
				FROM KPGARAN 
				WHERE KDEKDCID = V_OPTDETAIL . KDCID 
				DO 
					 -- Nouveaux identifiants pour la création de garantie 
					CALL SP_NCHRONO ( 'KDEID' , V_NEWIDGARANTIE ) ; 
  
					 -- Récupération des paramètres de base 
					SELECT C4BAS , C4UNT , C4VAL , C4MAJ , C4OBL , C4ALA INTO V_ASBASE , V_ASUNIT , V_ASVAL , V_ASMOD , V_ASOBL , V_ASALA FROM ZALBINKMOD . YPLTGAL WHERE C4SEQ = V_GARANTIE . KDESEQ AND C4TYP = 0 ; 
					SELECT C4BAS , C4UNT , C4VAL , C4MAJ , C4OBL INTO V_PRIBASE , V_PRIUNIT , V_PRIVAL , V_PRIMOD , V_PRIOBL FROM ZALBINKMOD . YPLTGAL WHERE C4SEQ = V_GARANTIE . KDESEQ AND C4TYP = 1 ; 
					SELECT C4BAS , C4UNT , C4VAL , C4MAJ , C4OBL INTO V_LCIBASE , V_LCIUNIT , V_LCIVAL , V_LCIMOD , V_LCIOBL FROM ZALBINKMOD . YPLTGAL WHERE C4SEQ = V_GARANTIE . KDESEQ AND C4TYP = 2 ; 
					SELECT C4BAS , C4UNT , C4VAL , C4MAJ , C4OBL INTO V_FRHBASE , V_FRHUNIT , V_FRHVAL , V_FRHMOD , V_FRHOBL FROM ZALBINKMOD . YPLTGAL WHERE C4SEQ = V_GARANTIE . KDESEQ AND C4TYP = 3 ; 
					 --SELECT C2INA, C2CNA, C2MRF, C2TAX, GADFG INTO V_GARIND , V_CATNAT, V_MNTREF, V_CODTAX, V_DEFGAR 
					 --FROM YPLTGAR 
					 --LEFT JOIN KGARAN ON GAGAR = C2GAR 
					 --WHERE C2SEQ = V_GARANTIE . KDESEQ; 
					 -- INSERTION dans KPGARAN 
					INSERT INTO KPGARAN ( KDEID , KDETYP , KDEIPB , KDEALX , KDEFOR , KDEOPT , KDEKDCID , KDEKDFID , KDEKDHID , KDEINVEN , KDEGARAN , KDESEQ , KDENIVEAU , KDESEM , KDESE1 , 
					KDETRI , KDENUMPRES , KDEAJOUT , KDECAR , KDENAT , KDEGAN , KDEDEFG , KDEDATDEB , KDEHEUDEB , KDEDATFIN , KDEHEUFIN , KDEDUREE , KDEDURUNI , KDEPRP , KDETYPEMI , KDEALIREF , 
					KDECATNAT , KDEINA , KDETAXCOD , KDETAXREP , KDEASVALO , KDEASVALA , KDEASVALW , KDEASBASE , KDEASUNIT , KDEASMOD , KDEASOBLI , KDEINVSP , KDEWDDEB , KDEWHDEB , 
					KDEWDFIN , KDEWHFIN , KDETCD , KDEMODI , KDEPIND , KDEPCATN , KDEPREF , KDEPPRP , KDEPEMI , KDEPTAXC , KDEPNTM , KDEALA , KDEPALA , KDEALO , KDECRU , KDECRD , KDECRAVN , KDEMAJAVN ) 
					SELECT V_NEWIDGARANTIE , KDETYP , KDEIPB , KDEALX , V_NEWCODEFORMULE , KDEOPT , V_NEWIDOPTDETAIL , 0 , 0 , 0 , KDEGARAN , KDESEQ , KDENIVEAU , KDESEM , KDESE1 , 
					KDETRI , KDENUMPRES , KDEAJOUT , KDECAR , KDENAT , KDEGAN , KDEDEFG , KDEDATDEB , KDEHEUDEB , KDEDATFIN , KDEHEUFIN , KDEDUREE , KDEDURUNI , KDEPRP , KDETYPEMI , KDEALIREF , 
					KDECATNAT , KDEINA , KDETAXCOD , KDETAXREP , V_ASVAL , V_ASVAL , V_ASVAL , V_ASBASE , V_ASUNIT , V_ASMOD , V_ASOBL , KDEINVSP , KDEWDDEB , KDEWHDEB , 
					KDEWDFIN , KDEWHFIN , KDETCD , KDEMODI , KDEPIND , KDEPCATN , KDEPREF , KDEPPRP , KDEPEMI , KDEPTAXC , KDEPNTM , KDEALA , KDEPALA , KDEALO , P_USER , P_DATESYSTEM , V_AVENANT , V_AVENANT 
					FROM KPGARAN 
					WHERE KDEID = V_GARANTIE . KDEID ; 
					 
					 -- Boucle sur les conditions tarifaires 
					FOR V_GARTAR AS SELECT KDGID 
					FROM KPGARTAR 
					WHERE KDGKDEID = V_GARANTIE . KDEID 
					DO 
						 -- Nouveaux identifiants pour la création de conditions tarifaires 
						CALL SP_NCHRONO ( 'KDGID' , V_NEWIDGARTAR ) ; 
						 
						 -- INSERTION dans KPGARTAR 
						INSERT INTO KPGARTAR ( KDGID , KDGTYP , KDGIPB , KDGALX , KDGFOR , KDGOPT , KDGKDEID , KDGGARAN , KDGNUMTAR , KDGLCIMOD , KDGLCIOBL , KDGLCIVALA , KDGLCIVALO , KDGLCIVALW , 
						KDGLCIBASE , KDGLCIUNIT , KDGKDIID , KDGFRHMOD , KDGFRHOBL , KDGFRHVALA , KDGFRHVALO , KDGFRHVALW , KDGFRHBASE , KDGFRHUNIT , KDGKDKID , KDGFMIVALA , KDGFMIVALO , KDGFMIVALW , 
						KDGFMIBASE , KDGFMIUNIT , KDGPRIMOD , KDGPRIOBL , KDGPRIVALA , KDGPRIVALO , KDGPRIVALW , KDGPRIUNIT , KDGPRIBASE , KDGMNTBASE , KDGPRIMPRO , KDGTMC , KDGTFF , KDGCMC , 
						KDGCHT , KDGCTT ) 
						SELECT V_NEWIDGARTAR , KDGTYP , KDGIPB , KDGALX , V_NEWCODEFORMULE , KDGOPT , V_NEWIDGARANTIE , KDGGARAN , KDGNUMTAR , V_LCIMOD , V_LCIOBL , V_LCIVAL , V_LCIVAL , V_LCIVAL , 
						V_LCIBASE , V_LCIUNIT , KDGKDIID , V_FRHMOD , V_FRHOBL , V_FRHVAL , V_FRHVAL , V_FRHVAL , V_FRHBASE , V_FRHUNIT , KDGKDKID , KDGFMIVALA , KDGFMIVALO , KDGFMIVALW , 
						KDGFMIBASE , KDGFMIUNIT , V_PRIMOD , V_PRIOBL , V_PRIVAL , V_PRIVAL , V_PRIVAL , V_PRIUNIT , V_PRIBASE , KDGMNTBASE , 0 , KDGTMC , KDGTFF , KDGCMC , 
						KDGCHT , KDGCTT 
						FROM KPGARTAR 
						WHERE KDGID = V_GARTAR . KDGID ; 
						 
					END FOR ; 
					 
				END FOR ; 
			 
			END FOR ; 
  
			FOR V_CLAUSEOPT AS SELECT KCAID 
			FROM KPCLAUSE 
			WHERE KCAIPB = P_CODEOFFRE AND KCAALX = P_VERSION AND KCAETAFF IN ( 'OPT' , 'GAR' ) AND KCAFOR = V_OLDCODEFORMULE AND KCAOPT = V_OPTION . KDBOPT 
			DO 
				 -- Nouvel identifiant pour la clause 
				CALL SP_NCHRONO ( 'KCAID' , V_CHRONOCLAUSE ) ; 
				 
				 -- Insertion dans KPCLAUSE 
				INSERT INTO KPCLAUSE ( KCAID , KCATYP , KCAIPB , KCAALX , KCARSQ , KCAOBJ , KCAINVEN , KCAINLGN , KCAFOR , KCAOPT , KCAGAR , 
				KCAETAPE , KCAPERI , KCACTX , KCAAJT , KCANTA , KCAKDUID , KCACLNM1 , KCACLNM2 , KCACLNM3 , KCAVER , KCATXL , KCAMER , KCADOC , 
				KCACHI , KCACHIS , KCAIMP , KCACXI , KCAIAN , KCAIAC , KCASIT , KCASITD , KCASPA , KCATYPO , KCAAIM , KCATAE , KCAELGO , KCAELGI , 
				KCAXTL , KCATYPD , KCAETAFF , KCAXTLM , KCACRD , KCAMAJD , KCAAVNC , KCAAVNM ) 
				SELECT V_CHRONOCLAUSE , KCATYP , KCAIPB , KCAALX , 0 , 0 , 0 , 0 , V_NEWCODEFORMULE , V_OPTION . KDBOPT , KCAGAR , KCAETAPE , KCAPERI , KCACTX , KCAAJT , 
				KCANTA , KCAKDUID , KCACLNM1 , KCACLNM2 , KCACLNM3 , KCAVER , KCATXL , KCAMER , KCADOC , KCACHI , KCACHIS , KCAIMP , KCACXI , 
				KCAIAN , KCAIAC , KCASIT , KCASITD , KCASPA , KCATYPO , KCAAIM , KCATAE , KCAELGO , KCAELGI , KCAXTL , KCATYPD , KCAETAFF , 
				KCAXTLM , P_DATESYSTEM , P_DATESYSTEM , V_AVENANT , V_AVENANT 
				FROM KPCLAUSE 
				WHERE KCAID = V_CLAUSEOPT . KCAID ; 
			END FOR ; 
			 
		END FOR ; 
	 
	END FOR ; 
	 
	SET P_NEWCODERSQ = V_NEWCODERSQ ; 
  
END IF ; 
  
  
END P1  ; 