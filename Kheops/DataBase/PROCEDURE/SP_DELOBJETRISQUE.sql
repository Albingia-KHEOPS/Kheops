CREATE PROCEDURE SP_DELOBJETRISQUE ( 
	IN P_CODEOFFRE CHAR(9) , 
	IN P_VERSION INTEGER , 
	IN P_TYPE CHAR(1) , 
	IN P_CODERSQ INTEGER , 
	IN P_CODEOBJ INTEGER , 
	IN P_DELRSQ INTEGER ) 
	LANGUAGE SQL 
	SPECIFIC SP_DELOBJETRISQUE 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	CLOSQLCSR = *ENDMOD , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = ZALBINKHEO , 
	DYNDFTCOL = *YES , 
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC 
  
	DECLARE V_DESI INTEGER DEFAULT 0 ; 
	DECLARE V_OBSV INTEGER DEFAULT 0 ; 
	DECLARE V_ADRCHRONORSQ INTEGER DEFAULT 0 ; 
	DECLARE V_ADRCHRONOOFFRE INTEGER DEFAULT 0 ; 
  
	DECLARE V_NBLIGNE INTEGER DEFAULT 0 ; 
	DECLARE V_RSQOBJ INTEGER DEFAULT 0 ; 
	DECLARE V_LASTOBJ INTEGER DEFAULT 0 ; 
	DECLARE V_JOURENTREE INTEGER DEFAULT 0 ; 
	DECLARE V_MOISENTREE INTEGER DEFAULT 0 ; 
	DECLARE V_ANNEEENTREE INTEGER DEFAULT 0 ; 
	DECLARE V_HEUREENTREE INTEGER DEFAULT 0 ; 
	DECLARE V_JOURSORTIE INTEGER DEFAULT 0 ; 
	DECLARE V_MOISSORTIE INTEGER DEFAULT 0 ; 
	DECLARE V_ANNEESORTIE INTEGER DEFAULT 0 ; 
	DECLARE V_HEURESORTIE INTEGER DEFAULT 0 ; 
	DECLARE V_TERRITORIALITE CHAR ( 3 ) DEFAULT '' ; 
	DECLARE V_CODEAPE CHAR ( 5 ) DEFAULT '' ; 
	DECLARE V_NOMENCLATURE1 CHAR ( 15 ) DEFAULT '' ; 
	DECLARE V_NOMENCLATURE2 CHAR ( 15 ) DEFAULT '' ; 
	DECLARE V_NOMENCLATURE3 CHAR ( 15 ) DEFAULT '' ; 
	DECLARE V_NOMENCLATURE4 CHAR ( 15 ) DEFAULT '' ; 
	DECLARE V_NOMENCLATURE5 CHAR ( 15 ) DEFAULT '' ; 
	DECLARE V_DESCRIPTIF CHAR ( 40 ) DEFAULT '' ; 
  
	DECLARE V_CODETRE CHAR ( 5 ) DEFAULT '' ; 
	DECLARE V_CODECLASSE CHAR ( 2 ) DEFAULT '' ; 
  
	DECLARE V_MINCODERSQ INTEGER DEFAULT 0 ; 
	DECLARE V_MINCODEOBJ INTEGER DEFAULT 0 ; 
  
	DECLARE V_RSQINA CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_RSQIXL CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_RSQIXF CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_RSQIXC CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_RSQRGT CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_RSQCNA CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_RSQPBT DECIMAL ( 2 , 0 ) DEFAULT 0 ; 
	DECLARE V_RSQRUL CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_RSQRUT CHAR ( 1 ) DEFAULT '' ; 
  
	DECLARE V_CODEFOR INTEGER DEFAULT 0 ; 
	DECLARE V_CODEFOR_FOR_RSQ INTEGER DEFAULT 0 ; 
	DECLARE V_COUNT_REMAINING_OBJECTS_FOR_FORMULE INTEGER DEFAULT 0 ; 
	DECLARE V_CODEOPT INTEGER DEFAULT 0 ; 
	DECLARE V_COUNT INTEGER DEFAULT 0 ; 
  
	DECLARE V_OBJADH INTEGER DEFAULT 0 ; 
	DECLARE V_OBJAD1 CHAR ( 32 ) DEFAULT '' ; 
	DECLARE V_OBJAD2 CHAR ( 32 ) DEFAULT '' ; 
	DECLARE V_OBJDEP CHAR ( 2 ) DEFAULT '' ; 
	DECLARE V_OBJCPO CHAR ( 3 ) DEFAULT '' ; 
	DECLARE V_OBJVIL CHAR ( 26 ) DEFAULT '' ; 
	DECLARE V_OBJPAY CHAR ( 3 ) DEFAULT '' ; 
  
	DECLARE V_RSQADH INTEGER DEFAULT 0 ; 
	DECLARE V_RSQAD1 CHAR ( 32 ) DEFAULT '' ; 
	DECLARE V_RSQAD2 CHAR ( 32 ) DEFAULT '' ; 
	DECLARE V_RSQDEP CHAR ( 2 ) DEFAULT '' ; 
	DECLARE V_RSQCPO CHAR ( 3 ) DEFAULT '' ; 
	DECLARE V_RSQVIL CHAR ( 26 ) DEFAULT '' ; 
	DECLARE V_RSQPAY CHAR ( 3 ) DEFAULT '' ; 
  
	DECLARE V_AFFADH INTEGER DEFAULT 0 ; 
  
	DECLARE V_LG3 CHAR ( 32 ) DEFAULT '' ; 
	DECLARE V_NUM INTEGER DEFAULT 0 ; 
	DECLARE V_EXT CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_LBN CHAR ( 15 ) DEFAULT '' ; 
	DECLARE V_LG4 CHAR ( 32 ) DEFAULT '' ; 
	DECLARE V_L4F CHAR ( 32 ) DEFAULT '' ; 
	DECLARE V_LG5 CHAR ( 32 ) DEFAULT '' ; 
	DECLARE V_DP6 CHAR ( 2 ) DEFAULT '' ; 
	DECLARE V_CP6 INTEGER DEFAULT 0 ; 
	DECLARE V_VI6 CHAR ( 32 ) DEFAULT '' ; 
	DECLARE V_CDX CHAR ( 2 ) DEFAULT '' ; 
	DECLARE V_CEX INTEGER DEFAULT 0 ; 
	DECLARE V_L6F CHAR ( 32 ) DEFAULT '' ; 
	DECLARE V_PAY CHAR ( 3 ) DEFAULT '' ; 
	DECLARE V_LOC CHAR ( 5 ) DEFAULT '' ; 
	DECLARE V_MAT INTEGER DEFAULT 0 ; 
	DECLARE V_RET CHAR ( 3 ) DEFAULT '' ; 
	DECLARE V_ERR CHAR ( 10 ) DEFAULT '' ; 
	DECLARE V_MJU CHAR ( 10 ) DEFAULT '' ; 
	DECLARE V_MJA INTEGER DEFAULT 0 ; 
	DECLARE V_MJM INTEGER DEFAULT 0 ; 
	DECLARE V_MJJ INTEGER DEFAULT 0 ; 
	DECLARE V_VIX CHAR ( 32 ) DEFAULT '' ; 
  
	DECLARE V_NBRSQ INTEGER DEFAULT 0 ; 
  
	DECLARE V_CHRONOSRC INTEGER DEFAULT 0 ; 
	DECLARE V_CHRONODEST INTEGER DEFAULT 0 ; 
	DECLARE V_PERIDESCRD INTEGER DEFAULT 0 ; 
	DECLARE V_PERIDESCRF INTEGER DEFAULT 0 ; 
  
	DECLARE V_NUMCHR CHAR ( 40 ) DEFAULT '' ; 
	DECLARE V_TOINSERT INTEGER DEFAULT 0 ; 
  
	SET V_RSQOBJ = 0 ; 
	SET V_LASTOBJ = 0 ; 
	
	SET P_CODEOFFRE = LPAD ( RTRIM (P_CODEOFFRE) , 9 , ' ');
  
	/*           -- RÉCUPÉRATION DE L'OBJET PRINCIPAL DU RISQUE --  */ 
	SELECT MIN ( JGOBJ ) INTO V_MINCODEOBJ FROM YPRTOBJ WHERE JGIPB = P_CODEOFFRE AND JGALX = P_VERSION AND JGRSQ = P_CODERSQ ; 
	/*           -- RÉCUPÉRATION DU NUMÉRO CHRONO DE L'ADRESSE DU RISQUE --     */ 
	SELECT JFADH INTO V_ADRCHRONORSQ FROM YPRTADR WHERE JFIPB = P_CODEOFFRE AND JFALX = P_VERSION AND JFRSQ = P_CODERSQ AND JFOBJ = 0 ; 
	/*           -- RÉCUPÉRATION DU NUMÉRO CHRONO DE L'ADRESSE DE L'OFFRE --     */ 
	SELECT KACDESI , KACOBSV INTO V_DESI , V_OBSV 
		FROM YPRTOBJ 
			INNER JOIN KPOBJ ON KACTYP = P_TYPE AND KACIPB = JGIPB AND KACALX = JGALX AND KACRSQ = JGRSQ AND KACOBJ = JGOBJ 
		WHERE JGIPB = P_CODEOFFRE AND JGALX = P_VERSION AND JGRSQ = P_CODERSQ AND JGOBJ = P_CODEOBJ ; 
  
	IF ( V_DESI > 0 ) THEN 
		DELETE FROM KPDESI WHERE KADCHR = V_DESI ; 
	END IF ; 
	IF ( V_OBSV > 0 ) THEN 
		DELETE FROM KPOBSV WHERE KAJCHR = V_OBSV ; 
	END IF ; 
  
	/*           -- SUPPRESSION DES INFORMATIONS DE L'OBJET --          */ 
	DELETE FROM KPOBJ WHERE KACIPB = P_CODEOFFRE AND KACALX = P_VERSION AND KACTYP = P_TYPE AND KACRSQ = P_CODERSQ AND KACOBJ = P_CODEOBJ ; 
  
	/*           -- SUPPRESSION DES INVENTAIRES DE L'OBJET --               */ 
	FOR CURSOR_INVEN AS FREE_LIST CURSOR FOR 
		SELECT KBGKBEID INVENID FROM KPINVAPP WHERE KBGIPB = P_CODEOFFRE AND KBGALX = P_VERSION AND KBGTYP = P_TYPE AND KBGRSQ = P_CODERSQ AND KBGOBJ = P_CODEOBJ AND KBGPERI = 'OB' 
	DO 
		DELETE FROM KPINVED WHERE KBFKBEID = INVENID ; 
		DELETE FROM KPINVEN WHERE KBEID = INVENID ; 
		DELETE FROM KPINVAPP WHERE KBGKBEID = INVENID ; 
	END FOR ; 
  
	/*           -- SUPPRESSION DES INFORMATIONS D'ADRESSE --          */ 
	FOR CURSOR_ADR AS FREE_LIST CURSOR FOR 
		SELECT JFADH NUMCHRONO FROM YPRTADR WHERE JFIPB = P_CODEOFFRE AND JFALX = P_VERSION AND JFRSQ = P_CODERSQ AND JFOBJ = P_CODEOBJ 
	DO 
		DELETE FROM YADRESS WHERE ABPCHR = NUMCHRONO ; 
	END FOR ; 
	DELETE FROM YPRTADR WHERE JFIPB = P_CODEOFFRE AND JFALX = P_VERSION AND JFRSQ = P_CODERSQ AND JFOBJ = P_CODEOBJ ; 
  
	/*           -- SUPPRESSION DES INFORMATIONS D'ENTÊTE DE L'OBJET --      */ 
	DELETE FROM YPRTOBJ WHERE JGIPB = P_CODEOFFRE AND JGALX = P_VERSION AND JGRSQ = P_CODERSQ AND JGOBJ = P_CODEOBJ ; 
  
	/*           -- SUPPRESSION DES TRACES DE L'OBJET --           */ 
	DELETE FROM KPCTRLE WHERE KEVIPB = P_CODEOFFRE AND KEVALX = P_VERSION AND KEVTYP = P_TYPE AND KEVRSQ = P_CODERSQ AND KEVOBJ = P_CODEOBJ ; 
  
	/*           -- SUPPRESSION DES IS DE L'OBJET --       */ 
	DELETE FROM KPIRSOB WHERE KFAIPB = P_CODEOFFRE AND KFAALX = P_VERSION AND KFARSQ = P_CODERSQ AND KFAOBJ = P_CODEOBJ ; 
	DELETE FROM KPISVAL WHERE KKCIPB = P_CODEOFFRE AND KKCALX = P_VERSION AND KKCRSQ = P_CODERSQ AND KKCOBJ = P_CODEOBJ ; 
  
	/*			 -- SUPPRESSION DES CLAUSE DE L'OBJET --	*/ 
	DELETE FROM KPCLAUSE WHERE KCAIPB = P_CODEOFFRE AND KCAALX = P_VERSION AND KCATYP = P_TYPE AND KCARSQ = P_CODERSQ AND KCAOBJ = P_CODEOBJ ; 
	DELETE FROM KPCLAUSW WHERE KCBIPB = P_CODEOFFRE AND KCBALX = P_VERSION AND KCBTYP = P_TYPE AND KCBRSQ = P_CODERSQ AND KCBOBJ = P_CODEOBJ ; 
    
	SET V_CODEFOR = 0 ; 
	SET V_CODEOPT = 0 ; 
	SET V_COUNT = 0 ; 
  
	SELECT KDDFOR , KDDOPT INTO V_CODEFOR , V_CODEOPT 
	FROM KPOPTAP 
	WHERE KDDIPB = P_CODEOFFRE AND KDDALX = P_VERSION AND KDDTYP = P_TYPE AND KDDRSQ = P_CODERSQ AND KDDOBJ = P_CODEOBJ AND KDDPERI = 'OB' ; 
  
	/* 			 -- SUPPRESION DU S'APPLIQUE À (FORMULE) DE L'OBJET -- 	*/ 
	DELETE FROM KPOPTAP WHERE KDDIPB = P_CODEOFFRE AND KDDALX = P_VERSION AND KDDTYP = P_TYPE AND KDDRSQ = P_CODERSQ AND KDDOBJ = P_CODEOBJ AND KDDPERI = 'OB' ; 
	
	-- SUPPRESSION DES PORTÉES DE GARANTIE DE L'OBJET
	DELETE FROM KPGARAP WHERE KDFIPB = P_CODEOFFRE AND KDFALX = P_VERSION AND KDFTYP = P_TYPE AND KDFRSQ = P_CODERSQ AND KDFOBJ = P_CODEOBJ ;
  
    -- Dénombrement de l'application à d'autres objets du risque
	SELECT COUNT ( * ) INTO V_COUNT_REMAINING_OBJECTS_FOR_FORMULE FROM KPOPTAP WHERE KDDIPB = P_CODEOFFRE AND KDDALX = P_VERSION AND KDDTYP = P_TYPE AND KDDRSQ = P_CODERSQ AND KDDFOR = V_CODEFOR ; 

    -- Dénombrement du nombre d'objets restant dans le risque
	SELECT COUNT ( * ) INTO V_NBLIGNE FROM YPRTOBJ WHERE JGIPB = P_CODEOFFRE AND JGALX = P_VERSION AND JGRSQ = P_CODERSQ AND JGOBJ <> P_CODEOBJ ; 

    -- detection d'une formule s'applicant à tous les objets restant du risque
	SELECT COUNT ( * ), KDDFOR  INTO V_COUNT, V_CODEFOR_FOR_RSQ 
	FROM KPOPTAP 
	WHERE KDDIPB = P_CODEOFFRE AND KDDALX = P_VERSION AND KDDTYP = P_TYPE AND KDDRSQ = P_CODERSQ AND KDDPERI = 'OB' 
	GROUP BY KDDFOR
	HAVING COUNT ( * ) =  V_NBLIGNE
	FETCH FIRST 1 ROW ONLY ;

	-- Modification de l'application de la formule si tous les objets sont maintenant couverts
	IF (V_COUNT = V_NBLIGNE) THEN
		-- suprrime les lignes exédentaires (ie: Row_number > 1)
		DELETE FROM KPOPTAP  WHERE  
		KDDID IN ( 
			SELECT IDS . KDDID FROM ( 
				SELECT KDDID,  ROW_NUMBER() OVER (ORDER BY KDDOBJ) rn
				FROM KPOPTAP 
				WHERE KDDIPB = P_CODEOFFRE AND KDDALX = P_VERSION AND KDDTYP = P_TYPE AND KDDFOR = V_CODEFOR_FOR_RSQ
			) IDS WHERE rn >1 
		);
		-- met à jour la dernière ligne => s'applique au risque
		UPDATE KPOPTAP SET KDDPERI = 'RQ', KDDOBJ = 0 WHERE KDDIPB = P_CODEOFFRE AND KDDALX = P_VERSION AND KDDTYP = P_TYPE AND KDDFOR = V_CODEFOR_FOR_RSQ;
	END IF;

  
	IF ( V_COUNT_REMAINING_OBJECTS_FOR_FORMULE = 0 AND V_CODEFOR > 0 ) THEN 
		/* SUPPRESSION DE LA FORMULE */ 
		CALL SP_DELFORM ( P_CODEOFFRE , P_VERSION , P_TYPE , V_CODEFOR , 'C' ) ; 
	END IF ; 
	
	IF ( P_DELRSQ = 0 ) THEN 
		/*           -- MAJ DU RISQUE --       */ 
		-- SELECT COUNT ( * ) INTO V_NBLIGNE FROM YPRTOBJ WHERE JGIPB = P_CODEOFFRE AND JGALX = P_VERSION AND JGRSQ = P_CODERSQ AND JGOBJ <> P_CODEOBJ ; 
		SELECT IFNULL ( MAX ( JGOBJ ) , 0 ) INTO V_LASTOBJ FROM YPRTOBJ WHERE JGIPB = P_CODEOFFRE AND JGALX = P_VERSION AND JGRSQ = P_CODERSQ ; 
		IF ( V_NBLIGNE > 1 ) THEN 
			SET V_RSQOBJ = 0 ; 
		ELSE 
			SET V_RSQOBJ = V_LASTOBJ ; 
		END IF ; 
		UPDATE YPRTRSQ 
			SET JEOBJ = V_RSQOBJ , JEDRO = V_LASTOBJ , JENBO = V_NBLIGNE 
			WHERE JEIPB = P_CODEOFFRE AND JEALX = P_VERSION AND JERSQ = P_CODERSQ ; 
  
		IF ( V_NBLIGNE = 1 ) THEN 
			SELECT JGVDJ , JGVDM , JGVDA , JGVDH , JGVFJ , JGVFM , JGVFA , JGVFH , JGTRR , KACAPE , KACNMC01 , KACNMC02 , KACNMC03 , KACNMC04 , KACNMC05 , KACTRE , KACCLASS , KACDESC , KACDESI , KACMAND , KACMANF 
				INTO V_JOURENTREE , V_MOISENTREE , V_ANNEEENTREE , V_HEUREENTREE , V_JOURSORTIE , V_MOISSORTIE , V_ANNEESORTIE , V_HEURESORTIE , 
				V_TERRITORIALITE , V_CODEAPE , V_NOMENCLATURE1 , V_NOMENCLATURE2 , V_NOMENCLATURE3 , V_NOMENCLATURE4 , V_NOMENCLATURE5 , V_CODETRE , V_CODECLASSE , V_DESCRIPTIF , V_DESI , V_PERIDESCRD , V_PERIDESCRF 
				FROM YPRTOBJ 
					INNER JOIN KPOBJ ON  KACIPB = JGIPB AND KACALX = JGALX AND KACTYP = P_TYPE AND KACRSQ = JGRSQ AND KACOBJ = JGOBJ 
				WHERE JGIPB = P_CODEOFFRE AND JGALX = P_VERSION AND JGRSQ = P_CODERSQ AND JGOBJ <> P_CODEOBJ ; 
  
			UPDATE YPRTRSQ 
				SET JEOBJ = V_RSQOBJ , JEVDJ = V_JOURENTREE , JEVDM = V_MOISENTREE , JEVDA = V_ANNEEENTREE , JEVDH = V_HEUREENTREE , 
				JEVFJ = V_JOURSORTIE , JEVFM = V_MOISSORTIE , JEVFA = V_ANNEESORTIE , JEVFH = V_HEURESORTIE , 
				JETRR = V_TERRITORIALITE 
				WHERE JEIPB = P_CODEOFFRE AND JEALX = P_VERSION AND JERSQ = P_CODERSQ ; 
  
			UPDATE KPRSQ 
				SET KABAPE = V_CODEAPE , 
				KABNMC01 = V_NOMENCLATURE1 , 
				KABNMC02 = V_NOMENCLATURE2 , 
				KABNMC03 = V_NOMENCLATURE3 , 
				KABNMC04 = V_NOMENCLATURE4 , 
				KABNMC05 = V_NOMENCLATURE5 , 
				KABTRE = V_CODETRE , KABCLASS = V_CODECLASSE , 
				KABDESC = V_DESCRIPTIF , 
				KABDESI = V_DESI , 
				KABMAND = V_PERIDESCRD , 
				KABMANF = V_PERIDESCRF 
				WHERE KABIPB = P_CODEOFFRE AND KABALX = P_VERSION AND KABTYP = P_TYPE AND KABRSQ = P_CODERSQ ; 
  
			SELECT JEINA , JEIXL , JEIXF , JEIXC , JERGT , JECNA , JEPBT , JERUL , JERUT 
				INTO V_RSQINA , V_RSQIXL , V_RSQIXF , V_RSQIXC , V_RSQRGT , V_RSQCNA , V_RSQPBT , V_RSQRUL , V_RSQRUT 
			FROM YPRTRSQ 
			WHERE JEIPB = P_CODEOFFRE AND JEALX = P_VERSION AND JERSQ = P_CODERSQ ; 
  
			UPDATE YPRTOBJ 
				SET JGINA = V_RSQINA , JGIXL = V_RSQIXL , JGIXF = V_RSQIXF , JGIXC = V_RSQIXC , JGRGT = V_RSQRGT , JGCNA = V_RSQCNA , JGPBT = V_RSQPBT , JGRUL = V_RSQRUL , JGRUT = V_RSQRUT 
			WHERE JGIPB = P_CODEOFFRE AND JGALX = P_VERSION AND JGRSQ = P_CODERSQ ; 
  
			/* ---------------------------------------- */ 
			/* MODIFICATION SUIVANT LE DOC ADRESSE V4.1 */ 
			/* ---------------------------------------- */ 
			SELECT JFADH , JFAD1 , JFAD2 , JFDEP , JFCPO , JFVIL , JFPAY 
				INTO V_OBJADH , V_OBJAD1 , V_OBJAD2 , V_OBJDEP , V_OBJCPO , V_OBJVIL , V_OBJPAY 
			FROM YPRTADR 
			WHERE JFIPB = P_CODEOFFRE AND JFALX = P_VERSION AND JFRSQ = P_CODERSQ AND JFOBJ = V_LASTOBJ ; 
			SET V_NBRSQ = 0 ; 
  
			IF ( ( TRIM ( V_OBJCPO ) != '0' AND TRIM ( V_OBJCPO ) != '' ) 
				OR ( TRIM ( V_OBJDEP ) != '0' AND TRIM ( V_OBJDEP ) != '' ) OR TRIM ( V_OBJVIL ) != '' ) THEN 
				/* Instanciation du chrono destinataire si ce dernier est à 0 */ 
				IF ( V_ADRCHRONORSQ = 0 ) THEN 
					CALL SP_YCHRONO ( 'ADRESSE_CHRONO' , V_NUMCHR ) ; 
					SET V_ADRCHRONORSQ = CAST ( V_NUMCHR AS INTEGER ) ; 
					SET V_TOINSERT = 1 ; 
				END IF ; 
				/* COPIE DE L'ADRESSE DE L'OBJET DANS LE RISQUE */ 
				UPDATE YPRTADR 
					SET JFAD1 = V_OBJAD1 , JFAD2 = V_OBJAD2 , JFDEP = V_OBJDEP , JFCPO = V_OBJCPO , JFVIL = V_OBJVIL , JFPAY = V_OBJPAY , JFADH = V_ADRCHRONORSQ 
				WHERE JFIPB = P_CODEOFFRE AND JFALX = P_VERSION AND JFRSQ = P_CODERSQ AND JFOBJ = 0 ; 
  
				SET V_CHRONOSRC = V_OBJADH ; 
				SET V_CHRONODEST = V_ADRCHRONORSQ ; 
  
				SELECT COUNT ( * ) INTO V_NBRSQ FROM YPRTRSQ WHERE JEIPB = P_CODEOFFRE AND JEALX = P_VERSION ; 
			ELSE 
				SELECT JFADH , JFAD1 , JFAD2 , JFDEP , JFCPO , JFVIL , JFPAY 
					INTO V_RSQADH , V_RSQAD1 , V_RSQAD2 , V_RSQDEP , V_RSQCPO , V_RSQVIL , V_RSQPAY 
				FROM YPRTADR 
				WHERE JFIPB = P_CODEOFFRE AND JFALX = P_VERSION AND JFRSQ = P_CODERSQ AND JFOBJ = 0 ; 
				IF ( TRIM ( V_RSQCPO ) != '' OR TRIM ( V_RSQDEP ) != '' OR TRIM ( V_RSQVIL ) != '' ) THEN 
					/* Instanciation du chrono destinataire si ce dernier est à 0 */ 
					IF ( V_OBJADH = 0 ) THEN 
						CALL SP_YCHRONO ( 'ADRESSE_CHRONO' , V_NUMCHR ) ; 
						SET V_OBJADH = CAST ( V_NUMCHR AS INTEGER ) ; 
						SET V_TOINSERT = 1 ; 
					END IF ; 
					/* COPIE DE L'ADRESSE DU RISQUE DANS L'OBJET */ 
					UPDATE YPRTADR 
						SET JFAD1 = V_RSQAD1 , JFAD2 = V_RSQAD2 , JFDEP = V_RSQDEP , JFCPO = V_RSQCPO , JFVIL = V_RSQVIL , JFPAY = V_RSQPAY , JFADH = V_OBJADH 
					WHERE JFIPB = P_CODEOFFRE AND JFALX = P_VERSION AND JFRSQ = P_CODERSQ AND JFOBJ = V_LASTOBJ ; 
  
					SET V_CHRONOSRC = V_ADRCHRONORSQ ; 
					SET V_CHRONODEST = V_OBJADH ; 
				END IF ; 
			END IF ; 
  
			/* Si le risque et l'objet ont une adresse */ 
			IF ( V_CHRONOSRC > 0 AND V_CHRONODEST > 0 ) THEN 
				SELECT ABPLG3 , ABPNUM , ABPEXT , ABPLBN , ABPLG4 , ABPL4F , ABPLG5 , ABPDP6 , ABPCP6 , ABPVI6 , ABPCDX , ABPCEX , ABPL6F , ABPPAY , 
						ABPLOC , ABPMAT , ABPRET , ABPERR , ABPMJU , ABPMJA , ABPMJM , ABPMJJ , ABPVIX 
				INTO V_LG3 , V_NUM , V_EXT , V_LBN , V_LG4 , V_L4F , V_LG5 , V_DP6 , V_CP6 , V_VI6 , V_CDX , V_CEX , V_L6F , V_PAY , 
						V_LOC , V_MAT , V_RET , V_ERR , V_MJU , V_MJA , V_MJM , V_MJJ , V_VIX 
				FROM YADRESS WHERE ABPCHR = V_CHRONOSRC ; 
  
				/* Si aucun chrono n'a été crée, le champ dans YADRESS existe déjà */ 
				IF ( V_TOINSERT = 0 ) THEN 
					UPDATE YADRESS 
						SET ABPLG3 = V_LG3 , ABPNUM = V_NUM , ABPEXT = V_EXT , ABPLBN = V_LBN , ABPLG4 = V_LG4 , ABPL4F = V_L4F , ABPLG5 = V_LG5 , 
							ABPDP6 = V_DP6 , ABPCP6 = V_CP6 , ABPVI6 = V_VI6 , ABPCDX = V_CDX , ABPCEX = V_CEX , ABPL6F = V_L6F , ABPPAY = V_PAY , 
							ABPLOC = V_LOC , ABPMAT = V_MAT , ABPRET = V_RET , ABPERR = V_ERR , ABPMJU = V_MJU , ABPMJA = V_MJA , ABPMJM = V_MJM , 
							ABPMJJ = V_MJJ , ABPVIX = V_VIX 
					WHERE ABPCHR = V_CHRONODEST ; 
				ELSE 
					INSERT INTO YADRESS 
					( ABPLG3 , ABPNUM , ABPEXT , ABPLBN , ABPLG4 , ABPL4F , ABPLG5 , ABPDP6 , ABPCP6 , ABPVI6 , ABPCDX , ABPCEX , ABPL6F , ABPPAY , 
						ABPLOC , ABPMAT , ABPRET , ABPERR , ABPMJU , ABPMJA , ABPMJM , ABPMJJ , ABPVIX , ABPCHR ) 
					VALUES 
					( V_LG3 , V_NUM , V_EXT , V_LBN , V_LG4 , V_L4F , V_LG5 , V_DP6 , V_CP6 , V_VI6 , V_CDX , V_CEX , V_L6F , V_PAY , 
						V_LOC , V_MAT , V_RET , V_ERR , V_MJU , V_MJA , V_MJM , V_MJJ , V_VIX , V_CHRONODEST ) ; 
				END IF ; 
				/* COPIE DE L'ADRESSE DANS L'AFFAIRE SI L'AFFAIRE EST MONO-RISQUE */ 
				IF ( V_NBRSQ = 1 ) THEN 
					SELECT PBADH INTO V_ADRCHRONOOFFRE FROM YPOBASE WHERE PBIPB = P_CODEOFFRE AND PBALX = P_VERSION AND PBTYP = P_TYPE ; 
  
					/* Récupération des valeurs à jour de l'objet*/ 
					SELECT JFAD1 , JFAD2 , JFDEP , JFCPO , JFVIL , JFPAY 
						INTO V_OBJAD1 , V_OBJAD2 , V_OBJDEP , V_OBJCPO , V_OBJVIL , V_OBJPAY 
					FROM YPRTADR 
					WHERE JFIPB = P_CODEOFFRE AND JFALX = P_VERSION AND JFRSQ = P_CODERSQ AND JFOBJ = V_LASTOBJ ; 
  
					UPDATE YPOBASE 
						SET PBAD1 = V_OBJAD1 , PBAD2 = V_OBJAD2 , PBDEP = V_OBJDEP , PBCPO = V_OBJCPO , PBVIL = V_OBJVIL , PBPAY = V_OBJPAY 
					WHERE PBIPB = P_CODEOFFRE AND PBALX = P_VERSION AND PBTYP = P_TYPE AND PBADH = V_ADRCHRONOOFFRE ; 
  
					IF ( V_ADRCHRONOOFFRE > 0 ) THEN 
						/* Chrono existant, mise à jour de l'adresse liée dans YADRESS */ 
						UPDATE YADRESS 
							SET ABPLG3 = V_LG3 , ABPNUM = V_NUM , ABPEXT = V_EXT , ABPLBN = V_LBN , ABPLG4 = V_LG4 , ABPL4F = V_L4F , ABPLG5 = V_LG5 , 
								ABPDP6 = V_DP6 , ABPCP6 = V_CP6 , ABPVI6 = V_VI6 , ABPCDX = V_CDX , ABPCEX = V_CEX , ABPL6F = V_L6F , ABPPAY = V_PAY , 
								ABPLOC = V_LOC , ABPMAT = V_MAT , ABPRET = V_RET , ABPERR = V_ERR , ABPMJU = V_MJU , ABPMJA = V_MJA , ABPMJM = V_MJM , 
								ABPMJJ = V_MJJ , ABPVIX = V_VIX 
						WHERE ABPCHR = V_ADRCHRONOOFFRE ; 
					ELSE 
						/* Insertion d'une adresse dans YADRESS et génération du chrono associé */ 
						CALL SP_YCHRONO ( 'ADRESSE_CHRONO' , V_NUMCHR ) ; 
						SET V_ADRCHRONOOFFRE = CAST ( V_NUMCHR AS INTEGER ) ; 
  
						INSERT INTO YADRESS 
						( ABPLG3 , ABPNUM , ABPEXT , ABPLBN , ABPLG4 , ABPL4F , ABPLG5 , ABPDP6 , ABPCP6 , ABPVI6 , ABPCDX , ABPCEX , ABPL6F , ABPPAY , 
							ABPLOC , ABPMAT , ABPRET , ABPERR , ABPMJU , ABPMJA , ABPMJM , ABPMJJ , ABPVIX , ABPCHR ) 
						VALUES 
						(	V_LG3 , V_NUM , V_EXT , V_LBN , V_LG4 , V_L4F , V_LG5 , V_DP6 , V_CP6 , V_VI6 , V_CDX , V_CEX , V_L6F , V_PAY , 
							V_LOC , V_MAT , V_RET , V_ERR , V_MJU , V_MJA , V_MJM , V_MJJ , V_VIX , V_ADRCHRONOOFFRE ) ; 
					END IF ; 
				END IF ; 
			END IF ; 
  
			/* -------------------------------------------- */ 
			/* FIN MODIFICATION SUIVANT LE DOC ADRESSE V4.1 */ 
			/* -------------------------------------------- */ 
  
		END IF ; 
  
	END IF ; 
  
END P1  ;




