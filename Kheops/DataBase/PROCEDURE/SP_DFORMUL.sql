CREATE PROCEDURE SP_DFORMUL ( 
	IN P_CODEOFFRE CHAR(9) , 
	IN P_VERSION INTEGER , 
	IN P_TYPE CHAR(1) , 
	IN P_CODEFORMULE INTEGER , 
	IN P_NEWIDFORMULE INTEGER , 
	IN P_NEWALPHAFORMULE CHAR(1) , 
	IN P_DATESYSTEME CHAR(8) , 
	IN P_USER CHAR(15) , 
	IN P_TRAITEMENT CHAR(1) ) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC SP_DFORMUL 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	CLOSQLCSR = *ENDMOD , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = ZALBINKHEO , 
	DYNDFTCOL = *YES , 
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC 
  
--Valeur possible dans P_TRAITEMENT : F (Formule) 
DECLARE V_NEWCODEFORMULE INTEGER DEFAULT 0 ; 
  
DELETE FROM KPCOPID WHERE KFLIPB = P_CODEOFFRE AND KFLALX = P_VERSION AND KFLTYP = P_TYPE ; 
  
CALL SP_SECOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KDAID' , P_CODEFORMULE , V_NEWCODEFORMULE ) ; 
IF ( V_NEWCODEFORMULE = 0 ) THEN 
CALL SP_NCHRONO ( 'KDAID' , V_NEWCODEFORMULE ) ; 
CALL SP_INCOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KDAID' , P_CODEFORMULE , V_NEWCODEFORMULE ) ; 
END IF ; 
  
INSERT INTO KPFOR 
( SELECT V_NEWCODEFORMULE , P_TYPE , P_CODEOFFRE , P_VERSION , P_NEWIDFORMULE , P_NEWIDFORMULE , P_NEWALPHAFORMULE , 
KDABRA , KDACIBLE , KDAKAIID , KDADESC , P_USER , P_DATESYSTEME , P_USER , P_DATESYSTEME , KDAFGEN 
FROM KPFOR WHERE KDAIPB = P_CODEOFFRE AND KDAALX = P_VERSION AND KDATYP = P_TYPE AND KDAFOR = P_CODEFORMULE ) ; 
  
CALL SP_DOPTION ( P_CODEOFFRE , P_VERSION , P_TYPE , P_CODEFORMULE , V_NEWCODEFORMULE , P_NEWIDFORMULE , P_DATESYSTEME , P_USER , P_TRAITEMENT ) ; 
  
  
CALL SP_CKCOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , P_CODEOFFRE , P_VERSION , P_TYPE ) ; 
  
CALL SP_DINFOSP ( P_CODEOFFRE , P_VERSION , P_TYPE , P_CODEFORMULE , P_NEWIDFORMULE , P_DATESYSTEME , P_USER , P_TRAITEMENT ) ; 
  
CALL SP_DCLAUSE ( P_CODEOFFRE , P_VERSION , P_TYPE , P_CODEFORMULE , P_NEWIDFORMULE , P_DATESYSTEME , P_USER , P_TRAITEMENT ) ; 
  
END P1  ; 
  

  

