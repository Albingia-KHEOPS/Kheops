CREATE PROCEDURE SP_DINFOSP ( 
	IN P_CODEOFFRE CHAR(9) , 
	IN P_VERSION INTEGER , 
	IN P_TYPE CHAR(1) , 
	IN P_CODEFORMULE INTEGER , 
	IN P_NEWIDFORMULE INTEGER , 
	IN P_DATESYSTEME CHAR(8) , 
	IN P_USER CHAR(15) , 
	IN P_TRAITEMENT CHAR(1) ) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC SP_DINFOSP 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	CLOSQLCSR = *ENDMOD , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = ZALBINKHEO , 
	DYNDFTCOL = *YES , 
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC 
  
DECLARE V_NEWLIENKOPT INTEGER DEFAULT 0 ; 
DECLARE V_NEWDESI1 INTEGER DEFAULT 0 ; 
DECLARE V_NEWDESI2 INTEGER DEFAULT 0 ; 
DECLARE V_NEWDESI3 INTEGER DEFAULT 0 ; 
  
DECLARE V_NEWCODEGARAN INTEGER DEFAULT 0 ; 
DECLARE V_NEWCODEGARAP INTEGER DEFAULT 0 ; 
DECLARE V_NEWCODEINVEN INTEGER DEFAULT 0 ; 
  
DECLARE V_KFCID INTEGER DEFAULT 0 ; 
  
FOR LOOP_OPT AS FREE_LIST CURSOR FOR 
SELECT KFCTYP V_TYPEOPT , KFCIPB V_CODEOFFREOPT , KFCALX V_VERSIONOPT , KFCFOR V_CODEFOR , KFCOPT V_CODEOPT , KFCKDBID V_LIENKOPT 
FROM KPIOPT 
WHERE KFCTYP = P_TYPE AND KFCIPB = P_CODEOFFRE AND KFCALX = P_VERSION AND KFCFOR = P_CODEFORMULE 
DO 
  
IF ( V_CODEOPT != 0 ) THEN 
CALL SP_SECOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KDBID' , V_LIENKOPT , V_NEWLIENKOPT ) ; 
END IF ; 
  
CALL SP_NCHRONO ( 'KFCID' , V_KFCID ) ; 
  
INSERT INTO KPIOPT 
( KFCID , KFCTYP , KFCIPB , KFCALX , KFCFOR , KFCOPT , KFCKDBID , KFCRRCR , 
KFCRRC , KFCMNTE , KFCSEUI , KFCSEUR , KFCSEUC , KFCPERR , 
KFCAUTM , KFCCRD , KFCCRH , KFCMAJU , KFCMAJD , KFCMAJH ) 
( SELECT V_KFCID , P_TYPE , P_CODEOFFRE , P_VERSION , P_NEWIDFORMULE , KFCOPT , V_NEWLIENKOPT , KFCRRCR , 
KFCRRC , KFCMNTE , KFCSEUI , KFCSEUR , KFCSEUC , KFCPERR , 
KFCAUTM , P_DATESYSTEME , KFCCRH , P_USER , P_DATESYSTEME , KFCMAJH 
FROM KPIOPT 
WHERE KFCTYP = V_TYPEOPT AND KFCIPB = V_CODEOFFREOPT AND KFCALX = V_VERSIONOPT AND KFCFOR = V_CODEFOR AND KFCOPT = V_CODEOPT ) ; 
  
END FOR ; 
  
FOR LOOP_GAR AS FREE_LIST CURSOR FOR 
SELECT KFDTYP V_TYPERSGA , KFDIPB V_CODEOFFRERSGA , KFDALX V_VERSIONRSGA , KFDFOR V_CODEFOR , 
KFDOPT V_CODEOPT  --, KFDAD02 V_DESI1 , KFDRC02 V_DESI2 
FROM KPIRSGA 
WHERE KFDTYP = P_TYPE AND KFDIPB = P_CODEOFFRE AND KFDALX = P_VERSION AND KFDFOR = P_CODEFORMULE 
DO 
  
INSERT INTO KPIRSGA 
( KFDTYP , KFDIPB , KFDALX , KFDFOR , KFDOPT , KFDCRD , KFDCRH , KFDMAJU , KFDMAJD , KFDMAJH , KFDAN02 , KFDAN03 , 
KFDBO01 , KFDBO02 , KFDBO03 , KFDIM08 , KFDIM09 , KFDEFFV , KFDCNVD , KFDFRDM , KFDSORN , KFDSORD , KFDSORR , KFDVOLAP , KFDGARAV , KFDAN04 , KFDVOLAV , KFDLMA , KFDMXM , KFDRAY , KFDAN05 , KFDRAY5 , KFDAN06 , KFDAN07 , KFDCLAL ) 
( SELECT P_TYPE , P_CODEOFFRE , P_VERSION , P_NEWIDFORMULE , KFDOPT , P_DATESYSTEME , KFDCRH , P_USER , P_DATESYSTEME , KFDMAJH , KFDAN02 , KFDAN03 , 
KFDBO01 , KFDBO02 , KFDBO03 , KFDIM08 , KFDIM09 , KFDEFFV , KFDCNVD , KFDFRDM , KFDSORN , KFDSORD , KFDSORR , KFDVOLAP , KFDGARAV , KFDAN04 , KFDVOLAV , KFDLMA , KFDMXM , KFDRAY , KFDAN05 , KFDRAY5 , KFDAN06 , KFDAN07 , KFDCLAL 
FROM KPIRSGA 
WHERE KFDTYP = V_TYPERSGA AND KFDIPB = V_CODEOFFRERSGA AND KFDALX = V_VERSIONRSGA AND KFDFOR = V_CODEFOR AND KFDOPT = V_CODEOPT ) ; 
  
  
END FOR ; 
  
END P1  ; 
  

  

