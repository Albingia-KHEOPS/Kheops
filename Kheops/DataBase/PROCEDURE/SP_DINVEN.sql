CREATE PROCEDURE SP_DINVEN ( 
	IN P_CODEOFFRE CHAR(9) , 
	IN P_VERSION INTEGER , 
	IN P_TYPE CHAR(1) , 
	IN P_NEWCODEFORMULE INTEGER , 
	IN P_CODEINVEN INTEGER , 
	OUT P_NEWCODEINVEN INTEGER ) 
	LANGUAGE SQL 
	SPECIFIC SP_DINVEN 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	CLOSQLCSR = *ENDMOD , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = ZALBINKHEO , 
	DYNDFTCOL = *YES , 
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC 
  
	DECLARE V_NEWCODEINVEN INTEGER DEFAULT 0 ; 
	DECLARE V_CODEDESI INTEGER DEFAULT 0 ; 
	DECLARE V_NEWCODEDESI INTEGER DEFAULT 0 ; 
	DECLARE V_NEWCHRONO INTEGER DEFAULT 0 ; 
	DECLARE V_CODEINVENDTL INTEGER DEFAULT 0 ; 
	DECLARE V_NEWCODEINVENDTL INTEGER DEFAULT 0 ; 
  
	SELECT KBEKADID INTO V_CODEDESI FROM KPINVEN WHERE KBEID = P_CODEINVEN ; 
  
	CALL SP_SECOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KBEID' , P_CODEINVEN , V_NEWCODEINVEN ) ; 
	IF ( V_NEWCODEINVEN = 0 ) THEN 
		CALL SP_NCHRONO ( 'KBEID' , V_NEWCODEINVEN ) ; 
		CALL SP_INCOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KBEID' , P_CODEINVEN , V_NEWCODEINVEN ) ; 
	END IF ; 
  
	IF ( V_CODEDESI != 0 ) THEN 
		CALL SP_SECOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KADCHR' , V_CODEDESI , V_NEWCODEDESI ) ; 
		IF ( V_NEWCODEDESI = 0 ) THEN 
			CALL SP_NCHRONO ( 'KADCHR' , V_NEWCODEDESI ) ; 
			CALL SP_INCOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KADCHR' , V_CODEDESI , V_NEWCODEDESI ) ; 
		END IF ; 
	END IF ; 
  
	SELECT MAX ( KBECHR ) INTO V_NEWCHRONO FROM KPINVEN 
		WHERE TRIM ( KBEIPB ) = TRIM ( P_CODEOFFRE ) AND KBEALX = P_VERSION AND KBETYP = P_TYPE ; 
	SET V_NEWCHRONO = V_NEWCHRONO + 1 ; 
  
	INSERT INTO KPINVEN 
		( KBEID , KBETYP , KBEIPB , KBEALX , KBECHR , KBEDESC , KBEKAGID , KBEKADID , 
			KBEREPVAL , KBEVAL , KBEVAA , KBEVAW , KBEVAT , KBEVAU , KBEVAH , KBEIVO , KBEIVA , KBEIVW ) 
	( SELECT V_NEWCODEINVEN , KBETYP , KBEIPB , KBEALX , V_NEWCHRONO , KBEDESC , KBEKAGID , V_NEWCODEDESI , 
		KBEREPVAL , KBEVAL , KBEVAA , KBEVAW , KBEVAT , KBEVAU , KBEVAH , KBEIVO , KBEIVA , KBEIVW 
			FROM KPINVEN 
		WHERE KBEID = P_CODEINVEN ) ; 
  
	SET V_CODEDESI = 0 ; 
	FOR INVENDETAIL AS FREE_LIST CURSOR FOR 
		SELECT KBFID V_CODEINVENDTL , KBFKADID V_CODEDESI FROM KPINVED WHERE KBFKBEID = P_CODEINVEN 
	DO 
		CALL SP_SECOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KBFID' , V_CODEINVENDTL , V_NEWCODEINVENDTL ) ; 
		IF ( V_NEWCODEINVENDTL = 0 ) THEN 
			CALL SP_NCHRONO ( 'KBFID' , V_NEWCODEINVENDTL ) ; 
			CALL SP_INCOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KBFID' , V_CODEINVENDTL , V_NEWCODEINVENDTL ) ; 
		END IF ; 
  
		IF ( V_CODEDESI != 0 ) THEN 
			CALL SP_SECOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KADCHR' , V_CODEDESI , V_NEWCODEDESI ) ; 
			IF ( V_NEWCODEDESI = 0 ) THEN 
				CALL SP_NCHRONO ( 'KADCHR' , V_NEWCODEDESI ) ; 
				CALL SP_INCOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KADCHR' , V_CODEDESI , V_NEWCODEDESI ) ; 
			END IF ; 
		END IF ; 
  
		INSERT INTO KPINVED 
			( KBFID , KBFTYP , KBFIPB , KBFALX , KBFKBEID , KBFNUMLGN , KBFDESC , KBFKADID , KBFSITE , 
				KBFNTLI , KBFCP , KBFVILLE , KBFADH , KBFDATDEB , KBFDEBHEU , KBFDATFIN , KBFFINHEU , KBFMNT1 , KBFMNT2 , KBFNBEVN , 
				KBFNBPER , KBFNOM , KBFPNOM , KBFDATNAI , KBFFONC , KBFCDEC , KBFCIP , KBFACCS , KBFAVPR , KBFMSR , KBFCMAT , KBFSEX , KBFMDQ , KBFMDA , KBFACTP , 
				KBFKADFH , KBFEXT , KBFMNT3 , KBFMNT4 , KBFQUA , KBFREN , KBFRLO ) 
			( SELECT V_NEWCODEINVENDTL , P_TYPE , P_CODEOFFRE , P_VERSION , V_NEWCODEINVEN , KBFNUMLGN , KBFDESC , V_NEWCODEDESI , KBFSITE , 
				KBFNTLI , KBFCP , KBFVILLE , KBFADH , KBFDATDEB , KBFDEBHEU , KBFDATFIN , KBFFINHEU , KBFMNT1 , KBFMNT2 , KBFNBEVN , 
				KBFNBPER , KBFNOM , KBFPNOM , KBFDATNAI , KBFFONC , KBFCDEC , KBFCIP , KBFACCS , KBFAVPR , KBFMSR , KBFCMAT , KBFSEX , KBFMDQ , KBFMDA , KBFACTP , 
				KBFKADFH , KBFEXT , KBFMNT3 , KBFMNT4 , KBFQUA , KBFREN , KBFRLO 
			FROM KPINVED WHERE KBFID = V_CODEINVENDTL ) ; 
	END FOR ; 
  
	SET V_NEWCHRONO = 0 ; 
	SELECT MAX ( KBGNUM ) INTO V_NEWCHRONO FROM KPINVAPP 
		WHERE TRIM ( KBGIPB ) = TRIM ( P_CODEOFFRE ) AND KBGALX = P_VERSION AND KBGTYP = P_TYPE ; 
	SET V_NEWCHRONO = V_NEWCHRONO + 1 ; 
  
	INSERT INTO KPINVAPP 
		( KBGTYP , KBGIPB , KBGALX , KBGNUM , KBGKBEID , KBGPERI , KBGRSQ , KBGOBJ , KBGFOR , KBGGAR ) 
	( SELECT KBGTYP , KBGIPB , KBGALX , V_NEWCHRONO , V_NEWCODEINVEN , KBGPERI , KBGRSQ , KBGOBJ , P_NEWCODEFORMULE , KBGGAR 
		FROM KPINVAPP 
	WHERE KBGKBEID = P_CODEINVEN ) ; 
	 
	SET P_NEWCODEINVEN = V_NEWCODEINVEN ; 
	 
END P1  ; 
  

  

