CREATE PROCEDURE SP_DKPOPTD ( 
	IN P_CODEOFFRE CHAR(9) , 
	IN P_VERSION INTEGER , 
	IN P_TYPE CHAR(1) , 
	IN P_NEWIDFORMULE INTEGER , 
	IN P_CODEOPTION INTEGER , 
	IN P_NEWCODEOPTION INTEGER , 
	IN P_DATESYSTEME CHAR(8) , 
	IN P_USER CHAR(15) , 
	IN P_TRAITEMENT CHAR(1) ) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC SP_DKPOPTD 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	CLOSQLCSR = *ENDMOD , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = ZALBINKHEO , 
	DYNDFTCOL = *YES , 
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC 
  
DECLARE V_NEWCODEOPTIONDTL INTEGER DEFAULT 0 ; 
  
FOR FORM_LOOP AS FREE_LIST CURSOR FOR 
SELECT KDCID CODEOPTIONDTL , KDCKAKID GUIDVOLET , KDCTENG TYPEENR FROM KPOPTD 
WHERE KDCKDBID = P_CODEOPTION 
DO 
CALL SP_SECOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KDCID' , CODEOPTIONDTL , V_NEWCODEOPTIONDTL ) ; 
IF ( V_NEWCODEOPTIONDTL = 0 ) THEN 
CALL SP_NCHRONO ( 'KDCID' , V_NEWCODEOPTIONDTL ) ; 
CALL SP_INCOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KDCID' , CODEOPTIONDTL , V_NEWCODEOPTIONDTL ) ; 
END IF ; 
  
INSERT INTO KPOPTD 
( KDCID , KDCTYP , KDCIPB , KDCALX , KDCFOR , KDCOPT , KDCKDBID , KDCTENG , 
KDCKAKID , KDCKAEID , KDCKAQID , KDCMODELE , KDCKARID , KDCCRU , KDCCRD , KDCMAJU , KDCMAJD , KDCFLAG ) 
( SELECT V_NEWCODEOPTIONDTL , P_TYPE , P_CODEOFFRE , P_VERSION , P_NEWIDFORMULE , KDCOPT , P_NEWCODEOPTION , KDCTENG , 
KDCKAKID , KDCKAEID , KDCKAQID , KDCMODELE , KDCKARID , P_USER , P_DATESYSTEME , P_USER , P_DATESYSTEME , KDCFLAG 
FROM KPOPTD WHERE KDCID = CODEOPTIONDTL ) ; 
  
CALL SP_DGARAN ( P_CODEOFFRE , P_VERSION , P_TYPE , P_NEWIDFORMULE , CODEOPTIONDTL , V_NEWCODEOPTIONDTL , 
P_DATESYSTEME , P_USER , P_TRAITEMENT ) ; 
  
END FOR ; 
  
END P1  ; 
  

  

