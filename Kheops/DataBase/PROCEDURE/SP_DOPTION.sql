CREATE PROCEDURE SP_DOPTION ( 
	IN P_CODEOFFRE CHAR(9) , 
	IN P_VERSION INTEGER , 
	IN P_TYPE CHAR(1) , 
	IN P_CODEFORMULE INTEGER , 
	IN P_NEWCODEFORMULE INTEGER , 
	IN P_NEWIDFORMULE INTEGER , 
	IN P_DATESYSTEME CHAR(8) , 
	IN P_USER CHAR(15) , 
	IN P_TRAITEMENT CHAR(1) ) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC SP_DOPTION 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	CLOSQLCSR = *ENDMOD , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = ZALBINKHEO , 
	DYNDFTCOL = *YES , 
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC 
  
DECLARE V_NEWCODEOPTION INTEGER DEFAULT 0 ; 
  
FOR FORM_LOOP AS FREE_LIST CURSOR FOR 
SELECT KDBID CODEOPTION FROM KPOPT 
WHERE KDBIPB = P_CODEOFFRE AND KDBALX = P_VERSION AND KDBTYP = P_TYPE AND KDBFOR = P_CODEFORMULE 
DO 
  
CALL SP_SECOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KDBID' , CODEOPTION , V_NEWCODEOPTION ) ; 
IF ( V_NEWCODEOPTION = 0 ) THEN 
CALL SP_NCHRONO ( 'KDBID' , V_NEWCODEOPTION ) ; 
CALL SP_INCOPID ( P_CODEOFFRE , P_VERSION , P_TYPE , 'KDBID' , CODEOPTION , V_NEWCODEOPTION ) ; 
END IF ; 
  
INSERT INTO KPOPT ( KDBID , KDBTYP , KDBIPB , KDBALX , KDBFOR , KDBKDAID , KDBOPT , KDBDESC , KDBFORR , KDBKDAIDR , KDBSPEID , KDBCRU , KDBCRD , KDBCRH , 
KDBMAJU , KDBMAJD , KDBMAJH , KDBPAQ , KDBACQ , KDBTMC , KDBTFF , KDBTFP , KDBPRO , KDBTMI , KDBTFM , KDBCMC , KDBCFO , KDBCHT , KDBCTT , KDBCCP , KDBVAL , KDBVAA , KDBVAW , KDBVAT , KDBVAU , 
KDBVAH , KDBIVO , KDBIVA , KDBIVW , KDBAVE , KDBAVG , KDBECO , KDBAVA , KDBAVM , KDBAVJ , KDBEHH , KDBEHC , KDBEHI , KDBASVALO , KDBASVALA , KDBASVALW , KDBASUNIT , KDBASBASE , KDBGER ) 
( SELECT V_NEWCODEOPTION , P_TYPE , P_CODEOFFRE , P_VERSION , P_NEWIDFORMULE , P_NEWCODEFORMULE , KDBOPT , '' , 
0 , 0 , 0 , P_USER , P_DATESYSTEME , KDBCRH , P_USER , P_DATESYSTEME , KDBMAJH , KDBPAQ , KDBACQ , KDBTMC , KDBTFF , KDBTFP , KDBPRO , KDBTMI , KDBTFM , KDBCMC , KDBCFO , KDBCHT , KDBCTT , KDBCCP , KDBVAL , KDBVAA , KDBVAW , KDBVAT , KDBVAU , 
KDBVAH , KDBIVO , KDBIVA , KDBIVW , KDBAVE , KDBAVG , KDBECO , KDBAVA , KDBAVM , KDBAVJ , KDBEHH , KDBEHC , KDBEHI , KDBASVALO , KDBASVALA , KDBASVALW , KDBASUNIT , KDBASBASE , KDBGER 
FROM KPOPT WHERE KDBID = CODEOPTION ) ; 
  
CALL SP_DKPOPTD ( P_CODEOFFRE , P_VERSION , P_TYPE , P_NEWIDFORMULE , CODEOPTION , V_NEWCODEOPTION , 
P_DATESYSTEME , P_USER , P_TRAITEMENT ) ; 
  
CALL SP_DPOPTAP ( P_CODEOFFRE , P_VERSION , P_TYPE , P_NEWIDFORMULE , CODEOPTION , V_NEWCODEOPTION , 
P_DATESYSTEME , P_USER , P_TRAITEMENT ) ; 
  
END FOR ; 
  
END P1  ; 
  

  

