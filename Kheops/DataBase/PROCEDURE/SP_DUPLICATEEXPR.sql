CREATE PROCEDURE SP_DUPLICATEEXPR ( 
	IN P_CODEOFFRE CHAR(9) , 
	IN P_VERSION INTEGER , 
	IN P_TYPE CHAR(1) , 
	IN P_CODEAVN INTEGER , 
	IN P_TYPEEXPR CHAR(9) , 
	IN P_CODEEXPR INTEGER , 
	OUT P_NEWIDEXPR INTEGER ) 
	LANGUAGE SQL 
	SPECIFIC SP_DUPLICATEEXPR 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	CLOSQLCSR = *ENDMOD , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = ZALBINKHEO , 
	DYNDFTCOL = *YES , 
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC 
  
	DECLARE V_IDDESI INTEGER DEFAULT 0 ; 
	DECLARE V_NEWIDEXPRD INTEGER DEFAULT 0 ; 
	DECLARE V_NEWIDDESI INTEGER DEFAULT 0 ; 
	DECLARE V_DESISTR VARCHAR ( 5000 ) DEFAULT '' ; 
	DECLARE V_CODE CHAR ( 5 ) DEFAULT '' ; 
  
	CASE TRIM ( UPPER ( P_TYPEEXPR ) ) 
		WHEN 'LCI' THEN 
			SELECT KDIDESI INTO V_IDDESI FROM KPEXPLCI WHERE KDIID = P_CODEEXPR ; 
		WHEN 'FRANCHISE' THEN 
			SELECT KDKDESI INTO V_IDDESI FROM KPEXPFRH WHERE KDKID = P_CODEEXPR ; 
		ELSE 
			SET V_IDDESI = 0 ; 
	END CASE ; 
	 
	/* ENREGISTREMENT DE LA DÉSIGNATION */ 
	IF ( V_IDDESI > 0 ) THEN 
		SELECT KADDESI INTO V_DESISTR FROM KPDESI WHERE KADCHR = V_IDDESI ; 
		CALL SP_NCHRONO ( 'KADCHR' , V_NEWIDDESI ) ; 
		INSERT INTO KPDESI 
			( KADCHR , KADTYP , KADIPB , KADALX , KADPERI , KADRSQ , KADOBJ , KADDESI ) 
		VALUES 
			( V_NEWIDDESI , P_TYPE , P_CODEOFFRE , P_VERSION , '' , 0 , 0 , V_DESISTR ) ; 
	END IF ; 
  
	CASE TRIM ( UPPER ( P_TYPEEXPR ) ) 
		WHEN 'LCI' THEN 
			CALL SP_NCHRONO ( 'KDIID' , P_NEWIDEXPR ) ; 
			 
			/* RÉCUPÉRATION DU NOUVEAU CODE DE L'EXPRESSION COMPLEXE LCI */ 
			/* SELECT 'L' CONCAT RIGHT ( REPEAT ( '0' , 2 ) || IFNULL ( MAX ( CAST ( SUBSTRING ( KDILCE , 2 ) AS INT ) ) + 1 , 1 ) , 2 ) INTO V_CODE     
				FROM KPEXPLCI     
				WHERE KDITYP = P_TYPE AND TRIM ( KDIIPB ) = TRIM ( P_CODEOFFRE ) AND KDIALX = P_VERSION AND KDITYP = P_TYPE     
					AND SUBSTRING ( KDILCE , 1 , 3 ) <> 'EXP' AND SUBSTRING ( KDILCE , 1 , 1 ) = 'L' ;			 */ 
			/* MISE EN COMMENTAIRE LE 2015-03-30 RÉDUCTION DU NOMBRE DE CARACTÈRES DE L'EXPRESSION COMPLEXE */ 
			SELECT 'LL' CONCAT RIGHT ( REPEAT ( '0' , 3 ) || IFNULL ( MAX ( CAST ( SUBSTRING ( KDILCE , 3 ) AS INT ) ) + 1 , 1 ) , 3 ) INTO V_CODE 
				FROM KPEXPLCI 
				WHERE KDITYP = P_TYPE AND TRIM ( KDIIPB ) = TRIM ( P_CODEOFFRE ) AND KDIALX = P_VERSION AND KDITYP = P_TYPE 
					AND SUBSTRING ( KDILCE , 1 , 3 ) <> 'EXP' AND SUBSTRING ( KDILCE , 1 , 2 ) = 'LL' ;			 
			 
			/* INSERTION DE L'EXPRESSION COMPLEXE */ 
			INSERT INTO KPEXPLCI 
				( KDIID , KDITYP , KDIIPB , KDIALX , KDILCE , KDIDESC , KDIDESI , KDIORI , KDIMODI ) 
			( SELECT P_NEWIDEXPR , P_TYPE , P_CODEOFFRE , P_VERSION , V_CODE , KDIDESC , V_NEWIDDESI , 'S' , 'O' 
				FROM KPEXPLCI WHERE KDIID = P_CODEEXPR ) ; 
  
			/* INSERTION DES DÉTAILS DE L'EXPRESSION COMPLEXE */ 
			FOR LOOP_LCIMDL AS FREE_LIST CURSOR FOR 
				SELECT KDJORDRE ORDRE , KDJLCVAL LCIVAL , KDJLCVAU LCIUNITE , KDJLCBASE LCITYPE , 
						KDJLOVAL CONCUVAL , KDJLOVAU CONCUUNITE , KDJLOBASE CONCUTYPE 
				FROM KPEXPLCID WHERE KDJKDIID = P_CODEEXPR 
				DO					 
					CALL SP_NCHRONO ( 'KDJID' , V_NEWIDEXPRD ) ; 
					INSERT INTO KPEXPLCID 
						( KDJID , KDJKDIID , KDJORDRE , KDJLCVAL , KDJLCVAU , KDJLCBASE , KDJLOVAL , KDJLOVAU , KDJLOBASE ) 
					VALUES 
						( V_NEWIDEXPRD , P_NEWIDEXPR , ORDRE , LCIVAL , LCIUNITE , LCITYPE , CONCUVAL , CONCUUNITE , CONCUTYPE ) ; 
			END FOR ;				 
  
		WHEN 'FRANCHISE' THEN 
			CALL SP_NCHRONO ( 'KDKID' , P_NEWIDEXPR ) ; 
  
			/* RÉCUPÉRATION DU NOUVEAU CODE DE L'EXPRESSION COMPLEXE FRANCHISE */ 
/* 			SELECT 'F' CONCAT RIGHT ( REPEAT ( '0' , 2 ) || IFNULL ( MAX ( CAST ( SUBSTRING ( KDKFHE , 2 ) AS INT ) ) + 1 , 1 ) , 2 ) INTO V_CODE     
				FROM KPEXPFRH     
				WHERE KDKTYP = P_TYPE AND TRIM ( KDKIPB ) = TRIM ( P_CODEOFFRE ) AND KDKALX = P_VERSION     
					AND SUBSTRING ( KDKFHE , 1 , 3 ) <> 'EXP' AND SUBSTRING ( KDKFHE , 1 , 1 ) = 'F' ;  */ 
			/* MISE EN COMMENTAIRE LE 2015-03-30 RÉDUCTION DU NOMBRE DE CARACTÈRES DE L'EXPRESSION COMPLEXE */ 
			SELECT 'LF' CONCAT RIGHT ( REPEAT ( '0' , 3 ) || IFNULL ( MAX ( CAST ( SUBSTRING ( KDKFHE , 3 ) AS INT ) ) + 1 , 1 ) , 3 ) INTO V_CODE 
				FROM KPEXPFRH 
				WHERE KDKTYP = P_TYPE AND TRIM ( KDKIPB ) = TRIM ( P_CODEOFFRE ) AND KDKALX = P_VERSION 
					AND SUBSTRING ( KDKFHE , 1 , 3 ) <> 'EXP' AND SUBSTRING ( KDKFHE , 1 , 2 ) = 'LF' ; 
			 
			/* INSERTION DE L'EXPRESSION COMPLEXE */ 
			INSERT INTO KPEXPFRH 
				( KDKID , KDKTYP , KDKIPB , KDKALX , KDKFHE , KDKDESC , KDKDESI , KDKORI , KDKMODI ) 
			( SELECT P_NEWIDEXPR , P_TYPE , P_CODEOFFRE , P_VERSION , V_CODE , KDKDESC , V_NEWIDDESI , 'S' , 'O' 
				FROM KPEXPFRH WHERE KDKID = P_CODEEXPR ) ; 
  
			/* INSERTION DES DÉTAILS DE L'EXPRESSION COMPLEXE */ 
			FOR LOOP_FRHMDL AS FREE_LIST CURSOR FOR 
				SELECT KDLORDRE ORDRE , KDLFHVAL FRHVAL , KDLFHVAU FRHUNITE , KDLFHBASE FRHTYPE , KDLIND INDICE , 
						KDLIVO INDICEVAL , KDLFHMINI FRHMINI , KDLFHMAXI FRHMAXI , KDLLIMDEB LIMITEDEB , KDLLIMFIN LIMITEFIN 
				FROM KPEXPFRHD WHERE KDLKDKID = P_CODEEXPR 
				DO					 
					CALL SP_NCHRONO ( 'KDLID' , V_NEWIDEXPRD ) ; 
					INSERT INTO KPEXPFRHD 
							( KDLID , KDLKDKID , KDLORDRE , KDLFHVAL , KDLFHVAU , KDLFHBASE , KDLIND , KDLIVO , KDLFHMINI , KDLFHMAXI , KDLLIMDEB , KDLLIMFIN ) 
					VALUES 
							( V_NEWIDEXPRD , P_NEWIDEXPR , ORDRE , FRHVAL , FRHUNITE , FRHTYPE , INDICE , INDICEVAL , FRHMINI , FRHMAXI , LIMITEDEB , LIMITEFIN ) ; 
			END FOR ;				 
			 
		ELSE 
			SET P_NEWIDEXPR = 0 ; 
	END CASE ;	 
	 
END P1  ; 
  

  

