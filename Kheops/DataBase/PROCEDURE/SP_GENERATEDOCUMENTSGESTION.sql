
CREATE OR REPLACE PROCEDURE SP_GENERATEDOCUMENTSGESTION ( 
	IN P_CODEOFFRE CHAR(9) , 
	IN P_VERSION INTEGER , 
	IN P_TYPE CHAR(1) , 
	IN P_CODEAVN INTEGER , 
	IN P_SERVICE CHAR(10) , 
	IN P_ACTEGES CHAR(10) , 
	IN P_USER CHAR(10) , 
	IN P_DATENOW INTEGER , 
	IN P_HOURNOW INTEGER , 
	IN P_INIT CHAR(1) , 
	IN P_DOCSID CHAR(500) , 
	IN P_ATTESID INTEGER , 
	IN P_REGULID INTEGER) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC SP_GENERATEDOCUMENTSGESTION 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	CLOSQLCSR = *ENDMOD , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = ZALBINKHEO , 
	DYNDFTCOL = *YES , 
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC 
  
	DECLARE V_INCR INTEGER DEFAULT 0 ; 
	DECLARE V_ORDRE INTEGER DEFAULT 0 ; 
	DECLARE V_NEWIDDOC INTEGER DEFAULT 0 ; 
	DECLARE V_ORDREDOCLDW INTEGER DEFAULT 0 ; 
	DECLARE V_NEWIDDOCLW INTEGER DEFAULT 0 ; 
	DECLARE V_NEWIDDOCW1 INTEGER DEFAULT 0 ; 
	DECLARE V_NEWIDDOCW2 INTEGER DEFAULT 0 ; 
	DECLARE V_NEWIDDOCLDW INTEGER DEFAULT 0 ; 
	DECLARE V_NEWIDDOCCOMMENT INTEGER DEFAULT 0 ; 
	DECLARE V_LIBELLE CHAR ( 60 ) DEFAULT '' ; 
	DECLARE V_ICT INTEGER DEFAULT 0 ; 
	DECLARE V_INL INTEGER DEFAULT 0 ; 
	DECLARE V_AVN INTEGER DEFAULT 0 ; 
	DECLARE V_IAS INTEGER DEFAULT 0 ; 
	DECLARE V_ACTG CHAR ( 10 ) DEFAULT '' ; 
	DECLARE V_CHEMIN CHAR ( 150 ) DEFAULT '' ; 
	DECLARE V_LIBRE CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_PRINT CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_SITUATION CHAR ( 1 ) DEFAULT 'N' ; 
	DECLARE V_DOCID INTEGER DEFAULT 0 ; 
	DECLARE V_DOCCHM CHAR ( 255 ) DEFAULT '' ; 
	DECLARE V_DOCNOM CHAR ( 255 ) DEFAULT '' ; 
	DECLARE V_DOCLIB CHAR ( 255 ) DEFAULT '' ; 
	DECLARE V_COUNTDOC INTEGER DEFAULT 0 ; 
	DECLARE V_OLDDOCID INTEGER DEFAULT 0 ; 
	DECLARE V_COUNT INTEGER DEFAULT 0 ; 
	 
	DECLARE V_STG CHAR ( 1 ) DEFAULT '' ; 
	 
	DECLARE V_KEQMAIT CHAR ( 10 ) DEFAULT '' ; 
	DECLARE V_KEQLIEN INTEGER DEFAULT 0 ; 
	DECLARE V_KEQTDOC CHAR ( 10 ) DEFAULT '' ; 
	 
	DECLARE CURSORDOCGESTION CURSOR FOR 
		SELECT KELID IDLOT , KEMID IDLOTSDETAIL , KEMTYPD , KEMSIT SITUATION , KEMNTA NATURE , IFNULL ( DOC . KEQDIMP , '' ) IMPRIMABLE , IFNULL ( DOC . KEQCHM , '' ) CHEMIN , IFNULL ( DOC . KEQSTG , '' ) STATUT , IFNULL ( DOC . KEQTDOC , '' ) TYPEDOC , 
			DOC . KEQID IDDOC , IFNULL ( DOC . KEQNOM , '' ) NOMDOC , IFNULL ( DOC . KEQLIB , '' ) LIBDOC , 
			KEMTYDS TYPEDEST , KEMIDS IDDEST , KEMTYENV TYPEENVOI , IFNULL ( ENVOI . TPLIL , '' ) LIBTYPEENVOI , KEMNBEX NBEXEMPL , CAST ( IFNULL ( DOC . KEQNBEX , 0 ) AS DECIMAL ( 4 , 2 ) ) NBEXEMPLSUPP , KEMTAMP TAMPON , IFNULL ( TAMPON . TPLIL , '' ) LIBTAMPON , 
			LETTRE . KEQID IDLETTRE , IFNULL ( LETTRE . KEQTDOC , '' ) TYPELETTRE , 
			IFNULL ( LETTRE . KEQNOM , '' ) NOMLETTRE , IFNULL ( LETTRE . KEQLIB , '' ) LIBLETTRE , KEMLMAI LOTMAIL , IFNULL ( DOC . KEQTGL , '' ) ISLIBRE 
		FROM KPDOCLW 
			LEFT JOIN KPDOCLDW ON KEMKELID = KELID AND KEMSIT != 'E' 
			LEFT JOIN KPDOCW DOC ON DOC . KEQID = KEMTYPL 
			LEFT JOIN KPDOCW LETTRE ON LETTRE . KEQID = KEMDOCA 
			LEFT JOIN YYYYPAR ENVOI ON ENVOI . TCON = 'KHEOP' AND ENVOI . TFAM = 'TYENV' AND ENVOI . TCOD = KEMTYENV 
			LEFT JOIN YYYYPAR TAMPON ON TAMPON . TCON = 'KHEOP' AND TAMPON . TFAM = 'TAMP' AND TAMPON . TCOD = KEMTAMP 
		WHERE KELIPB = P_CODEOFFRE AND KELALX = P_VERSION AND KELTYP = P_TYPE 
		ORDER BY KEMORD ; 
	 
    SET P_CODEOFFRE = LPAD ( RTRIM ( P_CODEOFFRE ) , 9 , ' ' ) ;
	SET P_ACTEGES = TRIM ( P_ACTEGES ) ;

	IF ( P_INIT = 'O' ) THEN 
  
		/* TRAITEMENT DES IDS DE DOCUMENTS À GARDER */ 
		P2 : BEGIN ATOMIC 
			DECLARE V_OLDIDDOCLW INTEGER DEFAULT 0 ; 
			DECLARE V_OBJLEFT VARCHAR ( 500 ) DEFAULT '' ; 
			DECLARE V_OBJRIGHT VARCHAR ( 500 ) DEFAULT '' ; 
			DECLARE V_DOCSID VARCHAR ( 500 ) DEFAULT '' ; 
		 
			SET V_DOCSID = TRIM ( P_DOCSID ) ; 
			 
			IF ( V_DOCSID != '' ) THEN 
				SET V_DOCSID = TRIM ( V_DOCSID ) CONCAT ';' ; 
			 
				/* RECHERCHE DU LOTID */ 
				SELECT KELID INTO V_OLDIDDOCLW FROM KPDOCLW WHERE TRIM ( KELIPB ) = TRIM ( P_CODEOFFRE ) AND KELALX = P_VERSION AND KELTYP = P_TYPE ; 
		 
				CALL SP_SPLIT ( V_DOCSID , ';' , 'L' , V_OBJLEFT ) ; 
				CALL SP_SPLIT ( V_DOCSID , ';' , 'R' , V_OBJRIGHT ) ; 
	 
				-- pour chaque document à garder 
				WHILE ( TRIM ( V_OBJLEFT ) != '' ) DO 
					-- mettre le type à 9
					UPDATE KPDOCW SET KEQTYP = '9' WHERE KEQID = TRIM ( V_OBJLEFT ) ; 
					-- mettre le numéro de lot à 0
					UPDATE KPDOCLDW SET KEMKELID = 0 WHERE KEMKELID = V_OLDIDDOCLW AND KEMTYPL = TRIM ( V_OBJLEFT ) ; 
	 
					SET V_DOCSID = V_OBJRIGHT ; 
					CALL SP_SPLIT ( V_DOCSID , ';' , 'L' , V_OBJLEFT ) ; 
					CALL SP_SPLIT ( V_DOCSID , ';' , 'R' , V_OBJRIGHT ) ; 
				END WHILE ; 
	 
			END IF ; 
	 
		END P2 ; 
	 
		/* SUPPRESSION DES DOCUMENTS */ 
		/* LECTURE DU LOT */ 
		FOR LOOP_LOT AS FREE_LIST CURSOR FOR 
			SELECT KELID LOTID FROM KPDOCLW 
				WHERE KELIPB = P_CODEOFFRE AND KELALX = P_VERSION AND KELTYP = P_TYPE 
					AND KELSERV = TRIM ( P_SERVICE )  --AND TRIM ( KELACTG ) = TRIM ( P_ACTEGES ) 
		DO 
			/* SUPPRESSION DU LOT */ 
			DELETE FROM KPDOCLW WHERE KELID = LOTID ; 
	 
			FOR LOOP_LOTD AS FREE_LIST CURSOR FOR 
				SELECT KEMID LOTDID FROM KPDOCLDW 
					INNER JOIN KPDOCW ON KEMTYPL = KEQID 
				WHERE KEMKELID = LOTID 
			DO 
				/* SUPPRESSION DES DÉTAILS DE LOT */ 
				DELETE FROM KPDOCLDW WHERE KEMID = LOTDID ; 
			END FOR ; 
		END FOR ; 
	 
		/* SUPPRESSION DES DOCUMENTS GÉNÉRÉS NON LIBRE */ 
		DELETE FROM KPDOCW 
			WHERE KEQIPB = P_CODEOFFRE AND KEQALX = P_VERSION AND KEQTYP = P_TYPE 
				AND KEQSERV = TRIM ( P_SERVICE ) AND KEQECO = 'O' ;  --AND  KEQACTG = TRIM ( P_ACTEGES ) ; 
		IF ( P_CODEAVN > 0 AND TRIM ( P_ACTEGES ) != 'ATTES' ) THEN 
			SELECT PBTTR INTO P_ACTEGES FROM YPOBASE WHERE PBIPB = P_CODEOFFRE AND PBALX = P_VERSION AND PBTYP = P_TYPE ; 
		END IF ; 
		 
		SELECT TPLIL INTO V_LIBELLE FROM YYYYPAR WHERE TCON = 'KHEOP' AND TFAM = 'ACTGS' AND TCOD = P_ACTEGES ; 

		SELECT PBICT , PBIN5 , PBAVN , PBIAS , PBTTR INTO V_ICT , V_INL , V_AVN , V_IAS , V_ACTG 
		FROM YPOBASE 
		WHERE PBIPB = P_CODEOFFRE AND PBALX = P_VERSION AND PBTYP = P_TYPE ; 
	 
		/* INSERTION DANS KPDOCLW */ 
		CALL SP_NCHRONO ( 'KELID' , V_NEWIDDOCLW ) ; 
		INSERT INTO KPDOCLW 
			( KELID , KELTYP , KELIPB , KELALX , KELSUA , KELNUM , KELSBR , KELSERV , KELACTG , KELACTN , KELAVN , KELLIB , KELSTU , KELSIT , KELSTD , KELSTH , KELCRU , KELCRD , KELCRH , KELMAJU , KELMAJD , KELMAJH , KELEMI , KELIPK ) 
		VALUES 
			( V_NEWIDDOCLW , P_TYPE , P_CODEOFFRE , P_VERSION , 0 , 0 , '' , P_SERVICE , P_ACTEGES , 1 , V_AVN , V_LIBELLE , P_USER , 'A' , P_DATENOW , P_HOURNOW , P_USER , P_DATENOW , P_HOURNOW , P_USER , P_DATENOW , P_HOURNOW , '' , 0 ) ; 
	 
		SET V_ORDRE = 0 ; 
		FOR LOOP_CLAUSE AS FREE_LIST CURSOR FOR 

			SELECT PBIPB , PBALX , PBTYP , PBAVN AVN , SUBSTRING ( TPCA1 , 1 , 10 ) PCA1 , KCATYPD TYPD , KCATXL TXL , KCACLNM1 CLNM1 , KCACLNM2 CLNM2 , KCACLNM3 CLNM3 , 
					KCADOC CADOC , KCAVER VER , IFNULL ( KDULIB , '' ) LIB , IFNULL ( KDUDOC , '' ) DOC , PBICT ICT , PBIN5 INL , KCANTA NTA , KCACTX CTX , KCASIT SIT , 
					KCAETAPE ETAPE , TPCN1 CN1 
			FROM YPOBASE 
				INNER JOIN KPCLAUSE ON PBIPB = KCAIPB AND PBALX = KCAALX AND PBTYP = KCATYP AND ( ( KCASIT != '' AND KCACTX != 'SY05CP' ) OR ( KCASIT = 'V' AND KCACTX = 'SY05CP' ) )  
				INNER JOIN YYYYPAR ON TCON = 'KHEOP' AND TFAM = 'CTX' AND TCOD = KCACTX AND TPCA1 <> '' 
				LEFT JOIN KCLAUSE ON KCAKDUID = KDUID 
			WHERE PBIPB = P_CODEOFFRE AND PBALX = P_VERSION AND PBTYP = P_TYPE AND 
				( CASE P_ACTEGES WHEN 'ATTES' THEN KCASIT ELSE 'V' END ) = 'V' AND 
				( 
					( 
						( CASE P_ACTEGES WHEN 'ATTES' THEN KCAETAPE ELSE 'ATTES' END ) = 'ATTES' AND 
						( CASE P_ACTEGES WHEN '' THEN KCAETAPE ELSE '' END ) <> 'ATTES' 
					) OR 
					( 
						( CASE P_ACTEGES WHEN 'ATTES' THEN KCAPERI ELSE 'ATTES' END ) = 'ATTES' AND 
						( CASE P_ACTEGES WHEN '' THEN KCAPERI ELSE '' END ) <> 'ATTES' 
					) 
				) AND 
				( CASE P_ACTEGES WHEN 'ATTES' THEN KCACTX ELSE 'SY70ATTES' END ) = 'SY70ATTES' AND 
				( 
					( CASE P_ACTEGES WHEN 'REGUL' THEN KCACTX ELSE 'SY07REGUL' END ) = 'SY07REGUL' OR 
				  	( CASE P_ACTEGES WHEN 'REGUL' THEN KCACTX ELSE 'SY55LETTR' END ) = 'SY55LETTR' OR 
				  	( CASE P_ACTEGES WHEN 'REGUL' THEN KCACTX ELSE 'SY50BS' END ) = 'SY50BS' 
				) AND 
				( CASE P_ACTEGES WHEN 'REGUL' THEN KCAETAPE ELSE 'REGUL' END ) = 'REGUL' AND 
				( CASE P_ACTEGES WHEN '' THEN KCAETAPE ELSE '' END ) <> 'REGUL'  AND				
				 
				( CASE P_ACTEGES WHEN 'AVNRS' THEN KCAETAPE ELSE 'AVNRS' END ) = 'AVNRS' AND
				( CASE P_ACTEGES WHEN '' THEN KCAETAPE ELSE '' END ) <> 'AVNRS' AND 
				( CASE P_ACTEGES WHEN 'AVNRS' THEN KCACTX ELSE 'SY55LETTR' END ) = 'SY55LETTR'
			ORDER BY KCACHI , KCACHIS , KCAIMP , KCACXI	 
		DO 
			SET V_STG = 'N' ; 
	 
			SELECT COUNT ( * ) INTO V_COUNTDOC 
				FROM KPDOCW 
				WHERE KEQIPB = P_CODEOFFRE AND KEQALX = P_VERSION AND KEQTYP = '9' 
					AND KEQCDOC = TRIM ( CLNM1 ) CONCAT '_' CONCAT TRIM ( CLNM2 ) CONCAT '_' CONCAT TRIM ( CLNM3 ) 
					AND KEQIDS = ICT AND KEQAJT = 'N' ; 
			IF ( V_COUNTDOC = 0 ) THEN 
	 
				SELECT COUNT ( * ) INTO V_COUNTDOC FROM KPDOCW 
					WHERE KEQIPB = P_CODEOFFRE AND KEQALX = P_VERSION AND KEQTYP = P_TYPE AND TRIM ( KEQCDOC ) = TRIM ( CLNM1 ) CONCAT '_' CONCAT TRIM ( CLNM2 ) CONCAT '_' CONCAT TRIM ( CLNM3 ) ; 
		 
				IF ( V_COUNTDOC = 0 ) THEN /* INSERTION DES NOUVEAUX DOCUMENTS */ 
		 
					IF ( TRIM ( SUBSTR ( CTX , 0 , 3 ) ) = 'SY' AND TRIM ( SIT ) = 'V' ) THEN 
						SET NTA = 'O' ; 
					END IF ; 
					 
					/* AJOUT LE 12-11-2014 : V_CHEMIN VU AVEC FDP ET DAN POUR PRENDRE LE CHAMP TPCA1 CONCATENE A DOC_ */ 
					SET V_CHEMIN = '' ; 
					SELECT '//' CONCAT TRIM ( KHMSRV ) CONCAT '/' CONCAT TRIM ( KHMRAC ) CONCAT '/' CONCAT TRIM ( KHMENV ) CONCAT TRIM ( KHMCHM ) CONCAT '/' INTO V_CHEMIN FROM KCHEMIN WHERE KHMCLE = 'DOC_' CONCAT TRIM ( PCA1 ) ; 
					SET V_CHEMIN = REPLACE ( V_CHEMIN , '\\' , '/' ) ; 
	 
					/* AJOUT LE 12-03-2015 : RÉCUPÉRATION DU PRINT ET LIBRE DANS LA TABLE YYYYPAR */ 
					SELECT TPCA1 , TPCA2 INTO V_PRINT , V_LIBRE FROM YYYYPAR WHERE TCON = 'KHEOP' AND TFAM = 'TDOC' AND TCOD = TRIM ( PCA1 ) ; 
		 
					/* AJOUT LE 17-03-2015 : RÉCUPÉRATION DES DOCUMENTS EXTERNES */ 
					IF ( TYPD = 'E' AND TXL <> 0 ) THEN 
						SELECT KERID , KERLIB , KERNOM , REPLACE ( TRIM ( KERCHM ) , TRIM ( KERNOM ) , '' ) INTO V_DOCID , V_DOCLIB , V_DOCNOM , V_DOCCHM FROM KPDOCEXT WHERE KERID = TXL ; 
						IF ( V_DOCID != 0 ) THEN 
							SET LIB = V_DOCLIB ; 
							SET DOC = V_DOCNOM ; 
							SET V_CHEMIN = V_DOCCHM ; 
							SET V_STG = 'G' ; 
						END IF ; 
					END IF ; 
					 
					/* AJOUT LE 20-04-2017 : RÉCUPÉRATION DU CHEMIN DE LA CLAUSE DE RÉGULARISATION */ 
					P5 : BEGIN ATOMIC 
						DECLARE V_OBJLEFT VARCHAR ( 500 ) DEFAULT '' ; 
						DECLARE V_OBJRIGHT VARCHAR ( 500 ) DEFAULT '' ; 
						DECLARE V_DOCNAME CHAR ( 500 ) DEFAULT '' ; 
						DECLARE V_OLDNAME CHAR ( 500 ) DEFAULT '' ; 
						DECLARE V_NEWNAME CHAR ( 500 ) DEFAULT '' ; 
						IF ( PCA1 = 'REGUL' AND TXL <> 0 ) THEN 
							SELECT KEQCHM INTO V_DOCNAME FROM KPDOC WHERE KEQID = TXL ; 
							SET V_OLDNAME = TRIM ( V_DOCNAME ) ; 
							SET V_DOCNAME = REPLACE ( REPLACE ( V_DOCNAME , '\' , '/' ) , '//' , '' ) ; 
							CALL SP_SPLIT ( V_DOCNAME , '/' , 'L' , V_OBJLEFT ) ; 
							CALL SP_SPLIT ( V_DOCNAME , '/' , 'R' , V_OBJRIGHT ) ;				 
							WHILE ( TRIM ( V_OBJLEFT ) != '' AND V_COUNT < 100 ) DO 
								SET V_COUNT = V_COUNT + 1 ; 
								SET V_DOCNAME = V_OBJRIGHT ; 
								CALL SP_SPLIT ( V_DOCNAME , '/' , 'L' , V_OBJLEFT ) ; 
								CALL SP_SPLIT ( V_DOCNAME , '/' , 'R' , V_OBJRIGHT ) ; 
							END WHILE ; 
							SET DOC = TRIM ( V_OBJRIGHT ) ; 
							SET V_CHEMIN = TRIM ( V_CHEMIN ) CONCAT P_CODEOFFRE CONCAT '_' CONCAT RIGHT ( REPEAT ( '0' , 4 ) || P_VERSION , 4 ) CONCAT '_' CONCAT P_TYPE CONCAT '/Temp/' ; 
							SET V_NEWNAME = TRIM ( V_CHEMIN ) CONCAT '/' CONCAT TRIM ( V_OBJRIGHT ) ; 
							SET V_STG = 'G' ; 
							INSERT INTO KPCOPDC 
								( KHQIPB , KHQALX , KHQTYP , KHQAVN , KHQOLDC , KHQCODE , KHQNOMD , KHQTABLE ) 
							VALUES 
								( P_CODEOFFRE , P_VERSION , P_TYPE , P_CODEAVN , V_OLDNAME , 0 , V_NEWNAME , 'KPDOCW' ) ; 
						END IF ; 
					END P5 ; 
					
					SET V_INCR = 0 ; 
					SELECT IFNULL ( MAX ( KEQORD ) , 0 ) + 1 INTO V_INCR FROM KPDOCW WHERE KEQIPB = P_CODEOFFRE AND KEQALX = P_VERSION AND KEQTYP = P_TYPE ; 
					CALL SP_NCHRONO ( 'KEQID' , V_NEWIDDOC ) ; 
					 
					SET V_KEQMAIT = '' ; 
					SET V_KEQLIEN = 0 ; 
					SET V_KEQTDOC = PCA1 ; 
					 
					IF (  P_ACTEGES = 'ATTES' ) THEN 
						SET V_KEQMAIT = 'KPATT' ; 
						SET V_KEQLIEN = P_ATTESID ; 
						SET V_KEQTDOC = 'ATTES' ; 
					END IF ;		
					IF ( TRIM ( P_ACTEGES ) = 'REGUL' ) THEN 
						SET V_KEQMAIT = 'KPRGU' ; 
						SET V_KEQLIEN = P_REGULID ; 
					END IF ;	
	 
					INSERT INTO KPDOCW 
						( KEQID , KEQTYP , KEQIPB , KEQALX , KEQSUA , KEQNUM , KEQSBR , KEQSERV , KEQACTG , KEQACTN , KEQECO , KEQAVN , KEQETAP , KEQKEMID , KEQORD , KEQTDOC , KEQKESID , 
							KEQAJT , KEQTRS , KEQMAIT , KEQLIEN , KEQCDOC , KEQVER , KEQLIB , KEQNTA , KEQDACC , KEQTAE , KEQNOM , KEQCHM , KEQSTU , KEQSIT , KEQSTD , KEQSTH , KEQENVU , 
							KEQENVD , KEQENVH , KEQTEDI , KEQORID , KEQTYDS , KEQTYI , KEQIDS , KEQINL , KEQNBEX , KEQCRU , KEQCRD , KEQCRH , KEQMAJU , KEQMAJD , KEQMAJH , KEQSTG , 
							KEQTGL , KEQDIMP ) 
					VALUES 
						( V_NEWIDDOC , P_TYPE , P_CODEOFFRE , P_VERSION , 0 , 0 , 0 , 'PRODU' , P_ACTEGES , 1 , 'O' , AVN , 'FIN' , 0 , CN1 , V_KEQTDOC , TXL , 
							'N' , 'N' , V_KEQMAIT , V_KEQLIEN , TRIM ( CLNM1 ) CONCAT '_' CONCAT TRIM ( CLNM2 ) CONCAT '_' CONCAT TRIM ( CLNM3 ) , VER , LIB , NTA , 'N' , '' , DOC , TRIM ( V_CHEMIN ) , P_USER , 'V' , P_DATENOW , P_HOURNOW , P_USER , 
							P_DATENOW , P_HOURNOW , 'O' , 0 , 'CT' , '' , ICT , INL , 0 , P_USER , P_DATENOW , P_HOURNOW , P_USER , P_DATENOW , P_HOURNOW , V_STG , 
							V_LIBRE , V_PRINT ) ; 
	 
					/* AJOUT LE 12-03-2015 : TRAITEMENT DE LA SITUATION DU DÉTAIL LOT */ 
					SET V_SITUATION = 'N' ; 
					IF ( NTA = 'P' OR NTA = 'O' ) THEN 
						SET V_SITUATION = 'O' ; 
					END IF ; 
	 
					SET V_ORDRE = V_ORDRE + 1 ; 
					CALL SP_NCHRONO ( 'KEMID' , V_NEWIDDOCLDW ) ; 
  
					INSERT INTO KPDOCLDW 
						( KEMID , KEMKELID , KEMORD , KEMTYPD , KEMTYPL , KEMTYENV , KEMTAMP , KEMTYDS , KEMTYI , KEMIDS , KEMINL , KEMNBEX , KEMDOCA , KEMTYDIF , 
							KEMLMAI , KEMAEMO , KEMAEM , KEMKESID , KEMSTU , KEMSIT , KEMSTD , KEMSTH , KEMENVU , KEMENVD , KEMENVH , KEMNTA ) 
					VALUES 
						( V_NEWIDDOCLDW , V_NEWIDDOCLW , CN1 , TYPD , V_NEWIDDOC , '' , 'O' , 'CT' , '' , ICT , INL , 1 , 0 , 'COUR' , 
							0 , '' , '' , 0 , P_USER , V_SITUATION , P_DATENOW , P_HOURNOW , '' , 0 , 0 , NTA ) ; 
				ELSE 
					SELECT KEQID INTO V_OLDDOCID FROM KPDOCW 
						WHERE KEQIPB = P_CODEOFFRE AND KEQALX = P_VERSION AND KEQTYP = P_TYPE 
							AND TRIM ( KEQCDOC ) = TRIM ( CLNM1 ) CONCAT '_' CONCAT TRIM ( CLNM2 ) CONCAT '_' CONCAT TRIM ( CLNM3 ) ; 
			 
					UPDATE KPDOCLDW SET KEMKELID = V_NEWIDDOCLW WHERE KEMTYPL = V_OLDDOCID ; 
				END IF ; 
			END IF ; 
		END FOR ; 
	 
	    -- JCH : KPDOCH IS USED ONLY IN UNUSED SPs
		-- /* AJOUT DES ENREGISTREMENTS DE KPDOCW */ 
		-- FOR LOOP_DOCH AS FREE_LIST CURSOR FOR 
		-- 	SELECT KEQID DOCHID FROM KPDOCH WHERE KEQIPB = P_CODEOFFRE AND KEQALX = P_VERSION AND KEQTYP = P_TYPE AND KEQSIT = 'V' AND KEQTGL = 'L' 
		-- DO 
		-- 	/*CORRECTION SLA 05/02/2015 POUR ACCORD AVEC SPEC GESTION DES DOCUMENTS V2 P.23*/ 
		-- 	INSERT INTO KPDOCW 
		-- 		( SELECT * FROM KPDOCH WHERE KEQID = DOCHID AND KEQSIT = 'V' AND KEQTGL = 'L' ) ; 
		-- END FOR ; 

		-- JCH : KPDOCTX IS NOT USED	 
		-- /* AJOUT DES COMMENTAIRES DANS KPDOCW */ 
		-- FOR LOOP_COMMENT AS FREE_LIST CURSOR FOR 
		-- 	SELECT KDOC2 . KEQID DOCID , KESTXT DOCCOMMENT 
		-- 		FROM KPDOCH KDOC1 
		-- 			INNER JOIN KPDOCW KDOC2 ON KDOC1 . KEQTYP = KDOC2 . KEQTYP AND KDOC1 . KEQIPB = KDOC2 . KEQIPB AND KDOC1 . KEQALX = KDOC2 . KEQALX AND KDOC1 . KEQSERV = KDOC2 . KEQSERV 
		-- 				AND KDOC1 . KEQACTG = KDOC2 . KEQACTG AND KDOC1 . KEQAVN = KDOC2 . KEQAVN AND KDOC1 . KEQETAP = KDOC2 . KEQETAP AND KDOC1 . KEQTDOC = KDOC2 . KEQTDOC 
		-- 				AND KDOC1 . KEQMAIT = KDOC2 . KEQMAIT AND KDOC1 . KEQLIEN = KDOC2 . KEQLIEN AND KDOC1 . KEQCDOC = KDOC2 . KEQCDOC 
		-- 			INNER JOIN KPDOCTX ON KDOC1 . KEQKESID = KESID 
		-- 		WHERE KDOC1 . KEQIPB = P_CODEOFFRE AND KDOC1 . KEQALX = P_VERSION AND KDOC1 . KEQTYP = P_TYPE 
		-- 			AND KDOC1 . KEQSIT = 'V' AND KDOC1 . KEQTGL <> 'L' AND KDOC1 . KEQTRS <> 'O' AND KDOC1 . KEQKESID <> 0 
		-- DO 
		-- 	CALL SP_NCHRONO ( 'KESID' , V_NEWIDDOCCOMMENT ) ; 
		-- 	INSERT INTO KPDOCTX 
		-- 		( KESID , KESTXT ) 
		-- 	VALUES 
		-- 		( V_NEWIDDOCCOMMENT , DOCCOMMENT ) ; 
	 
		-- 	UPDATE KPDOCW SET KEQKESID = V_NEWIDDOCCOMMENT WHERE KEQID = DOCID ; 
		-- END FOR ; 
	 
		/* SUPPRESSION DU LOT SI PAS DE DOCUMENTS */ 
		SET V_COUNTDOC = 0 ; 
		SELECT COUNT ( * ) INTO V_COUNTDOC FROM KPDOCW WHERE KEQIPB = P_CODEOFFRE AND KEQALX = P_VERSION AND KEQTYP = P_TYPE ; 
		IF ( V_COUNTDOC = 0 ) THEN 
			DELETE FROM KPDOCLW WHERE KELIPB = P_CODEOFFRE AND KELALX = P_VERSION AND KELTYP = P_TYPE ; 
		END IF ; 
	 
		/* REINSERTION DES IDS DE DOCUMENTS À GARDER */ 
		P3 : BEGIN ATOMIC 
			DECLARE V_OLDIDDOCLW INTEGER DEFAULT 0 ; 
			DECLARE V_OBJLEFT VARCHAR ( 500 ) DEFAULT '' ; 
			DECLARE V_OBJRIGHT VARCHAR ( 500 ) DEFAULT '' ; 
			DECLARE V_DOCSID VARCHAR ( 500 ) DEFAULT '' ; 
	 
			SET V_DOCSID = TRIM ( P_DOCSID ) ; 
			 
			IF ( V_DOCSID != '' ) THEN 
				SET V_DOCSID = TRIM ( V_DOCSID ) CONCAT ';' ; 
	 
				CALL SP_SPLIT ( V_DOCSID , ';' , 'L' , V_OBJLEFT ) ; 
				CALL SP_SPLIT ( V_DOCSID , ';' , 'R' , V_OBJRIGHT ) ; 
	 
				WHILE ( TRIM ( V_OBJLEFT ) != '' ) DO 
					UPDATE KPDOCW SET KEQTYP = P_TYPE , KEQACTG = P_ACTEGES WHERE KEQID = TRIM ( V_OBJLEFT ) ; 
					UPDATE KPDOCLDW SET KEMKELID = V_NEWIDDOCLW WHERE KEMKELID = 0 AND KEMTYPL = TRIM ( V_OBJLEFT ) ; 
				 
					SET V_DOCSID = V_OBJRIGHT ; 
					CALL SP_SPLIT ( V_DOCSID , ';' , 'L' , V_OBJLEFT ) ; 
					CALL SP_SPLIT ( V_DOCSID , ';' , 'R' , V_OBJRIGHT ) ; 
				END WHILE ; 
	 
			END IF ; 
			 
			UPDATE KPDOCLW SET KELACTG = P_ACTEGES WHERE KELID = V_NEWIDDOCLW ; 
	 
		END P3 ; 
	 
	END IF ; 
	OPEN CURSORDOCGESTION ; 
	 
END P1  ; 
  

  

