CREATE PROCEDURE SP_GETLISTMOUVTGAR ( 
	IN P_CODEOFFRE CHAR(9) , 
	IN P_VERSION INTEGER , 
	IN P_TYPE CHAR(1) , 
	IN P_CODERSQ INTEGER , 
	IN P_CODEFOR INTEGER , 
	IN P_IDGAR INTEGER , 
	IN P_IDREGUL INTEGER , 
	IN P_ISREADONLY INTEGER ) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC SP_GETLISTMOUVTGAR 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	CLOSQLCSR = *ENDMOD , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = ZALBINKHEO , 
	DYNDFTCOL = *YES , 
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC 
  
DECLARE V_COUNT INTEGER DEFAULT 0 ; 
DECLARE V_COUNT1 INTEGER DEFAULT 0 ; 
DECLARE COMPTEUR INTEGER DEFAULT 0 ; 
DECLARE V_QUERY VARCHAR ( 15000 ) DEFAULT '' ; 
DECLARE V_KHYID INTEGER DEFAULT 0 ; 
DECLARE CURSOMOUVT CURSOR FOR	 
				 

SELECT KHXID CODE , KHXSIT SITUATION , KHXDEBP DATEDEB , KHXFINP DATEFIN , 
CASE WHEN NULLIF ( KHXCU2 , '' ) IS NULL THEN KHXBAS ELSE KHXCA2 END ASSIETTE , 
CASE WHEN NULLIF ( KHXCU2 , '' ) IS NULL THEN CASE WHEN KHXBAU = 'D' THEN KHXBAM ELSE KHXBAT END ELSE CASE WHEN KHXCU2 = 'D' THEN KHXCP2 ELSE KHXCT2 END END TAUXFORFAITHTVALEUR , 
CASE WHEN NULLIF ( KHXCU2 , '' ) IS NULL THEN KHXBAU ELSE KHXCU2 END TAUXFORFAITHTUNITE , KHXMHT MONTANTREGULHF 
FROM KPRGUG 
WHERE KHXKHWID = P_IDREGUL AND KHXKDEID = P_IDGAR ; 
  
SELECT COUNT ( * ) INTO V_COUNT FROM KPRGUG WHERE KHXKHWID = P_IDREGUL AND KHXKDEID = P_IDGAR ; 
IF ( P_ISREADONLY = 0 AND V_COUNT <= 0 ) THEN 
  
FOR REGULLOOP AS FREE_LIST CURSOR FOR 
  
SELECT KHYTYP V_KHYTYP , KHYIPB V_KHYIPB , KHYALX V_KHYALX , KHYAVN V_KHYAVN , KHYRSQ V_KHYRSQ , KHYFOR V_KHYFOR , KHYKDEID V_KHYKDEID , 
					KHYGARAN V_KHYGARAN , KHYDEBP V_KHYDEBP , KHYFINP V_KHYFINP , KHYTRG V_KHYTRG , KHYNPE V_KHYNPE , KHYVEN V_KHYVEN , KHYCAF V_KHYCAF , KHYCAU V_KHYCAU , KHYCAE V_KHYCAE , 
					KHYCNH V_KHYCNH , KHYCNT V_KHYCNT , KHYGRM V_KHYGRM , KHYDM1 V_KHYDM1 , KHYDT1 V_KHYDT1 , KHYDM2 V_KHYDM2 , KHYDT2 V_KHYDT2 , KHYCOE V_KHYCOE , KHYCA1 V_KHYCA1 , KHYCT1 V_KHYCT1 , 
					KHYCU1 V_KHYCU1 , KHYCP1 V_KHYCP1 , KHYCX1 V_KHYCX1 , KHYCA2 V_KHYCA2 , KHYCT2 V_KHYCT2 , KHYCU2 V_KHYCU2 , KHYCP2 V_KHYCP2 , KHYCX2 V_KHYCX2 , KHYAJU V_KHYAJU , KHYLMR V_KHYLMR , KHYMBA V_KHYMBA , KHYTEN V_KHYTEN , KHYBRG V_KHYBRG , KHYBRL V_KHYBRL , KHYBAS V_KHYBAS , KHYBAT V_KHYBAT , KHYBAU V_KHYBAU , KHYBAM V_KHYBAM , 
					KHYXF1 V_KHYXF1 , KHYXB1 V_KHYXB1 , KHYXM1 V_KHYXM1 , KHYXF2 V_KHYXF2 , KHYXB2 V_KHYXB2 , KHYXM2 V_KHYXM2 , KHYXF3 V_KHYXF3 , KHYXB3 V_KHYXB3 , KHYXM3 V_KHYXM3 , 
					KHYREG V_KHYREG , KHYPEI V_KHYPEI , KHYKEA V_KHYKEA , KHYPBP V_KHYPBP , KHYKTD V_KHYKTD , 
					KHYASV V_KHYASV , KHYPBT V_KHYPBT , KHYSIP V_KHYSIP , KHYPBS V_KHYPBS , KHYRIS V_KHYRIS , KHYPBR V_KHYPBR , KHYRIA V_KHYRIA 
					FROM KPRGUWP WHERE TRIM ( KHYIPB ) = P_CODEOFFRE AND KHYALX = P_VERSION AND KHYTYP = P_TYPE AND KHYRSQ = P_CODERSQ AND KHYFOR = P_CODEFOR AND KHYKDEID = P_IDGAR  
  
DO 
SET V_KHYID = 0 ; 
CALL SP_NCHRONO ( 'KHXID' , V_KHYID ) ; 
  
INSERT INTO KPRGUG ( KHXID , KHXKHWID , KHXTYP , KHXIPB , KHXALX , KHXAVN , KHXRSQ , KHXFOR , KHXKDEID , 
					KHXGARAN , KHXDEBP , KHXFINP , KHXSIT , KHXTRG , KHXNPE , KHXVEN , KHXCAF , KHXCAU , KHXCAE , KHXMHC , KHXFRC , KHXFR0 , KHXMHT , KHXMTX , KHXMTT , 
					KHXCNH , KHXCNT , KHXGRM , KHXPRO , KHXECH , KHXECT , KHXEMH , KHXEMT , KHXDM1 , KHXDT1 , KHXDM2 , KHXDT2 , KHXCOE , KHXCA1 , KHXCT1 , KHXCU1 , KHXCP1 , 
					KHXCX1 , KHXCA2 , KHXCT2 , KHXCU2 , KHXCP2 , KHXCX2 , KHXAJU , KHXLMR , KHXMBA , KHXTEN , KHXHON , KHXHOX , KHXBRG , KHXBRL , KHXBAS , KHXBAT , KHXBAU , KHXBAM , 
					KHXXF1 , KHXXB1 , KHXXM1 , KHXXF2 , KHXXB2 , KHXXM2 , KHXXF3 , KHXXB3 , KHXXM3 , KHXREG , KHXPEI , KHXKEA , KHXPBP , KHXKTD , KHXASV , KHXPBT , KHXSIP , KHXPBS , KHXRIS , KHXPBR , KHXRIA ) 
  
				VALUES ( V_KHYID , P_IDREGUL , V_KHYTYP , V_KHYIPB , V_KHYALX , V_KHYAVN , V_KHYRSQ , V_KHYFOR , V_KHYKDEID , 
					V_KHYGARAN , V_KHYDEBP , V_KHYFINP , 'N' , V_KHYTRG , V_KHYNPE , V_KHYVEN , V_KHYCAF , V_KHYCAU , V_KHYCAE , 0 , 'N' , 'N' , 0 , 0 , 0 , 
					V_KHYCNH , V_KHYCNT , V_KHYGRM , 0 , ( V_KHYDM1 + V_KHYDM2 ) , ( V_KHYDT1 + V_KHYDT2 ) , 0 , 0 , V_KHYDM1 , V_KHYDT1 , V_KHYDM2 , V_KHYDT2 , V_KHYCOE , V_KHYCA1 , V_KHYCT1 , V_KHYCU1 , V_KHYCP1 , 
					V_KHYCX1 , V_KHYCA2 , V_KHYCT2 , V_KHYCU2 , V_KHYCP2 , V_KHYCX2 , V_KHYAJU , V_KHYLMR , V_KHYMBA , V_KHYTEN , 0 , '' , V_KHYBRG , V_KHYBRL , V_KHYBAS , V_KHYBAT , V_KHYBAU , V_KHYBAM , 
					V_KHYXF1 , V_KHYXB1 , V_KHYXM1 , V_KHYXF2 , V_KHYXB2 , V_KHYXM2 , V_KHYXF3 , V_KHYXB3 , V_KHYXM3 , V_KHYREG , V_KHYPEI , V_KHYKEA , V_KHYPBP , V_KHYKTD , 
					V_KHYASV , V_KHYPBT , V_KHYSIP , V_KHYPBS , V_KHYRIS , V_KHYPBR , V_KHYRIA ) ;	 

END FOR ; 
  
END IF ; 
OPEN CURSOMOUVT ; 
	 
END P1  ; 
  

  

