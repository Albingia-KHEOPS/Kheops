CREATE PROCEDURE SP_GETLISTSUIVIDOCPLAT ( 
	IN P_CODEOFFRE CHAR(9) , 
	IN P_VERSION CHAR(4) , 
	IN P_TYPE CHAR(1) , 
	IN P_USER CHAR(10) , 
	IN P_AVENANT INTEGER , 
	IN P_NUMLOT INTEGER , 
	IN P_SITUATION CHAR(1) , 
	IN P_DATEDEBSITUATION INTEGER , 
	IN P_DATEFINSITUATION INTEGER , 
	IN P_UNITESERVICE CHAR(10) , 
	IN P_DATEDEBEDITION INTEGER , 
	IN P_DATEFINEDITION INTEGER , 
	IN P_TYPEDESTINATAIRE CHAR(2) , 
	IN P_DESTINATAIRE INTEGER , 
	IN P_INTERLOCUTEUR INTEGER , 
	IN P_TYPEDOC CHAR(10) , 
	IN P_COURRIERTYPE CHAR(20) , 
	IN P_WARNING CHAR(1) , 
	IN P_STARTLINE INTEGER , 
	IN P_ENDLINE INTEGER , 
	OUT P_COUNT INTEGER ) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC SP_GETLISTSUIVIDOCPLAT 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	CLOSQLCSR = *ENDMOD , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = ZALBINKHEO , 
	DYNDFTCOL = *YES , 
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC 
	DECLARE V_QUERY VARCHAR ( 8000 ) DEFAULT '' ; 
	DECLARE V_WHEREAND VARCHAR ( 10 ) DEFAULT ' AND ' ;	 
	 
	DECLARE V_QUERYSELECT VARCHAR ( 8000 ) DEFAULT '' ; 
	DECLARE V_QUERYCOUNT VARCHAR ( 8000 ) DEFAULT '' ; 
	 
	DECLARE CURSORSELECT CURSOR WITH RETURN FOR SQL_STATEMENT ; 
	DECLARE CURSORCOUNT CURSOR FOR SQL_STATEMENTCOUNT ; 
	 
	SET V_QUERYSELECT = 'SELECT CURAVN, LOTID, LOTLIB, CODEUTILISATEUR, NOMUTILISATEUR, PRENOMUTILISATEUR, UNITESERVICE, TYPEAFFAIRE, CODEOFFRE, VERSION, LOTDETAILID, 
		CODESITUATION, DATESITUATION, HEURESITUATION, UTILISATEURSITUATION, ACTEGESTION, ACTEGESTIONLIB, NUMINTERNE, NUMEXTERNE, NOMDOC, CHEMINDOC, DOCID, 
		TYPEDOC, EMPTYLINE, CODEDOC, SERVDOC, CREATEDOC, MODIFDOC, TYPEGENDOC, TYPOEDITDOC, TYPEDOCLIB, TYPEDESTINATAIRE, TYPEINTERVENANT, CODEDESTINATAIRE, NOMDESTINATAIRE,
		CODEINTERLOCUTEUR, NOMINTERLOCUTEUR, CODEDIFFUSION, LIBDIFFUSION, DOCEXT, 
		LINE FROM (' ; 
	 
	SET V_QUERYCOUNT = 'SELECT COUNT(*) FROM (' ; 
	 
	SET V_QUERY = TRIM ( V_QUERY ) CONCAT ' SELECT TABRECH.*, ROW_NUMBER() OVER (ORDER BY CODEOFFRE, ACTEGESTION, NUMINTERNE, TYPEDOC, CODEDOC, CODEDESTINATAIRE, DATESITUATION DESC, HEURESITUATION DESC) AS LINE
		FROM (SELECT * FROM V_RECHERCHESUIVIDOC) TABRECH
		WHERE CODEOFFRE NOT LIKE ''CV%''' ; 
	 
	IF ( P_CODEOFFRE IS NOT NULL AND P_CODEOFFRE <> '' ) THEN 
		SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' TRIM(CODEOFFRE) = ''' CONCAT TRIM ( P_CODEOFFRE ) CONCAT '''' ; 
		SET V_WHEREAND = ' AND ' ; 
	END IF ; 
  
	IF ( P_VERSION IS NOT NULL AND P_VERSION <> '' ) THEN 
		SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' VERSION = ' CONCAT P_VERSION ; 
		SET V_WHEREAND = ' AND ' ; 
	END IF ; 
	 
	IF ( P_TYPE IS NOT NULL AND P_TYPE <> '' ) THEN 
		SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' TYPEAFFAIRE = ''' CONCAT P_TYPE CONCAT '''' ; 
		SET V_WHEREAND = ' AND ' ; 
	END IF ; 
	 
	IF ( P_AVENANT >= 0 ) THEN 
		SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' NUMINTERNE = ' CONCAT P_AVENANT ; 
		SET V_WHEREAND = ' AND ' ; 
		 
	ELSE 
		SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' NUMINTERNE > ' CONCAT P_AVENANT ; 
		SET V_WHEREAND = ' AND ' ; 
		 
	END IF ; 
  
  
  
	IF ( P_NUMLOT > 0 ) THEN 
		SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' LOTID = ' CONCAT P_NUMLOT ; 
		SET V_WHEREAND = ' AND ' ; 
	END IF ; 
	 
	IF ( P_SITUATION IS NOT NULL AND P_SITUATION <> '' ) THEN 
		SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' LOWER(CODESITUATION) = ''' CONCAT LOWER ( P_SITUATION ) CONCAT '''' ; 
		SET V_WHEREAND = ' AND ' ; 
	END IF ; 
  
	IF ( P_DATEDEBSITUATION > 0 ) THEN 
		SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' DATESITUATION >= ' CONCAT P_DATEDEBSITUATION ; 
		SET V_WHEREAND = ' AND ' ; 
	END IF ; 
  
	IF ( P_DATEFINSITUATION > 0 ) THEN 
		SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' DATESITUATION <= ' CONCAT P_DATEFINSITUATION ; 
		SET V_WHEREAND = ' AND ' ; 
	END IF ; 
  
	IF ( P_UNITESERVICE IS NOT NULL AND P_UNITESERVICE <> '' ) THEN 
		SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' LOWER(UNITESERVICE) = ''' CONCAT LOWER ( P_UNITESERVICE ) CONCAT '''' ; 
		SET V_WHEREAND = ' AND ' ; 
	END IF ; 
  
	IF ( P_DATEDEBEDITION > 0 ) THEN 
		SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' DATESITUATION >= ' CONCAT P_DATEDEBEDITION ; 
		SET V_WHEREAND = ' AND ' ; 
	END IF ; 
  
	IF ( P_DATEFINEDITION > 0 ) THEN 
		SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' DATESITUATION <= ' CONCAT P_DATEFINEDITION ; 
		SET V_WHEREAND = ' AND ' ; 
	END IF ; 
	 
	IF ( P_INTERLOCUTEUR > 0 ) THEN 
		SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' CODEINTERLOCUTEUR = ' CONCAT P_INTERLOCUTEUR ; 
		SET V_WHEREAND = ' AND ' ; 
	END IF ; 
	 
	IF ( P_USER IS NOT NULL AND P_USER <> '' ) THEN 
		SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' LOWER(CODEUTILISATEUR) = ''' CONCAT LOWER ( P_USER ) CONCAT '''' ; 
		SET V_WHEREAND = ' AND ' ; 
	END IF ; 
  
	IF ( P_TYPEDOC IS NOT NULL AND P_TYPEDOC <> '' ) THEN 
		SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' LOWER(TYPEDOC) = ''' CONCAT LOWER ( P_TYPEDOC ) CONCAT '''' ; 
		SET V_WHEREAND = ' AND ' ; 
	END IF ; 
  
	IF ( P_COURRIERTYPE IS NOT NULL AND P_COURRIERTYPE <> '' ) THEN 
		SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' LOWER(CODEDOC) = ''' CONCAT LOWER ( P_COURRIERTYPE ) CONCAT '''' ; 
		SET V_WHEREAND = ' AND ' ; 
	END IF ; 
	 
	IF ( P_TYPEDESTINATAIRE IS NOT NULL AND P_TYPEDESTINATAIRE <> '' ) THEN 
		SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' LOWER(TYPEDESTINATAIRE) = ''' CONCAT LOWER ( P_TYPEDESTINATAIRE ) CONCAT '''' ; 
		SET V_WHEREAND = ' AND ' ; 
	END IF ; 
	 
	IF ( P_DESTINATAIRE > 0 ) THEN 
		SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' CODEDESTINATAIRE = ' CONCAT P_DESTINATAIRE ; 
		SET V_WHEREAND = ' AND ' ; 
	END IF ; 
	 
	/* IF ( P_WARNING IS NOT NULL AND P_WARNING <> '' AND P_SITUATION = '' ) THEN            
		SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' UPPER(CODESITUATION) IN (''A'', ''N'', ''Z'') ' ;            
		SET V_WHEREAND = ' AND ' ;            
	END IF ;            
	            
	 --SLA 13.03.2015 : on ignore les situations A et N d'après Flux gestion Doc et suivi doc.docx (DAN)            
	SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT 'UPPER(CODESITUATION)<> ''A'' AND UPPER(CODESITUATION)<> ''N''' ; */ 
	 
	/* REMPLACEMENT DES CONDITIONS SUR LE WARNING, VU QU'ON NE PREND JAMAIS LES CODES SITUATION A ET N,            
	ON N'A PAS BESOIN DE LES RECHERCHER SI LE WARNING ET LA SITUATION SONT RENSEIGNÉES */ 
	IF ( P_WARNING IS NOT NULL AND P_WARNING <> '' AND P_SITUATION = '' ) THEN 
		SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' UPPER(CODESITUATION) = ''Z'')' ; 
		SET V_WHEREAND = ' AND ' ; 
	END IF ; 
	 
	SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' UPPER(CODESITUATION)<> ''A'' AND UPPER(CODESITUATION)<> ''N'' ORDER BY CODEOFFRE, ACTEGESTION, NUMINTERNE, TYPEDOC, CODEDOC, CODEDESTINATAIRE, DATESITUATION DESC, HEURESITUATION DESC' ; 
  
	SET V_QUERYSELECT = TRIM ( V_QUERYSELECT ) CONCAT TRIM ( V_QUERY ) CONCAT ' FETCH FIRST 1000 ROWS ONLY' ; 
	SET V_QUERYSELECT = TRIM ( V_QUERYSELECT ) CONCAT ') A WHERE LINE BETWEEN ' CONCAT P_STARTLINE CONCAT ' AND ' CONCAT P_ENDLINE CONCAT ' WITH UR' ; 
	 
	SET V_QUERYCOUNT = TRIM ( V_QUERYCOUNT ) CONCAT TRIM ( V_QUERY ) CONCAT ') A' ; 
	 
	PREPARE SQL_STATEMENTCOUNT FROM V_QUERYCOUNT ; 
	OPEN CURSORCOUNT ; 
	FETCH CURSORCOUNT INTO P_COUNT ; 
	CLOSE CURSORCOUNT ; 
	 
	PREPARE SQL_STATEMENT FROM V_QUERYSELECT ; 
	OPEN CURSORSELECT ; 
	 
END P1  ; 
  

  

