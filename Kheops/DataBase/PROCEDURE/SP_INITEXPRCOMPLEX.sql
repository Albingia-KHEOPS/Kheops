CREATE PROCEDURE SP_INITEXPRCOMPLEX ( 
	IN P_CODEOFFRE CHAR(9) , 
	IN P_VERSION INTEGER , 
	IN P_TYPE CHAR(1) , 
	IN P_CODEFORMULE INTEGER , 
	IN P_CODEOPTION INTEGER ) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC SP_INITEXPRCOMPLEX 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	DBGVIEW = *SOURCE , 
	CLOSQLCSR = *ENDMOD , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = ZALBINKHEO , 
	DYNDFTCOL = *YES , 
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC 
					 
	DECLARE V_COUNTEXP INTEGER DEFAULT 0 ; 
	DECLARE V_EXPID INTEGER DEFAULT 0 ; 
	DECLARE V_EXPCODE CHAR ( 10 ) DEFAULT '' ; 
	DECLARE V_EXPDESC CHAR ( 60 ) DEFAULT '' ; 
	DECLARE V_MODI CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_EXPDESI INTEGER DEFAULT 0 ; 
	DECLARE V_NEWCODEDESI INTEGER DEFAULT 0 ; 
	DECLARE V_NEWCODELCIEXP INTEGER DEFAULT 0 ; 
	DECLARE V_NEWCODEFRHEXP INTEGER DEFAULT 0 ; 
	DECLARE V_NEWEXPDID INTEGER DEFAULT 0 ; 
  
	SET P_CODEOFFRE = F_PADLEFT ( 9 , P_CODEOFFRE ) ; 
	 
FOR LOOP_GARTAR AS FREE_LIST CURSOR FOR 
	SELECT KDGID IDGAR , KDGLCIBASE , KDGLCIUNIT , KDGFRHBASE , KDGFRHUNIT 
	FROM KPGARTAR 
	WHERE KDGIPB = P_CODEOFFRE AND KDGALX = P_VERSION AND KDGTYP = P_TYPE AND KDGFOR = P_CODEFORMULE AND KDGOPT = P_CODEOPTION 
DO 
	SET V_NEWCODEDESI = 0 ; 
	/* TRAITEMENT DES EXPRESSIONS COMPLEXES ASSOCIÉES AUX GARANTIES */ 
	/* LCI */ 
	SET V_NEWCODELCIEXP = 0 ; 
	IF ( TRIM ( KDGLCIUNIT ) = 'CPX' AND TRIM ( KDGLCIBASE ) != '' ) THEN 
		SELECT COUNT ( * ) INTO V_COUNTEXP FROM KPEXPLCI WHERE KDIIPB = P_CODEOFFRE AND KDIALX = P_VERSION AND KDITYP = P_TYPE AND KDILCE = KDGLCIBASE ; 
		IF ( V_COUNTEXP = 0 ) THEN 
			SET V_EXPID = 0 ; 
			SELECT KHGID , KHGLCE , KHGDESC , KHGDESI , KHGMODI INTO V_EXPID , V_EXPCODE , V_EXPDESC , V_EXPDESI , V_MODI 
				FROM KEXPLCI WHERE KHGLCE = KDGLCIBASE ; 
			 
			IF ( V_EXPID != 0 ) THEN 
				IF ( V_EXPDESI != 0 ) THEN 
					CALL SP_NCHRONO ( 'KADCHR' , V_NEWCODEDESI ) ; 
					INSERT INTO KPDESI 
						( KADCHR , KADTYP , KADIPB , KADALX , KADPERI , KADRSQ , KADOBJ , KADDESI ) 
					( SELECT V_NEWCODEDESI , P_TYPE , P_CODEOFFRE , P_VERSION , 'GA' , 0 , 0 , KDWDESI FROM KDESI WHERE KDWID = V_EXPDESI ) ; 
				END IF ; 
  
				CALL SP_NCHRONO ( 'KDIID' , V_NEWCODELCIEXP ) ; 
				INSERT INTO KPEXPLCI 
					( KDIID , KDITYP , KDIIPB , KDIALX , KDILCE , KDIDESC , KDIDESI , KDIORI , KDIMODI ) 
				VALUES 
					( V_NEWCODELCIEXP , P_TYPE , P_CODEOFFRE , P_VERSION , V_EXPCODE , V_EXPDESC , V_NEWCODEDESI , 'R' , V_MODI ) ; 
				 
				FOR LOOP_DETAILEXPL AS FREE_LIST CURSOR FOR 
					SELECT KHHORDRE ORDRE , KHHLCVAL LCVAL , KHHLCVAU LCVAU , KHHLCBASE LCBASE , KHHLOVAL LOVAL , 
						KHHLOVAU LOVAU , KHHLOBASE LOBASE 
					FROM KEXPLCID 
					WHERE KHHKHGID = V_EXPID 
				DO 
					CALL SP_NCHRONO ( 'KDJID' , V_NEWEXPDID ) ; 
					INSERT INTO KPEXPLCID 
						( KDJID , KDJKDIID , KDJORDRE , KDJLCVAL , KDJLCVAU , KDJLCBASE , KDJLOVAL , KDJLOVAU , KDJLOBASE ) 
					VALUES 
						( V_NEWEXPDID , V_NEWCODELCIEXP , ORDRE , LCVAL , LCVAU , LCBASE , LOVAL , LOVAU , LOBASE ) ; 
				END FOR ; 
			END IF ; 
		ELSE 
			SELECT KDIID INTO V_NEWCODELCIEXP FROM KPEXPLCI WHERE KDIIPB = P_CODEOFFRE AND KDIALX = P_VERSION AND KDITYP = P_TYPE AND KDILCE = KDGLCIBASE ; 
		END IF ; 
		 
		UPDATE KPGARTAR SET KDGKDIID = V_NEWCODELCIEXP WHERE KDGID = IDGAR ; 
	END IF ; 
  
	/* FRANCHISE */ 
	SET V_NEWCODEFRHEXP = 0 ; 
	IF ( TRIM ( KDGFRHUNIT ) = 'CPX' AND TRIM ( KDGFRHBASE ) != '' ) THEN 
		SELECT COUNT ( * ) INTO V_COUNTEXP FROM KPEXPFRH WHERE KDKIPB = P_CODEOFFRE AND KDKALX = P_VERSION AND KDKTYP = P_TYPE AND KDKFHE = KDGFRHBASE ; 
		IF ( V_COUNTEXP = 0 ) THEN 
			SET V_EXPID = 0 ; 
			SELECT KHEID , KHEFHE , KHEDESC , KHEDESI , KHEMODI INTO V_EXPID , V_EXPCODE , V_EXPDESC , V_EXPDESI , V_MODI 
				FROM KEXPFRH WHERE KHEFHE = KDGFRHBASE ; 
				 
			IF ( V_EXPID != 0 ) THEN 
				IF ( V_EXPDESI != 0 ) THEN 
					CALL SP_NCHRONO ( 'KADCHR' , V_NEWCODEDESI ) ; 
					INSERT INTO KPDESI 
						( KADCHR , KADTYP , KADIPB , KADALX , KADPERI , KADRSQ , KADOBJ , KADDESI ) 
					( SELECT V_NEWCODEDESI , P_TYPE , P_CODEOFFRE , P_VERSION , 'GA' , 0 , 0 , KDWDESI FROM KDESI WHERE KDWID = V_EXPDESI ) ; 
				END IF ; 
				 
				CALL SP_NCHRONO ( 'KDKID' , V_NEWCODEFRHEXP ) ; 
				INSERT INTO KPEXPFRH 
					( KDKID , KDKTYP , KDKIPB , KDKALX , KDKFHE , KDKDESC , KDKDESI , KDKORI , KDKMODI ) 
				VALUES 
					( V_NEWCODEFRHEXP , P_TYPE , P_CODEOFFRE , P_VERSION , V_EXPCODE , V_EXPDESC , V_NEWCODEDESI , 'R' , V_MODI ) ; 
				 
				FOR LOOP_DETAILEXPF AS FREE_LIST CURSOR FOR 
					SELECT KHFORDRE ORDRE , KHFFHVAL FHVAL , KHFFHVAU FHVAU , KHFBASE BASE , KHFIND IND , KHFIVO IVO , 
						KHFFHMINI FHMINI , KHFFHMAXI FHMAXI , KHFLIMDEB LIMDEB , KHFLIMFIN LIMFIN 
					FROM KEXPFRHD 
					WHERE KHFKHEID = V_EXPID 
				DO 
					CALL SP_NCHRONO ( 'KDLID' , V_NEWEXPDID ) ; 
					INSERT INTO KPEXPFRHD 
						( KDLID , KDLKDKID , KDLORDRE , KDLFHVAL , KDLFHVAU , KDLFHBASE , KDLIND , KDLIVO , KDLFHMINI , KDLFHMAXI , KDLLIMDEB , KDLLIMFIN ) 
					VALUES 
						( V_NEWEXPDID , V_NEWCODEFRHEXP , ORDRE , FHVAL , FHVAU , BASE , IND , IVO , FHMINI , FHMAXI , LIMDEB , LIMFIN ) ; 
				END FOR ; 
			END IF ; 
		ELSE 
			SELECT KDKID INTO V_NEWCODEFRHEXP FROM KPEXPFRH WHERE KDKIPB = P_CODEOFFRE AND KDKALX = P_VERSION AND KDKTYP = P_TYPE AND KDKFHE = KDGFRHBASE ; 
		END IF ; 
		UPDATE KPGARTAR SET KDGKDKID = V_NEWCODEFRHEXP WHERE KDGID = IDGAR ; 
	END IF ; 
  
END FOR ;	 
END P1  ;



