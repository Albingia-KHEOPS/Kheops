CREATE PROCEDURE SP_RECHERCHEACTIVITE ( 
	IN P_CODE CHAR(15) , 
	IN P_BRANCHE CHAR(2) , 
	IN P_CIBLE CHAR(10) , 
	IN P_NOM CHAR(15) , 
	IN P_STARTLINE INTEGER , 
	IN P_ENDLINE INTEGER , 
	OUT P_REQUESTCOUNT INTEGER ) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC SP_RECHERCHEACTIVITE 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	DBGVIEW = *SOURCE , 
	CLOSQLCSR = *ENDMOD , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = ZALBINKHEO , 
	DYNDFTCOL = *YES , 
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC	 
	 -----------------------------------------/VARIABLES */ 
	DECLARE V_SELECTFIELDS VARCHAR ( 15000 ) DEFAULT '' ; 
	DECLARE V_SQLFILTRE VARCHAR ( 8000 ) DEFAULT '' ; 
	DECLARE V_WHEREAND VARCHAR ( 10 ) DEFAULT ' WHERE ' ; 
	DECLARE V_QUERY VARCHAR ( 30000 ) DEFAULT '' ; 
	DECLARE V_QUERYCOUNT VARCHAR ( 15000 ) DEFAULT '' ; 
	DECLARE V_QUERYTOTAL VARCHAR ( 30000 ) DEFAULT '' ; 
	DECLARE CURSOR1 CURSOR WITH RETURN FOR SQL_STATEMENT ; 
	 
	 
	DECLARE CURSORCOUNT CURSOR FOR SQL_STATEMENTCOUNT ;	 
	 ----------------------------------------/* LES CHAMPS  SELECT */ 
					/* INNER JOIN YYYYPAR PAR  ON PAR.TCON = KAHCON AND PAR.TFAM = KAHFAM  */ 
	SET V_SELECTFIELDS = 'SELECT PAR.TCOD CODE , KAHCIBLE CODECIBLE, KAHCON CONCEPT , KAHFAM FAMILLE ,TPLIB LIBCOURT , 
                     TPLIL LIBLONG , TPCA1 CLASSRSQ , TPCA2 CLASSTARIF ,PAL.TXTXT DESCRIPTION , ROW_NUMBER() OVER (ORDER BY KAHFAM ) AS LINE 
					 FROM KCIBLE KCIBLE
						LEFT JOIN (
						SELECT *
FROM YYYYPAR Y1
WHERE NOT EXISTS(SELECT * 
					FROM YYYYPAR Y2
						INNER JOIN KFILTRL F2 ON F2.KGHFILT = Y2.TFILT AND F2.KGHACTF = ''E''
					WHERE (F2.KGHBRA = ''' CONCAT P_BRANCHE CONCAT ''' OR F2.KGHBRA = ''*'') AND (F2.KGHCIBLE = ''' CONCAT P_CIBLE CONCAT ''' OR F2.KGHCIBLE = ''*'') AND Y2.TCON = Y1.TCON AND Y2.TFAM = Y1.TFAM AND Y2.TCOD = Y1.TCOD
				 UNION
				 SELECT * 
					FROM YYYYPAR Y3
						INNER JOIN KFILTRL F3 ON F3.KGHFILT = Y3.TFILT AND F3.KGHACTF = ''I''
					WHERE ((F3.KGHBRA <> ''' CONCAT P_BRANCHE CONCAT ''' AND F3.KGHBRA <> ''*'') OR ((F3.KGHBRA = ''' CONCAT P_BRANCHE CONCAT ''' OR F3.KGHBRA = ''*'') AND F3.KGHCIBLE <> ''' CONCAT P_CIBLE CONCAT ''' AND F3.KGHCIBLE <> ''*'')) AND Y3.TCON = Y1.TCON AND Y3.TFAM = Y1.TFAM AND Y3.TCOD = Y1.TCOD)
	   UNION
	   SELECT *
FROM YYYYPAR Y1
WHERE EXISTS(SELECT * 
					FROM YYYYPAR Y4
						 INNER JOIN KFILTRL F4 ON F4.KGHFILT = Y4.TFILT AND F4.KGHACTF = ''I''
					WHERE (F4.KGHBRA = ''' CONCAT P_BRANCHE CONCAT ''' AND (F4.KGHCIBLE = ''' CONCAT P_CIBLE CONCAT ''' OR F4.KGHCIBLE = ''*''))
								AND Y4.TCON = Y1.TCON AND Y4.TFAM = Y1.TFAM AND Y4.TCOD = Y1.TCOD)
						
						
						) PAR ON PAR.TCON = KAHCON AND PAR.TFAM = KAHFAM
												
					 LEFT JOIN YYYYPAL PAL ON PAL.TCON = KAHCON AND PAL.TFAM = KAHFAM AND PAL.TCOD= PAR.TCOD AND  PAL.TXORD =''1'' ' ;				 
	 -----------------------------------------/*  FILTRE  */ 
	/* CODE  */ 
	IF ( P_CODE IS NOT NULL AND TRIM ( P_CODE ) <> '' ) THEN 
		SET V_SQLFILTRE = TRIM ( V_SQLFILTRE ) CONCAT V_WHEREAND CONCAT 'LOWER (TRIM(' CONCAT 'PAR.TCOD)) LIKE ''%' CONCAT LOWER ( TRIM ( P_CODE ) ) CONCAT '%''' ; 
		SET V_WHEREAND = ' AND ' ; 
	END IF ; 
		 
	/* CIBLE  */ 
	IF ( P_CIBLE IS NOT NULL AND TRIM ( P_CIBLE ) <> '' ) THEN 
		 
		SET V_SQLFILTRE = TRIM ( V_SQLFILTRE ) CONCAT V_WHEREAND CONCAT ' LOWER ( TRIM (KAHCIBLE)) = ''' CONCAT LOWER ( TRIM ( P_CIBLE ) ) CONCAT '''' ;	 
		SET V_WHEREAND = ' AND ' ; 
	END IF ; 
  
	/* NOM  */ 
	IF ( P_NOM IS NOT NULL AND TRIM ( P_NOM ) <> '' ) THEN 
		SET V_SQLFILTRE = TRIM ( V_SQLFILTRE ) CONCAT V_WHEREAND CONCAT '(LOWER ( TRIM(' CONCAT 'TPLIB)) LIKE ''%' CONCAT LOWER ( TRIM ( P_NOM ) ) CONCAT '%'' OR LOWER(TRIM(TPLIL)) LIKE ''%' CONCAT LOWER ( TRIM ( P_NOM ) ) CONCAT '%'')' ; 
		SET V_WHEREAND = ' AND ' ; 
	END IF ; 
  
	 -----------------/* REQUETTE */	 
	SET V_QUERY = V_SELECTFIELDS CONCAT ' ' CONCAT V_SQLFILTRE ; 
	 ---------------****** PAGINATION ******** 
	SET V_QUERYTOTAL = 'SELECT * FROM ( ' CONCAT TRIM ( V_QUERY ) CONCAT ') AS LISTE  WHERE LINE BETWEEN ' CONCAT P_STARTLINE CONCAT ' AND ' CONCAT P_ENDLINE ; 
	 --------COUNT 
	SET V_QUERYCOUNT = 'SELECT  COUNT (*) FROM ( ' CONCAT TRIM ( V_QUERY ) CONCAT ')' CONCAT ' AS COUNTRESULT' ; 
		 
	PREPARE SQL_STATEMENTCOUNT FROM V_QUERYCOUNT ; 
	OPEN CURSORCOUNT ; 
	FETCH CURSORCOUNT INTO P_REQUESTCOUNT ; 
	CLOSE CURSORCOUNT ; 
	 --SET P_REQUEST_OUT = V_QUERYTOTAL ;	 
	PREPARE SQL_STATEMENT FROM V_QUERYTOTAL ; 
	OPEN CURSOR1 ; 
END P1  ; 
  

  

