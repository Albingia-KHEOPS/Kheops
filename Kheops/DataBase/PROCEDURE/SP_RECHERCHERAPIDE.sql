CREATE PROCEDURE SP_RECHERCHERAPIDE ( 
	IN P_CODEOFFRE CHAR(9) , 
	IN P_VERSION INTEGER , 
	IN P_TYPEOFFRE CHAR(1) , 
	IN P_CODEAVENANT INTEGER , 
	IN P_TYPETRAITEMENT CHAR(5) , 
	IN P_DATEEFFETAVNDEBUT INTEGER , 
	IN P_DATEEFFETAVNFIN INTEGER , 
	IN P_CODEPERIODICITE CHAR(1) , 
	IN P_CODEBRANCHE CHAR(2) , 
	IN P_CODECIBLE CHAR(10) , 
	IN P_USERCREA CHAR(10) , 
	IN P_USERMAJ CHAR(10) , 
	IN P_SORTINGBY CHAR(100) , 
	IN P_LINECOUNT INTEGER , 
	IN P_STARTLINE INTEGER , 
	IN P_ENDLINE INTEGER , 
	OUT P_COUNT INTEGER ) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC SP_RECHERCHERAPIDE 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	CLOSQLCSR = *ENDMOD , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = ZALBINKHEO , 
	DYNDFTCOL = *YES , 
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC 
	 
	DECLARE V_QUERY VARCHAR ( 8000 ) DEFAULT '' ; 
	DECLARE V_QUERYSELECT VARCHAR ( 8000 ) DEFAULT '' ; 
	DECLARE V_QUERYCOUNT VARCHAR ( 8000 ) DEFAULT '' ; 
	DECLARE V_WHEREAND VARCHAR ( 10 ) DEFAULT ' WHERE ' ; 
	DECLARE CURSORSELECT CURSOR WITH RETURN FOR SQL_STATEMENT ; 
	DECLARE CURSORCOUNT CURSOR FOR SQL_STATEMENTCOUNT ; 
  
	SET V_QUERYSELECT = 'SELECT * FROM (' ; 
					 
	SET V_QUERYCOUNT = 'SELECT COUNT(*) FROM(' ; 
	 
	IF ( P_SORTINGBY IS NOT NULL AND P_SORTINGBY <> '' ) THEN 
		SET V_QUERY = TRIM ( V_QUERY ) CONCAT ' SELECT TABRECH.* ,  ROW_NUMBER() OVER (ORDER BY ' CONCAT P_SORTINGBY CONCAT ') AS LINE ' ; 
	ELSE 
		SET V_QUERY = TRIM ( V_QUERY ) CONCAT ' SELECT TABRECH.* ,  ROW_NUMBER() OVER (ORDER BY TABRECH.CODEOFFRE, TABRECH.VERSION  DESC) AS LINE ' ; 
	END IF ; 
	 
	SET V_QUERY = TRIM ( V_QUERY ) CONCAT ' FROM (SELECT  B.PBIPB CODEOFFRE,B.PBTYP CODETYPEOFFRE,B.PBALX VERSION, B.PBAVN CODEAVN, B.PBTTR TYPETRAITEMENT,
														  B.PBBRA CODEBRANCHE ,BRANCHE.TPLIB LIBBRANCHE ,K.KAACIBLE CODECIBLE,CIBLE.KAHDESC LIBCIBLE,B.PBETA CODEETAT,
														  ETAT.TPLIB LIBETAT ,B.PBSIT CODESIT,SITUATION.TPLIB SITUATIONLIB,B.PBREF DESCRIPTIF ,
														  B.PBPER CODEPERIODICITE,PERIODICITE.TPLIB LIBPERIODICITE,B.PBCRU USERCREA,B.PBMJU USERMAJ,
														  (B.PBAVA * 10000 + B.PBAVM* 100 + B.PBAVJ) DATEEFFETAVN,
														  (B.PBSAA * 100000000 + B.PBSAM* 1000000 + B.PBSAJ * 10000 ) DATESAISIE
										   FROM YPOBASE B
										  	   LEFT JOIN KPENT K ON K.KAAIPB = B.PBIPB AND K.KAAALX = B.PBALX AND K.KAATYP = B.PBTYP
										  	   LEFT JOIN YYYYPAR BRANCHE ON BRANCHE.TCON = ''GENER'' AND BRANCHE.TFAM = ''BRCHE'' AND BRANCHE.TCOD = B.PBBRA AND BRANCHE.TPCN2 = 1 
										  	   LEFT JOIN YYYYPAR ETAT ON ETAT.TCON = ''PRODU'' AND ETAT.TFAM = ''PBETA'' AND ETAT.TCOD = B.PBETA 
										  	   LEFT JOIN YYYYPAR SITUATION ON SITUATION.TCON = ''PRODU'' AND SITUATION.TFAM = ''PBSIT'' AND SITUATION.TCOD = B.PBSIT
											   LEFT JOIN YYYYPAR PERIODICITE ON PERIODICITE.TCON = ''PRODU'' AND PERIODICITE.TFAM = ''PBPER'' AND PERIODICITE.TCOD = B.PBPER 
										  	   LEFT JOIN KCIBLE CIBLE ON CIBLE.KAHCIBLE  = K.KAACIBLE) AS TABRECH' ; 
	 
			 
	 --********************** CODE OFFRE/CONTRAT ************************** 
	IF ( P_CODEOFFRE IS NOT NULL AND P_CODEOFFRE <> '' ) THEN 
	SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' TRIM(LOWER(CODEOFFRE)) LIKE ''%' CONCAT TRIM ( LOWER ( P_CODEOFFRE ) ) CONCAT '%''' ; 
	SET V_WHEREAND = ' AND ' ; 
	END IF ; 
	 
	 --********************** NUM VERSION ************************** 
	IF ( P_VERSION IS NOT NULL AND P_VERSION <> '' ) THEN 
	SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' VERSION = ''' CONCAT P_VERSION CONCAT '''' ; 
	SET V_WHEREAND = ' AND ' ; 
	END IF ; 
	 
	 --********************** CODE AVENANT ************************** 
	IF ( P_CODEAVENANT IS NOT NULL AND P_CODEAVENANT <> '' ) THEN 
	SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' CODEAVN = ''' CONCAT P_CODEAVENANT CONCAT '''' ; 
	SET V_WHEREAND = ' AND ' ; 
	END IF ; 
	 
	 --********************** TYPE OFFRE/CONTRAT ************************** 
	IF ( P_TYPEOFFRE IS NOT NULL AND P_TYPEOFFRE <> '' ) THEN 
	SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' CODETYPEOFFRE = ''' CONCAT P_TYPEOFFRE CONCAT '''' ; 
	SET V_WHEREAND = ' AND ' ; 
	END IF ; 
	 
  
	 --********************** TYPE TRAITEMENT ************************** 
	IF ( P_TYPETRAITEMENT IS NOT NULL AND P_TYPETRAITEMENT <> '' ) THEN 
	SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' TYPETRAITEMENT = ''' CONCAT P_TYPETRAITEMENT CONCAT '''' ; 
	SET V_WHEREAND = ' AND ' ; 
	END IF ; 
	 
	 --********************** DATE EFFET AVENANT ************************** 
	IF ( P_DATEEFFETAVNDEBUT > 0 ) THEN 
	 
	SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' DATEEFFETAVN >=' CONCAT P_DATEEFFETAVNDEBUT ; 
	SET V_WHEREAND = ' AND ' ; 
	 
	END IF ; 
	 
	IF ( P_DATEEFFETAVNFIN > 0 AND P_DATEEFFETAVNDEBUT = 0 ) THEN 
	 
	SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' DATEEFFETAVN) <=' CONCAT P_DATEEFFETAVNFIN ; 
	SET V_WHEREAND = ' AND ' ; 
	 
	END IF ; 
	 
	IF ( P_DATEEFFETAVNDEBUT > 0 AND P_DATEEFFETAVNFIN > 0 ) THEN 
	SET V_WHEREAND = ' AND ' ; 
	SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' DATEEFFETAVN <=' CONCAT P_DATEEFFETAVNFIN ; 
	END IF ; 
	 
	 --********************** PERIODICITE ************************** 
	IF ( P_CODEPERIODICITE IS NOT NULL AND P_CODEPERIODICITE <> '' ) THEN 
	SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' CODEPERIODICITE = ''' CONCAT P_CODEPERIODICITE CONCAT '''' ; 
	SET V_WHEREAND = ' AND ' ; 
	END IF ; 
	 
--********************** BRANCHE ************************** 
	IF ( P_CODEBRANCHE IS NOT NULL AND P_CODEBRANCHE <> '' ) THEN 
	SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' CODEBRANCHE = ''' CONCAT P_CODEBRANCHE CONCAT '''' ; 
	SET V_WHEREAND = ' and ' ; 
	END IF ; 
	 
--********************** CIBLE ************************** 
	IF ( P_TYPETRAITEMENT IS NOT NULL AND P_TYPETRAITEMENT <> '' ) THEN 
	SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' TYPETRAITEMENT = ''' CONCAT P_TYPETRAITEMENT CONCAT '''' ; 
	SET V_WHEREAND = ' AND ' ; 
	END IF ; 
  
	 --********************** TYPE TRAITEMENT ************************** 
	IF ( P_CODECIBLE IS NOT NULL AND P_CODECIBLE <> '' ) THEN 
	SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' CODECIBLE = ''' CONCAT P_CODECIBLE CONCAT '''' ; 
	SET V_WHEREAND = ' AND ' ; 
	END IF ;	 
	 
	 --********************** USERCREA ************************** 
	IF ( P_USERCREA IS NOT NULL AND P_USERCREA <> '' ) THEN 
	SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' TRIM(LOWER(USERCREA)) = ''' CONCAT TRIM ( LOWER ( P_USERCREA ) ) CONCAT '''' ; 
	SET V_WHEREAND = ' AND ' ; 
	END IF ; 
  
	 --********************** USERMAJ ************************** 
	IF ( P_USERMAJ IS NOT NULL AND P_USERMAJ <> '' ) THEN 
	SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' TRIM(LOWER(USERMAJ)) = ''' CONCAT TRIM ( LOWER ( P_USERMAJ ) ) CONCAT '''' ; 
	SET V_WHEREAND = ' AND ' ; 
	END IF ;	 
	 
	SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' LOWER(TRIM(CODEOFFRE)) NOT LIKE ''cnv%''' ; 
	SET V_WHEREAND = ' AND ' ; 
	SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' LOWER(TRIM(CODEOFFRE)) NOT LIKE ''cv%''' ; 
	SET V_WHEREAND = ' AND ' ;	 
	 
	 --********************** GESTION DES ERREURS (en cas d'aucun paramètre de recherche ************************** 
	IF ( V_WHEREAND = ' WHERE ' ) THEN 
	SET V_QUERY = TRIM ( V_QUERY ) CONCAT V_WHEREAND CONCAT ' 0 = 1' ; 
	END IF ;	 
	 
	 --********************** TRI ************************** 
	IF ( P_SORTINGBY IS NOT NULL AND P_SORTINGBY <> '' ) THEN 
	SET V_QUERY = TRIM ( V_QUERY ) CONCAT ' ORDER BY ' CONCAT P_SORTINGBY ; 
	END IF ; 
	SET V_QUERYSELECT = TRIM ( V_QUERYSELECT ) CONCAT TRIM ( V_QUERY ) ; 
	 
	IF ( P_LINECOUNT > 0 ) THEN 
	SET V_QUERYSELECT = TRIM ( V_QUERYSELECT ) CONCAT '  FETCH FIRST ' CONCAT P_LINECOUNT CONCAT ' ROWS ONLY ' ; 
	END IF ; 
	 
	 --********************** PAGINATION ************************** 
	SET V_QUERYSELECT = TRIM ( V_QUERYSELECT ) CONCAT ') A WHERE LINE BETWEEN ' CONCAT P_STARTLINE CONCAT ' AND ' CONCAT P_ENDLINE CONCAT ' WITH UR ' ; 
	SET V_QUERYCOUNT = TRIM ( V_QUERYCOUNT ) CONCAT TRIM ( V_QUERY ) CONCAT ') A' ; 
	 
	PREPARE SQL_STATEMENTCOUNT FROM V_QUERYCOUNT ; 
	OPEN CURSORCOUNT ; 
	FETCH CURSORCOUNT INTO P_COUNT ; 
	CLOSE CURSORCOUNT ; 
	 
  
	PREPARE SQL_STATEMENT FROM V_QUERYSELECT ; 
	OPEN CURSORSELECT ; 
	 
	END P1  ; 
  

  

