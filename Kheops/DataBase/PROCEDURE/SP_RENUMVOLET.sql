CREATE PROCEDURE SP_RENUMVOLET ( 
	IN P_IDCIBLE NUMERIC(15, 0) , 
	IN P_IDVOLET NUMERIC(15, 0) , 
	IN P_ORDRE NUMERIC(6, 0) , 
	IN P_IS_TRANSFORMED SMALLINT ) 
	LANGUAGE SQL 
	SPECIFIC SP_RENUMVOLET 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	CLOSQLCSR = *ENDMOD , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = ZALBINKHEO , 
	DYNDFTCOL = *YES , 
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC 
  
DECLARE V_COUNT INTEGER DEFAULT 1 ; 
DECLARE V_ORDRE NUMERIC ( 6 ) DEFAULT 1 ; 
DECLARE V_IDCIBLE NUMERIC ( 15 ) DEFAULT 1 ; 
  
IF ( P_IDCIBLE <> 0 ) THEN 
	SELECT COUNT ( * ) 
	INTO V_COUNT 
	FROM KCATVOLET 
	WHERE KAPKAIID = P_IDCIBLE ; 
	 
	SELECT KAPORDRE 
	INTO V_ORDRE 
	FROM KCATVOLET 
	WHERE KAPID = P_IDVOLET ; 
	 
	 
	 
	IF ( P_ORDRE <= V_ORDRE ) THEN 
		UPDATE KCATVOLET 
		SET KAPORDRE = P_ORDRE 
		WHERE KAPKAIID = P_IDCIBLE AND KAPID = P_IDVOLET ; 
	 
		UPDATE KCATVOLET 
		SET KAPORDRE = KAPORDRE + 1 
		WHERE KAPKAIID = P_IDCIBLE AND KAPID <> P_IDVOLET AND KAPORDRE >= P_ORDRE AND KAPORDRE < V_ORDRE ; 
		 
	ELSE 
		IF ( P_IS_TRANSFORMED = 0 ) THEN 
			SET P_ORDRE = P_ORDRE + 1 ; 
		END IF ; 
		 
		UPDATE KCATVOLET 
		SET KAPORDRE = P_ORDRE - 1 
		WHERE KAPKAIID = P_IDCIBLE AND KAPID = P_IDVOLET ; 
		 
		UPDATE KCATVOLET 
		SET KAPORDRE = KAPORDRE - 1 
		WHERE KAPKAIID = P_IDCIBLE AND KAPID <> P_IDVOLET AND KAPORDRE < P_ORDRE AND KAPORDRE > V_ORDRE ; 
		 
	END IF ; 
	 
	UPDATE KCATVOLET 
	SET KAPORDRE = V_COUNT 
	WHERE KAPKAIID = P_IDCIBLE AND KAPID = P_IDVOLET AND KAPORDRE > V_COUNT ; 
ELSE 
	SELECT KAPORDRE , KAPKAIID 
	INTO V_ORDRE , V_IDCIBLE 
	FROM KCATVOLET 
	WHERE KAPID = P_IDVOLET ; 
	 
	 
	UPDATE KCATVOLET 
	SET KAPORDRE = KAPORDRE - 1 
	WHERE KAPKAIID = V_IDCIBLE AND KAPID <> P_IDVOLET AND KAPORDRE >= V_ORDRE ; 
END IF ; 
  
END P1  ; 
  

  

