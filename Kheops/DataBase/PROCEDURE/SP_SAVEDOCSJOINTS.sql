CREATE PROCEDURE SP_SAVEDOCSJOINTS ( 
	IN P_CODEOFFRE CHAR(9) , 
	IN P_VERSION INTEGER , 
	IN P_TYPE CHAR(1) , 
	IN P_IDDOC INTEGER , 
	IN P_TYPEDOC CHAR(10) , 
	IN P_TITLEDOC CHAR(255) , 
	IN P_FILEDOC CHAR(255) , 
	IN P_PATHDOC CHAR(255) , 
	IN P_REFDOC CHAR(120) , 
	IN P_USER CHAR(10) , 
	IN P_DATENOW INTEGER , 
	IN P_HOURNOW INTEGER , 
	IN P_ACTEGES CHAR(10) , 
	OUT P_OUTIDDOC INTEGER  ) 
	LANGUAGE SQL 
	SPECIFIC SP_SAVEDOCSJOINTS 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	CLOSQLCSR = *ENDMOD , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = ZALBINKHEO , 
	DYNDFTCOL = *YES , 
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC 
  
	DECLARE V_AVN INTEGER DEFAULT 0 ; 
	DECLARE V_ORDERDOC DECIMAL ( 7 , 2 ) DEFAULT 0 ; 
	DECLARE V_NEWID INTEGER DEFAULT 0 ; 
	 
	IF ( P_IDDOC = 0 ) THEN 
		SELECT PBAVN INTO V_AVN FROM YPOBASE WHERE TRIM ( PBIPB ) = TRIM ( P_CODEOFFRE ) AND PBALX = P_VERSION AND PBTYP = P_TYPE ; 
		SELECT IFNULL ( MAX ( KERORD ) , 0 ) INTO V_ORDERDOC 
			FROM KPDOCEXT 
			WHERE TRIM ( KERIPB ) = TRIM ( P_CODEOFFRE ) AND KERALX = P_VERSION AND KERTYP = P_TYPE AND TRIM ( KERSERV ) = TRIM ( P_ACTEGES ) 
				AND TRIM ( KERACTG ) = TRIM ( P_ACTEGES ) AND KERAVN = V_AVN ; 
		SET V_ORDERDOC = V_ORDERDOC + 1 ; 
		 
		CALL SP_NCHRONO ( 'KERID' , V_NEWID ) ; 
		 
		INSERT INTO KPDOCEXT 
			( KERID , KERTYP , KERIPB , KERALX , KERSUA , KERNUM , KERSBR , KERSERV , KERACTG , KERAVN , KERORD , KERTYPO , KERLIB , KERNOM , KERCHM , KERSTU , KERSIT , 
				KERSTD , KERSTH , KERCRU , KERCRD , KERCRH , KERREF ) 
		VALUES 
			( V_NEWID , P_TYPE , P_CODEOFFRE , P_VERSION , 0 , 0 , '' , P_ACTEGES , P_ACTEGES , V_AVN , V_ORDERDOC , P_TYPEDOC , P_TITLEDOC , P_FILEDOC , P_PATHDOC , P_USER , 'A' , 
				P_DATENOW , P_HOURNOW , P_USER , P_DATENOW , P_HOURNOW , P_REFDOC ) ; 
		SET P_OUTIDDOC = V_NEWID ; 
	ELSE	 
		UPDATE KPDOCEXT 
			SET KERTYPO = P_TYPEDOC , KERLIB = P_TITLEDOC , KERREF = P_REFDOC 
		WHERE KERID = P_IDDOC ; 
		SET P_OUTIDDOC = P_IDDOC ; 
	END IF ;	 
	 
END P1  ; 
  

  

