--  Générer SQL 
--  Version :                   	V7R2M0 140418 
--  Générée le :              	07/07/21 16:32:32 
--  Base données relation :    	B700D0F0 
--  Option normes :          	DB2 for i 
  
CREATE OR REPLACE PROCEDURE SP_SAVERSQ ( 
	IN P_CODEOFFRE CHAR(9) , 
	IN P_VERSION INTEGER , 
	IN P_TYPE CHAR(1) , 
	IN P_CODERSQ INTEGER , 
	IN P_CHRONODESI INTEGER , 
	IN P_DESIGNATION CHAR(5000) , 
	IN P_ENTREEJOUR INTEGER , 
	IN P_ENTREEMOIS INTEGER , 
	IN P_ENTREEANNEE INTEGER , 
	IN P_ENTREEHEURE INTEGER , 
	IN P_SORTIEJOUR INTEGER , 
	IN P_SORTIEMOIS INTEGER , 
	IN P_SORTIEANNEE INTEGER , 
	IN P_SORTIEHEURE INTEGER , 
	IN P_VALEUR DECIMAL(11, 0) , 
	IN P_CODEUNITE CHAR(1) , 
	IN P_CODETYPE CHAR(5) , 
	IN P_VALEURHT CHAR(1) , 
	IN P_CODEBRANCHE CHAR(2) , 
	IN P_CODEOBJ INTEGER , 
	IN P_DERNIEROBJET INTEGER , 
	IN P_NBOBJET INTEGER , 
	IN P_CIBLE CHAR(10) , 
	IN P_DESCRIPTIF CHAR(40) , 
	IN P_REPORTVALEUR CHAR(1) , 
	IN P_REPORTOBLIG CHAR(1) , 
	IN P_APE CHAR(5) , 
	IN P_NOMENCLATURE1 CHAR(15) , 
	IN P_NOMENCLATURE2 CHAR(15) , 
	IN P_NOMENCLATURE3 CHAR(15) , 
	IN P_NOMENCLATURE4 CHAR(15) , 
	IN P_NOMENCLATURE5 CHAR(15) , 
	IN P_TERRITORIALITE CHAR(3) , 
	IN P_TRE CHAR(5) , 
	IN P_CLASSE CHAR(2) , 
	IN P_TYPERISQUE CHAR(15) , 
	IN P_TYPEMATERIEL CHAR(15) , 
	IN P_NATURELIEUX CHAR(15) , 
	IN P_DATEENTREEDESC INTEGER , 
	IN P_HEUREENTREEDESC INTEGER , 
	IN P_DATESORTIEDESC INTEGER , 
	IN P_HEURESORTIEDESC INTEGER , 
	IN P_BATIMENT CHAR(32) , 
	IN P_NUMVOIE CHAR(10) , 
	IN P_NUMVOIE2 CHAR(15) , 
	IN P_EXTVOIE CHAR(1) , 
	IN P_NOMVOIE CHAR(32) , 
	IN P_BP CHAR(32) , 
	IN P_LOCALITE CHAR(5) , 
	IN P_DEP CHAR(2) , 
	IN P_CP CHAR(5) , 
	IN P_NOMVILLE CHAR(26) , 
	IN P_VOIECOMPLETE CHAR(32) , 
	IN P_VILLECOMPLETE CHAR(32) , 
	IN P_CPX CHAR(5) , 
	IN P_NOMCEDEX CHAR(32) , 
	IN P_MATHEX INTEGER , 
	IN P_MODAVENANTLOCALE CHAR(1) , 
	IN P_DATEEFFETAVNLOCALANNEE INTEGER , 
	IN P_DATEEFFETAVNLOCALMOIS INTEGER , 
	IN P_DATEEFFETAVNLOCALJOUR INTEGER , 
	IN P_ISRISQUETEMPORAIRE CHAR(1) , 
	IN P_DATESYSTEM NUMERIC(10, 0) , 
	IN P_HEURESYSTEM NUMERIC(6, 0) , 
	IN P_USER CHAR(10) , 
	IN P_ISADDRESSEMPTY INTEGER , 
	IN P_LATITUDE NUMERIC(10, 7) , 
	IN P_LONGITUDE NUMERIC(10, 7) , 
	OUT P_OUTCODERSQ INTEGER ) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC SP_SAVERSQ 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = ZALBINKHEO , 
	DYNDFTCOL = *YES , 
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC 
  
	DECLARE V_COUNT INTEGER DEFAULT 0 ; 
  
	DECLARE V_CHRONODESI INTEGER DEFAULT 0 ; 
	DECLARE V_COUNTRSQ INTEGER DEFAULT 0 ; 
	DECLARE V_COUNTCREATERSQ INTEGER DEFAULT 0 ; 
	DECLARE V_COUNTDESI INTEGER DEFAULT 0 ; 
	DECLARE V_SOUMISCATNAT CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_REGIMETAXE CHAR ( 1 ) DEFAULT '' ; 
  
	DECLARE V_OLDVALUE INTEGER DEFAULT 0 ; 
	DECLARE V_OLDUNITE CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_OLDTYPE CHAR ( 5 ) DEFAULT '' ; 
	DECLARE V_OLDCIBLE CHAR ( 10 ) DEFAULT '' ; 
	DECLARE V_CONTROLASS INTEGER DEFAULT 0 ; 
  
	DECLARE V_CALCULPAR INTEGER DEFAULT 0 ; 
  
	DECLARE V_CODENOMENCLATURE1 CHAR ( 15 ) DEFAULT '' ; 
	DECLARE V_CODENOMENCLATURE2 CHAR ( 15 ) DEFAULT '' ; 
	DECLARE V_CODENOMENCLATURE3 CHAR ( 15 ) DEFAULT '' ; 
	DECLARE V_CODENOMENCLATURE4 CHAR ( 15 ) DEFAULT '' ; 
	DECLARE V_CODENOMENCLATURE5 CHAR ( 15 ) DEFAULT '' ; 
  
	DECLARE V_COUNTTRACEAVN INTEGER DEFAULT 0 ; 
	DECLARE V_TRACEAVNID INTEGER DEFAULT 0 ; 
	DECLARE V_NUMAVN INTEGER DEFAULT 0 ; 
	DECLARE V_DATEAVN INTEGER DEFAULT 0 ; 
	DECLARE V_COUNTOBJ INTEGER DEFAULT 0 ; 
  
	DECLARE V_RSQINA CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_RSQIXL CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_RSQIXF CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_RSQIXC CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_RSQRGT CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_RSQCNA CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_RSQPBT DECIMAL ( 2 , 0 ) DEFAULT 0 ; 
	DECLARE V_RSQRUL CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_RSQRUT CHAR ( 1 ) DEFAULT '' ; 
  
	DECLARE V_NBRSQ INTEGER DEFAULT 0 ; 
  
	DECLARE V_BRANCHE CHAR ( 2 ) DEFAULT '' ; 
	DECLARE V_SOUSBRANCHE CHAR ( 3 ) DEFAULT '' ; 
	DECLARE V_CATEGORIE CHAR ( 5 ) DEFAULT '' ; 
  
	DECLARE V_PRIMECATNAT DECIMAL ( 5 , 3 ) DEFAULT 0 ; 
  
	DECLARE V_MODIFFORMULE INTEGER DEFAULT 0 ; 
	DECLARE V_FRAISACC INTEGER DEFAULT 0 ; 
	DECLARE V_CODEBRANCHE CHAR ( 2 ) DEFAULT '' ; 
  
	 
	 
	DECLARE V_CODERISQUEPRINCIPAL INTEGER DEFAULT 0 ; 
	 
	 
	 
	SET V_MODIFFORMULE = 0 ; 
  
	SET P_CODEOFFRE = LPAD ( TRIM ( P_CODEOFFRE ) , 9 , ' ' ) ; 
	 
	SET V_NUMAVN = 0 ; 
	/* 20160218 : CHANGEMENT DE L'HEURE DE FIN SI = 0 */ 
	IF ( P_SORTIEHEURE = 0 AND P_SORTIEANNEE != 0 AND ( P_ENTREEANNEE * 10000 + P_ENTREEMOIS * 100 + P_ENTREEJOUR ) = ( P_SORTIEANNEE * 10000 + P_SORTIEMOIS * 100 + P_SORTIEJOUR ) ) THEN 
		SET P_SORTIEHEURE = 2359 ; 
	END IF ; 
  
  
	 --RÉCUPÉRATION DE LA BRANCHE, SOUS BRANCHE, CATÉGORIE DE LA CIBLE 
	SELECT KAIBRA , KAISBR , KAICAT INTO V_BRANCHE , V_SOUSBRANCHE , V_CATEGORIE FROM KCIBLEF WHERE KAICIBLE = TRIM ( P_CIBLE ) ; 
  
	SET V_CALCULPAR = 1 ; 
  
	IF ( P_CODERSQ = 0 ) THEN 
		SELECT ( IFNULL ( MAX ( JERSQ ) , 0 ) + 1 ) INTO P_CODERSQ FROM YPRTRSQ WHERE JEIPB = P_CODEOFFRE AND JEALX = P_VERSION ; 
	END IF ; 
	SELECT COUNT ( * ) INTO V_COUNTDESI FROM KPDESI WHERE KADCHR = P_CHRONODESI ; 
  
	IF ( P_CHRONODESI = 0 OR V_COUNTDESI = 0 ) THEN 
		CALL SP_NCHRONO ( 'KADCHR' , P_CHRONODESI ) ; 
  
		INSERT INTO KPDESI 
			( KADIPB , KADALX , KADCHR , KADTYP , KADRSQ , KADDESI ) 
		VALUES 
		( P_CODEOFFRE , P_VERSION , P_CHRONODESI , P_TYPE , P_CODERSQ , TRIM ( P_DESIGNATION ) ) ; 
	ELSE 
		UPDATE KPDESI 
			SET KADDESI = P_DESIGNATION 
			WHERE KADCHR = P_CHRONODESI ; 
	END IF ; 
	SET V_CHRONODESI = P_CHRONODESI ; 
  
	SELECT COUNT ( * ) INTO V_COUNTCREATERSQ FROM YPRTRSQ WHERE JEIPB = P_CODEOFFRE AND JEALX = P_VERSION AND JERSQ = P_CODERSQ ; 
  
	IF ( V_COUNTCREATERSQ > 0 ) THEN 
  
		 --IF ( LOCATE ( 'CNVA' , P_CODEOFFRE ) = 0 ) THEN 
		 -- RECHERCHE SI ENREGISTREMENT EXISTE DANS KPCTRLA 
		SELECT COUNT ( * ) INTO V_CONTROLASS FROM KPCTRLA WHERE KGTTYP = P_TYPE AND KGTIPB = P_CODEOFFRE AND KGTALX = P_VERSION ; 
		 -- RÉCUPÉRATION DES ANCIENNES DONNÉES DU RISQUE 
		SELECT JEVAA , JEVAU , JEVAT , KABCIBLE INTO V_OLDVALUE , V_OLDUNITE , V_OLDTYPE , V_OLDCIBLE 
			FROM YPRTRSQ 
				INNER JOIN KPRSQ ON JEIPB = KABIPB AND JEALX = KABALX AND JERSQ = KABRSQ 
			WHERE JEIPB = P_CODEOFFRE AND JEALX = P_VERSION AND JERSQ = P_CODERSQ ; 
  
		 -- SI UNE DES DONNÉES A CHANGÉ => SUPPRESSION ENREGISTREMENT KPCTRLE ; INSERTION ENREGISTREMENT KPCTRLA 
		IF ( ( TRIM ( V_OLDCIBLE ) <> TRIM ( P_CIBLE ) OR V_OLDVALUE <> P_VALEUR OR TRIM ( V_OLDUNITE ) <> TRIM ( P_CODEUNITE ) OR TRIM ( V_OLDTYPE ) <> TRIM ( P_CODETYPE ) OR V_NUMAVN > 0 ) AND V_CONTROLASS = 0 ) THEN 
			SELECT COUNT ( * ) INTO V_COUNT FROM KPCTRLE WHERE KEVTYP = P_TYPE AND KEVIPB = P_CODEOFFRE AND KEVALX = P_VERSION AND KEVETAPE = 'COT' ; 
			IF ( V_COUNT > 0 ) THEN 
				DELETE FROM KPCTRLE WHERE KEVTYP = P_TYPE AND KEVIPB = P_CODEOFFRE AND KEVALX = P_VERSION AND KEVETAPE = 'COT' ; 
				INSERT INTO KPCTRLA ( KGTTYP , KGTIPB , KGTALX , KGTETAPE , KGTLIB ) VALUES ( P_TYPE , P_CODEOFFRE , P_VERSION , 'RSQ' , 'VALEUR' ) ; 
				SET V_CALCULPAR = 1 ; 
			END IF ; 
		END IF ; 
		IF ( V_CONTROLASS > 0 ) THEN 
			SET V_CALCULPAR = 1 ; 
		END IF ; 
		 --END IF ; 
		UPDATE YPRTRSQ 
			SET JEVDJ = P_ENTREEJOUR , JEVDM = P_ENTREEMOIS , JEVDA = P_ENTREEANNEE , JEVDH = P_ENTREEHEURE , 
				JEVFJ = P_SORTIEJOUR , JEVFM = P_SORTIEMOIS , JEVFA = P_SORTIEANNEE , JEVFH = P_SORTIEHEURE , 
				JEVAL = P_VALEUR , JEVAA = P_VALEUR , JEVAU = P_CODEUNITE , JEVAT = P_CODETYPE , JEVAH = P_VALEURHT , JETRR = P_TERRITORIALITE , 
				JEBRA = V_BRANCHE , JESBR = V_SOUSBRANCHE , JECAT = V_CATEGORIE , JETEM = P_ISRISQUETEMPORAIRE 
			WHERE JEIPB = P_CODEOFFRE AND JEALX = P_VERSION AND JERSQ = P_CODERSQ ; 
	ELSE 
		SELECT PBRGT INTO V_REGIMETAXE FROM YPOBASE WHERE PBIPB = P_CODEOFFRE AND PBALX = P_VERSION AND PBTYP = P_TYPE ; 
		SELECT JDCNA INTO V_SOUMISCATNAT FROM YPRTENT WHERE JDIPB = P_CODEOFFRE AND JDALX = P_VERSION ; 
  
		SET V_SOUMISCATNAT = 'N' ; 
		SELECT CACNP INTO V_PRIMECATNAT FROM YCATEGO WHERE CABRA = V_BRANCHE AND CASBR = V_SOUSBRANCHE AND CACAT = V_CATEGORIE ; 
		IF ( V_PRIMECATNAT != 0 ) THEN 
			SET V_SOUMISCATNAT = 'O' ; 
		END IF ; 
  
		INSERT INTO YPRTRSQ 
			( JEIPB , JEALX , JERSQ , JECCH , JEBRA , JEOBJ , JEDRO , JENBO , JETRR , JERGT , JECNA , 
			JEVDJ , JEVDM , JEVDA , JEVDH , JEVFJ , JEVFM , JEVFA , JEVFH , JESBR , JECAT , JETEM , 
			JEVAL , JEVAA , JEVAU , JEVAT , JEVAH ) 
		VALUES 
			( P_CODEOFFRE , P_VERSION , P_CODERSQ , P_CODERSQ , V_BRANCHE , P_CODEOBJ , P_DERNIEROBJET , P_NBOBJET , P_TERRITORIALITE , V_REGIMETAXE , V_SOUMISCATNAT , 
P_ENTREEJOUR ,	P_ENTREEMOIS , P_ENTREEANNEE , P_ENTREEHEURE , P_SORTIEJOUR , P_SORTIEMOIS , P_SORTIEANNEE , P_SORTIEHEURE , V_SOUSBRANCHE , V_CATEGORIE , P_ISRISQUETEMPORAIRE , 
	P_VALEUR , P_VALEUR , P_CODEUNITE , P_CODETYPE , P_VALEURHT ) ; 
	END IF ; 
  
	SELECT COUNT ( * ) INTO V_COUNTRSQ FROM KPRSQ WHERE KABIPB = P_CODEOFFRE AND KABALX = P_VERSION AND KABTYP = P_TYPE AND KABRSQ = P_CODERSQ ; 
  
	IF ( V_COUNTRSQ > 0 ) THEN 
		UPDATE KPRSQ 
			SET KABCIBLE = P_CIBLE , KABDESC = P_DESCRIPTIF , KABDESI = V_CHRONODESI , KABREPVAL = P_REPORTVALEUR , KABREPOBL = P_REPORTOBLIG , 
				KABAPE = P_APE , KABTRE = P_TRE , KABCLASS = P_CLASSE , 
				KABMAND = P_DATEENTREEDESC , KABMANF = P_DATESORTIEDESC , KABMANDH = P_HEUREENTREEDESC , KABMANFH = P_HEURESORTIEDESC , 
				KABNMC01 = P_NOMENCLATURE1 , KABNMC02 = P_NOMENCLATURE2 , KABNMC03 = P_NOMENCLATURE3 , KABNMC04 = P_NOMENCLATURE4 , KABNMC05 = P_NOMENCLATURE5 
			WHERE KABIPB = P_CODEOFFRE AND KABALX = P_VERSION AND KABTYP = P_TYPE AND KABRSQ = P_CODERSQ ; 
	ELSE 
		INSERT INTO KPRSQ 
			( KABIPB , KABALX , KABTYP , KABRSQ , KABCIBLE , KABDESC , KABDESI , KABREPVAL , 
				KABREPOBL , KABAPE , KABNMC01 , KABNMC02 , KABNMC03 , KABNMC04 , KABNMC05 , KABTRE , KABCLASS , KABMAND , KABMANF , 
				KABMANDH , KABMANFH ) 
		VALUES 
			( P_CODEOFFRE , P_VERSION , P_TYPE , P_CODERSQ , P_CIBLE , P_DESCRIPTIF , V_CHRONODESI , P_REPORTVALEUR , 
				P_REPORTOBLIG , P_APE , P_NOMENCLATURE1 , P_NOMENCLATURE2 , P_NOMENCLATURE3 , P_NOMENCLATURE4 , P_NOMENCLATURE5 , P_TRE , P_CLASSE , P_DATEENTREEDESC , P_DATESORTIEDESC , 
				P_HEUREENTREEDESC , P_HEURESORTIEDESC ) ; 
	END IF ; 
  
	UPDATE KPOBJ SET KACCIBLE = P_CIBLE WHERE KACIPB = P_CODEOFFRE AND KACALX = P_VERSION AND KACTYP = P_TYPE AND KACRSQ = P_CODERSQ ; 
  
	SELECT COUNT ( * ) INTO V_COUNTOBJ FROM YPRTOBJ 
		WHERE JGIPB = P_CODEOFFRE AND JGALX = P_VERSION AND JGRSQ = P_CODERSQ ; 
  
	 --MODIFICATION MODE AVENANT 
	IF ( P_MODAVENANTLOCALE = 'O' ) THEN 
		 --ENREGISTREMENT TRACE AVENANT 
		SELECT COUNT ( * ) INTO V_COUNTTRACEAVN FROM KPAVTRC 
		WHERE KHOTYP = P_TYPE AND KHOIPB = P_CODEOFFRE AND KHOALX = P_VERSION 
		AND KHOPERI = 'RSQ' AND KHORSQ = P_CODERSQ AND KHOETAPE = '**********' ; 
  
		IF ( V_COUNTTRACEAVN = 0 ) THEN 
			CALL SP_NCHRONO ( 'KHOID' , V_TRACEAVNID ) ; 
  
			INSERT INTO KPAVTRC ( KHOID , KHOTYP , KHOIPB , KHOALX , KHOPERI , KHORSQ , KHOOBJ , KHOFOR , KHOOPT , KHOETAPE , KHOCHAM , KHOACT , KHOANV , KHONVV , KHOAVO , KHOOEF , KHOCRU , KHOCRD , KHOCRH ) 
			VALUES ( V_TRACEAVNID , P_TYPE , P_CODEOFFRE , P_VERSION , 'RSQ' , P_CODERSQ , 0 , 0 , 0 , '**********' , '' , 'C' , '' , '' , 'O' , '' , P_USER , P_DATESYSTEM , P_HEURESYSTEM ) ; 
  
		END IF ; 
  
		 --ENREGISTREMENT DATE MODIFICATION AVN RISQUE 
		SELECT PBAVN , PBAVA * 10000 + PBAVM * 100 + PBAVJ INTO V_NUMAVN , V_DATEAVN FROM YPOBASE WHERE PBIPB = P_CODEOFFRE AND PBALX = P_VERSION AND PBTYP = P_TYPE ; 
  
		UPDATE YPRTRSQ 
		SET JEAVA = P_DATEEFFETAVNLOCALANNEE , JEAVM = P_DATEEFFETAVNLOCALMOIS , JEAVJ = P_DATEEFFETAVNLOCALJOUR , JEAVF = V_NUMAVN 
		WHERE JEIPB = P_CODEOFFRE AND JEALX = P_VERSION AND JERSQ = P_CODERSQ ; 
  
		 --ENREGISTREMENT DATE MODIFICATION AVN OBJET SI MONO OBJET 
		IF ( V_COUNTOBJ = 1 ) THEN 
  
		UPDATE YPRTOBJ 
		SET JGAVA = P_DATEEFFETAVNLOCALANNEE , JGAVM = P_DATEEFFETAVNLOCALMOIS , JGAVJ = P_DATEEFFETAVNLOCALJOUR , JGAVF = V_NUMAVN 
		WHERE JGIPB = P_CODEOFFRE AND JGALX = P_VERSION AND JGRSQ = P_CODERSQ ; 
         ELSE 
		 UPDATE YPRTOBJ 
		SET JGAVA = P_DATEEFFETAVNLOCALANNEE , JGAVM = P_DATEEFFETAVNLOCALMOIS , JGAVJ = P_DATEEFFETAVNLOCALJOUR , JGAVF = V_NUMAVN 
		WHERE JGIPB = P_CODEOFFRE AND JGALX = P_VERSION AND JGRSQ = P_CODERSQ AND (JGAVA * 10000 + JGAVM * 100 + JGAVJ  ) = 0; 
		END IF ; 
  
		 --ENREGISTREMENT SI CRÉATION DE RISQUE 
		IF ( V_COUNTCREATERSQ = 0 ) THEN 
			UPDATE YPRTRSQ 
			SET JEAVE = V_NUMAVN 
			WHERE JEIPB = P_CODEOFFRE AND JEALX = P_VERSION AND JERSQ = P_CODERSQ ; 
		END IF ; 
  
	END IF ; 
   --MODIFICATION DATE MODIF OBJ = DATE MODIF RSQ SI DATE MODIF OBJ == 0
       UPDATE YPRTOBJ 
		SET JGAVA = P_DATEEFFETAVNLOCALANNEE , JGAVM = P_DATEEFFETAVNLOCALMOIS , JGAVJ = P_DATEEFFETAVNLOCALJOUR 
	WHERE JGIPB = P_CODEOFFRE AND JGALX = P_VERSION AND JGRSQ = P_CODERSQ AND JGAVA = 0 AND JGAVJ = 0 AND JGAVM = 0 ; 

	IF ( V_COUNTOBJ = 1 ) THEN 
  
		SELECT JEINA , JEIXL , JEIXF , JEIXC , JERGT , JECNA , JEPBT , JERUL , JERUT 
			INTO V_RSQINA , V_RSQIXL , V_RSQIXF , V_RSQIXC , V_RSQRGT , V_RSQCNA , V_RSQPBT , V_RSQRUL , V_RSQRUT 
		FROM YPRTRSQ 
		WHERE JEIPB = P_CODEOFFRE AND JEALX = P_VERSION AND JERSQ = P_CODERSQ ; 
  
		UPDATE YPRTOBJ 
		SET JGINA = V_RSQINA , JGIXL = V_RSQIXL , JGIXF = V_RSQIXF , JGIXC = V_RSQIXC , JGRGT = V_RSQRGT , JGCNA = V_RSQCNA , JGPBT = V_RSQPBT , JGRUL = V_RSQRUL , JGRUT = V_RSQRUT , JGTEM = P_ISRISQUETEMPORAIRE 
		WHERE JGIPB = P_CODEOFFRE AND JGALX = P_VERSION AND JGRSQ = P_CODERSQ ; 
  
	END IF ; 
	SET P_OUTCODERSQ = P_CODERSQ ; 
  
	P2 : BEGIN ATOMIC  -- TRAITEMENT DU CALCUL D'ASSIETTE STANDARD D'UNE FORMULE (KPOPT) 
		DECLARE V_VALEUR DECIMAL ( 19 , 0 ) DEFAULT 0 ; 
		DECLARE V_VALEURACTUALISEE INTEGER DEFAULT 0 ; 
		DECLARE V_UNIT CHAR ( 1 ) DEFAULT '' ; 
		DECLARE V_TYPE CHAR ( 5 ) DEFAULT '' ; 
		DECLARE V_HT CHAR ( 1 ) DEFAULT '' ; 
		DECLARE V_ENSTYPE CHAR ( 5 ) DEFAULT '' ; 
  
		DECLARE V_COUNTAPP INTEGER DEFAULT 0 ; 
  
		DECLARE V_CALCULOK INTEGER DEFAULT 0 ; 
		DECLARE V_DATEAVNRSQ INTEGER DEFAULT 0 ; 
		DECLARE V_DATEAVNOPT INTEGER DEFAULT 0 ; 
		DECLARE V_NUMAVNOPT INTEGER DEFAULT 0 ; 
  
		DECLARE V_YEARAVN INTEGER DEFAULT 0 ; 
		DECLARE V_MONTHAVN INTEGER DEFAULT 0 ; 
		DECLARE V_DAYAVN INTEGER DEFAULT 0 ; 
  
		SET V_CALCULOK = 1 ; 
		FOR LOOP_RSQ AS FREE_LIST CURSOR FOR 
			SELECT KDDFOR V_CODEFORMULE , KDDOPT V_CODEOPTION 
				FROM KPOPTAP 
				WHERE KDDIPB = P_CODEOFFRE AND KDDALX = P_VERSION AND KDDTYP = P_TYPE AND KDDRSQ = P_CODERSQ 
			GROUP BY KDDFOR , KDDOPT 
		DO 
			SET V_MODIFFORMULE = 0 ; 
			SET V_DATEAVNRSQ = 0 ; 
			SELECT ( JEAVA * 10000 + JEAVM * 100 + JEAVJ ) INTO V_DATEAVNRSQ FROM YPRTRSQ WHERE JEIPB = P_CODEOFFRE AND JEALX = P_VERSION AND JERSQ = P_CODERSQ ; 
  
			SET V_VALEUR = 0 ; 
			 --COMPTE LE NOMBRE D'ENREGISTREMENT RQ 
			SELECT COUNT ( * ) INTO V_COUNTAPP FROM KPOPTAP WHERE KDDIPB = P_CODEOFFRE AND KDDALX = P_VERSION AND KDDTYP = P_TYPE AND KDDFOR = V_CODEFORMULE AND KDDOPT = V_CODEOPTION AND KDDPERI = 'RQ' ; 
  
			IF ( V_COUNTAPP > 0 ) THEN 
				SELECT JEVAL , JEVAU , JEVAT , JEVAA INTO V_VALEUR , V_UNIT , V_TYPE , V_VALEURACTUALISEE FROM YPRTRSQ WHERE JEIPB = P_CODEOFFRE AND JEALX = P_VERSION AND JERSQ = P_CODERSQ ; 
			END IF ; 
  
			 --COMPTE LE NOMBRE D'ENREGISTREMENT OB 
			SELECT COUNT ( * ) INTO V_COUNTAPP FROM KPOPTAP WHERE KDDIPB = P_CODEOFFRE AND KDDALX = P_VERSION AND KDDTYP = P_TYPE AND KDDFOR = V_CODEFORMULE AND KDDOPT = V_CODEOPTION AND KDDPERI = 'OB' ; 
			SET V_CALCULOK = 1 ; 
			IF ( V_COUNTAPP > 0 ) THEN 
				IF ( V_NUMAVN > 0 ) THEN 
					FOR LOOP_OBJ1 AS FREE_LIST CURSOR FOR 
						SELECT JGVAL VALEUR , JGVAA VALEURACTUALISEE , JGVAU UNIT , JGVAT TYPE , JGVAH HT , IFNULL ( KGMTYVAL , '' ) ENSTYP 
							FROM YPRTOBJ 
								INNER JOIN YPOBASE ON PBIPB = JGIPB AND PBALX = JGALX AND PBTYP = P_TYPE 
								INNER JOIN KPOPTAP ON JGIPB = KDDIPB AND JGALX = KDDALX AND JGRSQ = KDDRSQ AND JGOBJ = KDDOBJ AND KDDFOR = V_CODEFORMULE AND KDDOPT = V_CODEOPTION AND KDDPERI = 'OB' 
								LEFT JOIN KTYPVALD ON KGMBASE = JGVAT 
							WHERE JGIPB = P_CODEOFFRE AND JGALX = P_VERSION AND JGRSQ = P_CODERSQ 
								AND ( ( JGVFA * 10000 + JGVFM * 100 + JGVFJ >= PBAVA * 10000 + PBAVM * 100 + PBAVJ ) OR ( JGVFA * 10000 + JGVFM * 100 + JGVFJ = 0 ) ) 
					DO 
						IF ( ( V_ENSTYPE = '' OR V_ENSTYPE = ENSTYP ) AND ( V_UNIT = '' OR V_UNIT = UNIT ) AND ( V_HT = '' OR V_HT = HT ) AND ( V_CALCULOK > 0 ) ) THEN 
							SET V_VALEUR = V_VALEUR + VALEUR ; 
							SET V_VALEURACTUALISEE = V_VALEURACTUALISEE + VALEURACTUALISEE ; 
							SET V_UNIT = UNIT ; 
							SET V_TYPE = TYPE ; 
							SET V_HT = HT ; 
							SET V_ENSTYPE = ENSTYP ; 
						ELSE 
							SET V_CALCULOK = 0 ; 
							SET V_VALEUR = 0 ; 
							SET V_VALEURACTUALISEE = 0 ; 
							SET V_UNIT = '' ; 
							SET V_TYPE = '' ; 
							SET V_HT = '' ; 
							SET V_ENSTYPE = '' ; 
						END IF ; 
					END FOR ; 
				ELSE 
					FOR LOOP_OBJ2 AS FREE_LIST CURSOR FOR 
						SELECT JGVAL VALEUR , JGVAA VALEURACTUALISEE , JGVAU UNIT , JGVAT TYPE , JGVAH HT , IFNULL ( KGMTYVAL , '' ) ENSTYP 
							FROM YPRTOBJ 
								INNER JOIN KPOPTAP ON JGIPB = KDDIPB AND JGALX = KDDALX AND JGRSQ = KDDRSQ AND JGOBJ = KDDOBJ AND KDDFOR = V_CODEFORMULE AND KDDOPT = V_CODEOPTION AND KDDPERI = 'OB' 
								LEFT JOIN KTYPVALD ON KGMBASE = JGVAT 
							WHERE JGIPB = P_CODEOFFRE AND JGALX = P_VERSION AND JGRSQ = P_CODERSQ 
					DO 
						IF ( ( V_ENSTYPE = '' OR V_ENSTYPE = ENSTYP ) AND ( V_UNIT = '' OR V_UNIT = UNIT ) AND ( V_HT = '' OR V_HT = HT ) AND ( V_CALCULOK > 0 ) ) THEN 
							SET V_VALEUR = V_VALEUR + VALEUR ; 
							SET V_VALEURACTUALISEE = V_VALEURACTUALISEE + VALEURACTUALISEE ; 
							SET V_UNIT = UNIT ; 
							SET V_TYPE = TYPE ; 
							SET V_HT = HT ; 
							SET V_ENSTYPE = ENSTYP ; 
						ELSE 
							SET V_CALCULOK = 0 ; 
							SET V_VALEUR = 0 ; 
							SET V_VALEURACTUALISEE = 0 ; 
							SET V_UNIT = '' ; 
							SET V_TYPE = '' ; 
							SET V_HT = '' ; 
							SET V_ENSTYPE = '' ; 
						END IF ; 
					END FOR ; 
				END IF ; 
			END IF ; 
  
			IF ( V_CALCULPAR > 0 ) THEN 
				UPDATE KPOPT SET KDBASVALO = V_VALEUR , KDBASVALA = V_VALEURACTUALISEE , KDBASVALW = 0 , KDBASUNIT = V_UNIT , KDBASBASE = V_TYPE , 
							KDBVAL = V_VALEUR , KDBVAA = V_VALEURACTUALISEE , KDBVAU = V_UNIT , KDBVAT = V_TYPE 
					WHERE KDBIPB = P_CODEOFFRE AND KDBALX = P_VERSION AND KDBTYP = P_TYPE AND KDBFOR = V_CODEFORMULE AND KDBOPT = V_CODEOPTION ; 
  
				P3 : BEGIN ATOMIC  -- TRAITEMENT DU CALCUL D'ASSIETTE DE GARANTIE SANS INVENTAIRE (KPGARAN) 
					DECLARE V_NATAPP CHAR ( 1 ) DEFAULT '' ; 
					DECLARE V_COUNTGAR INTEGER DEFAULT 0 ; 
					DECLARE V_COUNTENS INTEGER DEFAULT 0 ; 
  
					FOR LOOP_GARAN AS FREE_LIST CURSOR FOR 
						SELECT KDEID IDGAR , KGKTYVAL ENSGAR , KDEGARAN GARANTIE , KDEASBASE ASSBASE 
							FROM KPGARAN 
								INNER JOIN KGARTVL ON KGKGAR = KDEGARAN 
							WHERE KDEIPB = P_CODEOFFRE AND KDEALX = P_VERSION AND KDETYP = P_TYPE AND KDEFOR = V_CODEFORMULE AND KDEOPT = V_CODEOPTION 
								AND ( KDEALA = 'A' OR KDEALA = 'B' )  --AND KDEINVSP <> 'O' 
					DO 
						SET V_NATAPP = '' ; 
						SET V_COUNTGAR = 0 ; 
						SET V_COUNTENS = 0 ; 
						SET V_VALEUR = 0 ; 
						SET V_UNIT = '' ; 
						SET V_TYPE = '' ; 
						SET V_HT = '' ; 
						SET V_ENSTYPE = '' ; 
  
						 -- RÉCUPÉRATION DE LA NATURE DU S'APPLIQUE À POUR LA GARANTIE 
						SELECT DISTINCT KDFGAN INTO V_NATAPP FROM KPGARAP WHERE KDFKDEID = IDGAR ; 
						SET V_CALCULOK = 1 ; 
						 -- V_NATAPP => A = ACCORDÉE ; E = EXCLUE ; '' = AUCUNE APPLICATION 
						CASE V_NATAPP 
							WHEN 'A' THEN  -- LORSQUE LA GARANTIE EST ACCORDÉE DANS LA TABLE KPGARAP 
								 -- RÉCUPÉRATION DE TOUS LES OBJETS ET ADDITION DE LEUR VALEUR QUI SONT PRÉSENTS DANS KPGARAP 
								FOR LOOP_OBET AS FREE_LIST CURSOR FOR 
									SELECT JGVAL VALEUR , JGVAU UNIT , JGVAT TYPE , JGVAH HT , IFNULL ( KGMTYVAL , '' ) ENSTYP 
										FROM YPRTOBJ 
											INNER JOIN KPGARAP ON KDFIPB = JGIPB AND KDFALX = JGALX AND KDFTYP = P_TYPE AND KDFFOR = V_CODEFORMULE AND KDFOPT = V_CODEOPTION AND KDFGARAN = GARANTIE AND KDFRSQ = JGRSQ AND KDFOBJ = JGOBJ 
											LEFT JOIN KTYPVALD ON KGMBASE = JGVAT 
										WHERE JGIPB = P_CODEOFFRE AND JGALX = P_VERSION AND JGRSQ = P_CODERSQ 
											AND ( ( ( ( JGVDA * 10000 + JGVDM * 100 + JGVDJ ) >= V_DATEAVN OR ( JGVDA * 10000 + JGVDM * 100 + JGVDJ ) = 0 ) 
												AND ( ( JGVFA * 10000 + JGVFM * 100 + JGVFJ ) >= V_DATEAVN OR ( JGVFA * 10000 + JGVFM * 100 + JGVFJ ) = 0 ) ) 
											OR ( V_DATEAVN = 0 ) ) 
								DO 
									IF ( ( V_ENSTYPE = '' OR V_ENSTYPE = ENSTYP ) AND ( V_UNIT = '' OR V_UNIT = UNIT ) AND ( V_HT = '' OR V_HT = HT ) AND ( V_CALCULOK > 0 ) ) THEN 
										SET V_VALEUR = V_VALEUR + VALEUR ; 
										SET V_UNIT = UNIT ; 
										SET V_TYPE = TYPE ; 
										SET V_HT = HT ; 
										SET V_ENSTYPE = ENSTYP ; 
									ELSE 
										SET V_CALCULOK = 0 ; 
										SET V_VALEUR = 0 ; 
										SET V_UNIT = '' ; 
										SET V_TYPE = '' ; 
										SET V_HT = '' ; 
										SET V_ENSTYPE = '' ; 
									END IF ; 
								END FOR ; 
  
								SELECT COUNT ( * ) INTO V_COUNTENS FROM KGARTVL WHERE KGKGAR = GARANTIE AND KGKTYVAL = V_ENSTYPE ; 
  
								IF ( V_CALCULPAR > 0 AND V_COUNTENS > 0 ) THEN 
									/* IF ( ASSBASE = '' ) THEN     
										SET ASSBASE = V_TYPE ;     
									END IF ; */ 
									IF ( V_TYPE <> '' ) THEN 
										SET ASSBASE = V_TYPE ; 
									END IF ; 
									UPDATE KPGARAN 
										SET KDEASVALO = V_VALEUR , KDEASVALA = V_VALEUR , KDEASVALW = 0 , KDEASUNIT = V_UNIT , KDEASBASE = ASSBASE 
										WHERE KDEID = IDGAR ; 
									--UPDATE KPGARAH 
									--	SET KDEASVALO = V_VALEUR , KDEASVALA = V_VALEUR , KDEASVALW = 0 , KDEASUNIT = V_UNIT , KDEASBASE = ASSBASE 
									--	WHERE KDEID = IDGAR ; 
									--UPDATE KPGARAW 
									--	SET KDEASVALO = V_VALEUR , KDEASVALA = V_VALEUR , KDEASVALW = 0 , KDEASUNIT = V_UNIT , KDEASBASE = ASSBASE 
									--	WHERE KDEID = IDGAR ; 
									SET V_MODIFFORMULE = 1 ; 
								END IF ; 
  
							WHEN 'E' THEN  -- LORSQUE LA GARANTIE EST EXCLUE DANS LA TABLE KPGARAP 
								 -- RÉCUPÉRATION DE TOUS LES OBJETS ET ADDITION DE LEUR VALEUR QUI NE SONT PAS PRÉSENTS DANS KPGARAP 
								FOR LOOP_OBJET AS FREE_LIST CURSOR FOR 
									SELECT JGVAL VALEUR , JGVAU UNIT , JGVAT TYPE , JGVAH HT , IFNULL ( KGMTYVAL , '' ) ENSTYP 
										FROM YPRTOBJ 
											INNER JOIN KPGARAP ON KDFIPB = JGIPB AND KDFALX = JGALX AND KDFTYP = P_TYPE AND KDFFOR = V_CODEFORMULE AND KDFOPT = V_CODEOPTION AND KDFGARAN = GARANTIE AND KDFRSQ = JGRSQ AND KDFOBJ <> JGOBJ 
											LEFT JOIN KTYPVALD ON KGMBASE = JGVAT 
										WHERE JGIPB = P_CODEOFFRE AND JGALX = P_VERSION AND JGRSQ = P_CODERSQ 
											AND ( ( ( ( JGVDA * 10000 + JGVDM * 100 + JGVDJ ) >= V_DATEAVN OR ( JGVDA * 10000 + JGVDM * 100 + JGVDJ ) = 0 ) 
												AND ( ( JGVFA * 10000 + JGVFM * 100 + JGVFJ ) >= V_DATEAVN OR ( JGVFA * 10000 + JGVFM * 100 + JGVFJ ) = 0 ) ) 
											OR ( V_DATEAVN = 0 ) ) 
								DO 
									IF ( ( V_ENSTYPE = '' OR V_ENSTYPE = ENSTYP ) AND ( V_UNIT = '' OR V_UNIT = UNIT ) AND ( V_HT = '' OR V_HT = HT ) AND ( V_CALCULOK > 0 ) ) THEN 
										SET V_VALEUR = V_VALEUR + VALEUR ; 
										SET V_UNIT = UNIT ; 
										SET V_TYPE = TYPE ; 
										SET V_HT = HT ; 
										SET V_ENSTYPE = ENSTYP ; 
									ELSE 
										SET V_CALCULOK = 0 ; 
										SET V_VALEUR = 0 ; 
										SET V_UNIT = '' ; 
										SET V_TYPE = '' ; 
										SET V_HT = '' ; 
										SET V_ENSTYPE = '' ; 
									END IF ; 
								END FOR ; 
  
								SELECT COUNT ( * ) INTO V_COUNTENS FROM KGARTVL WHERE KGKGAR = GARANTIE AND KGKTYVAL = V_ENSTYPE ; 
  
								IF ( V_CALCULPAR > 0 AND V_COUNTENS > 0 ) THEN 
									/* IF ( ASSBASE = '' ) THEN     
										SET ASSBASE = V_TYPE ;     
									END IF ; */ 
									IF ( V_TYPE <> '' ) THEN 
										SET ASSBASE = V_TYPE ; 
									END IF ; 
									UPDATE KPGARAN 
										SET KDEASVALO = V_VALEUR , KDEASVALA = V_VALEUR , KDEASVALW = 0 , KDEASUNIT = V_UNIT , KDEASBASE = ASSBASE 
									WHERE KDEID = IDGAR ; 
									--UPDATE KPGARAH 
									--	SET KDEASVALO = V_VALEUR , KDEASVALA = V_VALEUR , KDEASVALW = 0 , KDEASUNIT = V_UNIT , KDEASBASE = ASSBASE 
									--	WHERE KDEID = IDGAR ; 
									--UPDATE KPGARAW 
									--	SET KDEASVALO = V_VALEUR , KDEASVALA = V_VALEUR , KDEASVALW = 0 , KDEASUNIT = V_UNIT , KDEASBASE = ASSBASE 
									--WHERE KDEID = IDGAR ; 
									SET V_MODIFFORMULE = 1 ; 
								END IF ; 
  
							ELSE  -- LORSQUE QU'IL N'Y A AUCUNE APPLICATION DANS LA TABLE KPGARAP 
								SELECT KDBASVALO , KDBASUNIT , KDBASBASE INTO V_VALEUR , V_UNIT , V_TYPE 
									FROM KPOPT 
								WHERE KDBIPB = P_CODEOFFRE AND KDBALX = P_VERSION AND KDBTYP = P_TYPE AND KDBFOR = V_CODEFORMULE AND KDBOPT = V_CODEOPTION ; 
  
									 -- VÉRIFIE QUE LE TYPE D'ENSEMBLE EST PRÉSENT DANS LE RÉFÉRENTIEL 
								SELECT COUNT ( * ) INTO V_COUNTGAR FROM KTYPVALD WHERE KGMTYVAL = ENSGAR AND KGMBASE = V_TYPE ; 
								IF ( V_COUNTGAR > 0 ) THEN 
									/* IF ( ASSBASE = '' ) THEN     
										SET ASSBASE = V_TYPE ;     
									END IF ; */ 
									IF ( V_TYPE <> '' ) THEN 
										SET ASSBASE = V_TYPE ; 
									END IF ; 
									 -- MISE À JOUR DE L'ASSIETTE AVEC LES VALEURS DE L'OPTION 
									UPDATE KPGARAN 
										SET KDEASVALO = V_VALEUR , KDEASVALA = V_VALEUR , KDEASVALW = 0 , KDEASUNIT = V_UNIT , KDEASBASE = ASSBASE 
										WHERE KDEID = IDGAR ; 
									--UPDATE KPGARAH 
									--	SET KDEASVALO = V_VALEUR , KDEASVALA = V_VALEUR , KDEASVALW = 0 , KDEASUNIT = V_UNIT , KDEASBASE = ASSBASE 
									--	WHERE KDEID = IDGAR ; 
									--UPDATE KPGARAW 
									--	SET KDEASVALO = V_VALEUR , KDEASVALA = V_VALEUR , KDEASVALW = 0 , KDEASUNIT = V_UNIT , KDEASBASE = ASSBASE 
									--	WHERE KDEID = IDGAR ; 
									SET V_MODIFFORMULE = 1 ; 
								END IF ; 
								 -- SI LE TYPE EST VIDE 
								IF ( V_TYPE = '' ) THEN 
									UPDATE KPGARAN 
										SET KDEASVALO = V_VALEUR , KDEASVALA = V_VALEUR , KDEASVALW = 0 , KDEASUNIT = V_UNIT , KDEASBASE = ASSBASE 
										WHERE KDEID = IDGAR ; 
									--UPDATE KPGARAH 
									--	SET KDEASVALO = V_VALEUR , KDEASVALA = V_VALEUR , KDEASVALW = 0 , KDEASUNIT = V_UNIT , KDEASBASE = ASSBASE 
									--	WHERE KDEID = IDGAR ; 
									--UPDATE KPGARAW 
									--SET KDEASVALO = V_VALEUR , KDEASVALA = V_VALEUR , KDEASVALW = 0 , KDEASUNIT = V_UNIT , KDEASBASE = ASSBASE 
									--WHERE KDEID = IDGAR ; 
									SET V_MODIFFORMULE = 1 ; 
								END IF ; 
					END CASE ; 
  
					END FOR ; 
				END P3 ; 
			END IF ; 
  
			IF ( V_MODIFFORMULE > 0 AND V_NUMAVN > 0 ) THEN 
				SET V_DATEAVNOPT = 0 ; 
				SET V_NUMAVNOPT = 0 ; 
				SELECT KDBAVG , ( KDBAVA * 10000 + KDBAVM * 100 + KDBAVJ ) 
					INTO V_NUMAVNOPT , V_DATEAVNOPT 
					FROM KPOPT 
				WHERE KDBIPB = P_CODEOFFRE AND KDBALX = P_VERSION AND KDBTYP = P_TYPE AND KDBFOR = V_CODEFORMULE AND KDBOPT = V_CODEOPTION ; 
				IF ( V_NUMAVNOPT <> V_NUMAVN ) THEN 
					IF ( V_DATEAVNOPT <> 0 AND V_DATEAVNOPT < V_DATEAVNRSQ ) THEN 
						SET V_DATEAVNOPT = V_DATEAVNRSQ ; 
					END IF ; 
					IF ( V_DATEAVNOPT < V_DATEAVN ) THEN 
						SET V_DATEAVNOPT = V_DATEAVN ; 
					END IF ; 
  
					SET V_YEARAVN = ROUND ( V_DATEAVNOPT / 10000 , 0 ) ; 
					SET V_MONTHAVN = ROUND ( ( V_DATEAVNOPT - ( V_YEARAVN * 10000 ) ) / 100 , 0 ) ; 
					SET V_DAYAVN = ROUND ( ( V_DATEAVNOPT - ( V_YEARAVN * 10000 ) - ( V_MONTHAVN * 100 ) ) , 0 ) ; 
  
					UPDATE KPOPT SET KDBAVG = V_NUMAVN , KDBAVA = V_YEARAVN , KDBAVM = V_MONTHAVN , KDBAVJ = V_DAYAVN 
						WHERE KDBIPB = P_CODEOFFRE AND KDBALX = P_VERSION AND KDBTYP = P_TYPE AND KDBFOR = V_CODEFORMULE AND KDBOPT = V_CODEOPTION ; 
				END IF ; 
			END IF ; 
  
		END FOR ; 
	END P2 ; 
  
	/*   -- TRAITEMENT DES ADRESSES ET DES CIBLES */ 
	/*   ****************************************  */ 
	 
	 --DÉTERMINATION DU RISQUE PRINCIPAL 
	SELECT MIN ( JERSQ ) INTO V_CODERISQUEPRINCIPAL FROM YPRTRSQ WHERE JEIPB = P_CODEOFFRE AND JEALX = P_VERSION ; 
	 
	 
	CALL SP_SAVERSQ_ADR ( P_CODEOFFRE , P_VERSION , P_TYPE , P_BATIMENT , P_NUMVOIE , P_NUMVOIE2 , P_EXTVOIE , P_NOMVOIE , P_BP , P_LOCALITE , P_DEP , P_CP , P_NOMVILLE , P_VOIECOMPLETE , P_VILLECOMPLETE , P_CPX , P_NOMCEDEX , P_MATHEX , P_ISADDRESSEMPTY , P_CODERSQ , V_CODERISQUEPRINCIPAL , P_LATITUDE ,P_LONGITUDE) ; 
	 
	P4 : BEGIN ATOMIC 
	 
		DECLARE V_CIBLERISQUE CHAR ( 10 ) DEFAULT '' ; 
			 
	 
		IF ( V_CODERISQUEPRINCIPAL = P_CODERSQ ) THEN 
			 --GESTION DES CIBLES 
			 --RÉCUPÉRATION DE LA CIBLE DU RISQUE PRINCIPAL 
			SELECT KABCIBLE INTO V_CIBLERISQUE FROM KPRSQ WHERE KABTYP = P_TYPE AND KABIPB = P_CODEOFFRE AND KABALX = P_VERSION AND KABRSQ = V_CODERISQUEPRINCIPAL ; 
			SELECT PBBRA INTO V_CODEBRANCHE FROM YPOBASE WHERE PBIPB = P_CODEOFFRE AND PBALX = P_VERSION AND PBTYP = P_TYPE ; 
  
			SELECT CAAFR INTO V_FRAISACC 
			FROM YCATEGO 
			INNER JOIN KCIBLEF ON CABRA = KAIBRA AND CASBR = KAISBR AND CACAT = KAICAT 
			WHERE KAICIBLE = V_CIBLERISQUE AND KAIBRA = V_CODEBRANCHE ; 
  
			UPDATE YPRTENT 
			SET JDAFR = V_FRAISACC 
			WHERE JDIPB = P_CODEOFFRE AND JDALX = P_VERSION AND JDAFC = 'S' ; 
  
			 --ENREGISTREMENT DE LA CIBLE SUR L'OFFRE 
			UPDATE KPENT SET KAACIBLE = V_CIBLERISQUE WHERE KAATYP = P_TYPE AND KAAIPB = P_CODEOFFRE AND KAAALX = P_VERSION ; 
			UPDATE YPOBASE	SET PBSBR = V_SOUSBRANCHE , PBCAT = V_CATEGORIE WHERE PBIPB = P_CODEOFFRE AND PBALX = P_VERSION AND PBTYP = P_TYPE ; 
			 --ENREGISTREMENT DE LA CIBLE SUR LES OBJETS DU RISQUE 
			UPDATE KPOBJ SET KACCIBLE = V_CIBLERISQUE WHERE KACTYP = P_TYPE AND KACIPB = P_CODEOFFRE AND KACALX = P_VERSION AND KACRSQ = V_CODERISQUEPRINCIPAL ; 
			 
		END IF ; 
		 
	END P4 ; 
	 
	/*   FIN TRAITEMENT DES ADRESSES ET DES CIBLES */ 
	/*   ****************************************  */ 
	 
	CALL SP_ARBRESV ( P_TYPE , P_CODEOFFRE , P_VERSION , 'RSQ' , 30 , 1 , 'RSQ' , P_CODERSQ , 0 , 0 , 0 , 0 , '' , P_USER , P_DATESYSTEM , P_HEURESYSTEM , 'O' , 'N' ) ; 
	CALL SP_SETDATES ( P_CODEOFFRE , P_VERSION , P_TYPE , V_NUMAVN , P_CODERSQ , P_CODEOBJ , 0 , 0 , 0 , 'RSQ' ) ; 
  
	/* ENREGISTREMENT DES INFORMATIONS DE RÉGULARISATIONS SUR TOUS LES OBJETS */ 
	P5 : BEGIN ATOMIC 
		DECLARE V_RUL CHAR ( 1 ) DEFAULT '' ; 
		DECLARE V_RUT CHAR ( 1 ) DEFAULT '' ; 
		DECLARE V_PBA DECIMAL ( 1 , 0 ) DEFAULT 0 ; 
		DECLARE V_PBC DECIMAL ( 2 , 0 ) DEFAULT 0 ; 
		DECLARE V_PBN CHAR ( 1 ) DEFAULT '' ; 
		DECLARE V_PBP DECIMAL ( 3 , 0 ) DEFAULT 0 ; 
		DECLARE V_PBR DECIMAL ( 3 , 0 ) DEFAULT 0 ; 
		DECLARE V_PBS DECIMAL ( 3 , 0 ) DEFAULT 0 ; 
		DECLARE V_PBT DECIMAL ( 2 , 0 ) DEFAULT 0 ; 
		 
		SELECT JERUL , JERUT , JEPBA , JEPBC , JEPBN , JEPBP , JEPBR , JEPBS , JEPBT INTO V_RUL , V_RUT , V_PBA , V_PBC , V_PBN , V_PBP , V_PBR , V_PBS , V_PBT 
			FROM YPRTRSQ WHERE JEIPB = P_CODEOFFRE AND JEALX = P_VERSION AND JERSQ = P_CODERSQ ; 
  
		UPDATE YPRTOBJ 
			SET JGRUL = V_RUL , JGRUT = V_RUT , JGPBA = V_PBA , JGPBC = V_PBC , JGPBN = V_PBN , JGPBP = V_PBP , JGPBR = V_PBR , JGPBS = V_PBS , JGPBT = V_PBT 
		WHERE JGIPB = P_CODEOFFRE AND JGALX = P_VERSION AND JGRSQ = P_CODERSQ ; 
	END P5 ; 
END P1  ; 

