CREATE PROCEDURE SP_SCPXLCI ( 
	IN P_ID INTEGER , 
	IN P_EXPRESSION INTEGER , 
	IN P_LCIVALEUR DECIMAL(13, 2) , 
	IN P_LCIUNITE CHAR(3) , 
	IN P_LCITYPE CHAR(3) , 
	IN P_CONCURVALEUR DECIMAL(13, 2) , 
	IN P_CONCURUNITE CHAR(3) , 
	IN P_CONCURTYPE CHAR(3) ) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC SP_SCPXLCI 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	CLOSQLCSR = *ENDMOD , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = ZALBINKHEO , 
	DYNDFTCOL = *YES , 
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC 
  
DECLARE V_ORDRE INTEGER DEFAULT 0 ; 
  
IF ( P_ID = 0 ) THEN 
  
SELECT IFNULL ( MAX ( KDJORDRE ) + 1 , 1 ) INTO V_ORDRE FROM KPEXPLCID WHERE KDJKDIID = P_EXPRESSION ; 
  
CALL SP_NCHRONO ( 'KDJID' , P_ID ) ; 
INSERT INTO KPEXPLCID 
( KDJID , KDJKDIID , KDJORDRE , KDJLCVAL , KDJLCVAU , KDJLCBASE , KDJLOVAL , KDJLOVAU , KDJLOBASE ) 
VALUES 
( P_ID , P_EXPRESSION , V_ORDRE , P_LCIVALEUR , P_LCIUNITE , P_LCITYPE , P_CONCURVALEUR , P_CONCURUNITE , P_CONCURTYPE ) ; 
  
ELSE 
  
UPDATE KPEXPLCID 
SET KDJLCVAL = P_LCIVALEUR , KDJLCVAU = P_LCIUNITE , KDJLCBASE = P_LCITYPE , 
KDJLOVAL = P_CONCURVALEUR , KDJLOVAU = P_CONCURUNITE , KDJLOBASE = P_CONCURTYPE 
WHERE KDJID = P_ID AND KDJKDIID = P_EXPRESSION ; 
  
END IF ; 
  
END P1  ; 
  

  

