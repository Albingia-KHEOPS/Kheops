

  
CREATE PROCEDURE  SP_SETLISTRSQREGULE_BNS ( 
	IN P_CODECONTRAT CHAR(9) , 
	IN P_VERSION INTEGER , 
	IN P_TYPE CHAR(1) , 
	IN P_CODEAVN CHAR(15) , 
	IN P_LOTID BIGINT , 
	IN P_REGULEID CHAR(15) , 
	IN P_TYPEREGULE CHAR(5) , 
	IN P_PERIODEDEB INTEGER , 
	IN P_PERIODEFIN INTEGER , 
	IN P_EXERCICE INTEGER , 
	IN P_CODEICT INTEGER , 
	IN P_CODEICC INTEGER , 
	IN P_TAUXCOM DECIMAL(5, 2) , 
	IN P_TAUXCOMCATNAT DECIMAL(5, 3) , 
	IN P_CODEENC CHAR(1) , 
	IN P_USER CHAR(15) , 
	IN P_DATENOW INTEGER , 
	IN P_HOURNOW INTEGER , 
	IN P_MODE CHAR(10) , 
	IN P_MOTIF CHAR(10) , 
	IN P_REGULMODE CHAR(10) , 
	IN P_REGULTYPE CHAR(1) , 
	IN P_REGULNIV CHAR(1) , 
	IN P_REGULAVN CHAR(1) , 
	OUT P_NEWREGULEID BIGINT ) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC SP_SETLISTRSQREGULE_BNS 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	CLOSQLCSR = *ENDMOD , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = ZALBINKHEO , 
	DYNDFTCOL = *YES , 
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC 
  
		DECLARE V_NEWREGULID BIGINT DEFAULT 0 ; 
		DECLARE V_NEWGURID NUMERIC ( 15 , 0 ) DEFAULT 0 ; 
		DECLARE V_DATEAVN INTEGER DEFAULT 0 ; 
		DECLARE V_APPLFRAISACC CHAR ( 1 ) DEFAULT '' ; 
		DECLARE V_FRAISACC INTEGER DEFAULT 0 ; 
		DECLARE V_DATENOWANNEE INTEGER DEFAULT 0 ; 
		DECLARE V_DATENOWMOIS INTEGER DEFAULT 0 ; 
		DECLARE V_DATENOWJOUR INTEGER DEFAULT 0 ; 
		DECLARE V_HEURENOW DECIMAL ( 4 , 0 ) DEFAULT 0 ; 
		DECLARE V_NEWGUGID NUMERIC ( 15 , 0 ) DEFAULT 0 ; 
		DECLARE V_STR CHAR ( 2000 ) ; 
		DECLARE V_RGID BIGINT DEFAULT 0 ; 
		DECLARE V_CODEAVN BIGINT DEFAULT 0 ; 
		 
		SET V_RGID = CAST ( P_REGULEID AS BIGINT ) ; 
		SET V_CODEAVN = CAST ( P_CODEAVN AS BIGINT ) ; 
		
		IF ( TRIM ( P_MODE ) = '' ) THEN 
			SET P_NEWREGULEID = V_RGID ; 
		ELSE 
		
			/* BUG 1909 */
			IF ( EXISTS ( SELECT 1 FROM KPRGU WHERE KHWETA = 'N' AND KHWIPB = P_CODECONTRAT AND KHWALX = P_VERSION AND KHWTYP = P_TYPE FETCH FIRST 1 ROW ONLY ) ) THEN 
				SELECT KHWID INTO V_RGID FROM KPRGU WHERE KHWETA = 'N' AND KHWIPB = P_CODECONTRAT AND KHWALX = P_VERSION AND KHWTYP = P_TYPE FETCH FIRST 1 ROW ONLY ;
			END IF;
							
			
			IF ( V_RGID = 0 ) THEN 
				SET V_APPLFRAISACC = '' ; 
				SET V_FRAISACC = 0 ; 
				 
				SELECT ( PBAVA * 10000 + PBAVM * 100 + PBAVJ ) , JDAFC , JDAFR 
					INTO V_DATEAVN , V_APPLFRAISACC , V_FRAISACC 
				FROM YPOBASE 
					INNER JOIN YPRTENT ON PBIPB = JDIPB AND PBALX = JDALX 
				WHERE PBIPB = P_CODECONTRAT AND PBALX = P_VERSION AND PBTYP = P_TYPE AND PBAVN = V_CODEAVN ; 
				 
				IF ( TRIM ( P_TYPEREGULE ) = 'AVNRG' ) THEN 
					SET V_APPLFRAISACC = '' ; 
					SET V_FRAISACC = 0 ; 
				END IF ; 
				 
				CALL SP_NCHRONO ( 'KHWID' , V_NEWREGULID ) ; 
				 
				IF ( P_REGULNIV = 'E' ) THEN 
					FOR FORLOOPRSQ_GU AS FREE_LIST CURSOR FOR 
						SELECT DISTINCT SELRSQ . KHVDEB DATEDEBRSQ , SELRSQ . KHVFIN DATEFINRSQ , JERUT TYPEREGULRSQ , 
						SELRSQ . KHVRSQ RSQ , YRSQ . JEPBT PBT , YRSQ . JEPBA PBA , YRSQ . JEPBS PBS , YRSQ . JEPBR PBR , YRSQ . JEPBP PBP 
					FROM KPSELW SELRSQ 
						INNER JOIN YPRTRSQ YRSQ ON SELRSQ . KHVIPB = JEIPB AND SELRSQ . KHVALX = JEALX AND SELRSQ . KHVRSQ = JERSQ 
						INNER JOIN KPRSQ ON JEIPB = KABIPB AND JEALX = KABALX AND JERSQ = KABRSQ 
					WHERE SELRSQ . KHVID = P_LOTID AND SELRSQ . KHVPERI = 'RQ' 
					ORDER BY SELRSQ . KHVRSQ 
					FETCH FIRST 1 ROWS ONLY 
					DO 
				 
						
						 
						 
						/* INSERTION DANS KPRGU */ 
						INSERT INTO KPRGU 
						( KHWID , KHWTYP , KHWIPB , KHWALX , KHWTTR , 
						KHWRGAV , KHWAVN , KHWAVND , KHWEXE , KHWDEBP , 
						KHWFINP , KHWTRGU , KHWIPK , KHWICT , KHWICC , 
						KHWXCM , KHWCNC , KHWENC , KHWAFC , KHWAFR , 
						KHWATT , KHWMHT , KHWCNH , KHWGRG , KHWTTT , 
						KHWMTT , KHWETA , KHWSIT , KHWSTU , KHWSTD , 
						KHWSTH , KHWCRU , KHWCRD , KHWMAJU , KHWMAJD , 
						KHWAVP , KHWDESI , KHWOBSV , KHWOBSC , KHWMTF , 
						KHWMRG , KHWACC , KHWSUAV , KHWNEM , KHWASV , 
						KHWMIN , KHWBRNC , KHWPBT , KHWPBA , KHWPBS , 
						KHWPBR , KHWPBP , KHWRIA , KHWRIAF , KHWEMH , 
						KHWEMHF , KHWCOT , KHWBRNT , KHWSCHG , KHWSIDF , 
						KHWSREC , KHWSPRO , KHWSPRE , KHWSREP , KHWSRIM , 
						KHWMHC , KHWPBTR , KHWEMD , KHWSPC				 
						) 
						VALUES 
						( V_NEWREGULID , P_TYPE , P_CODECONTRAT , P_VERSION , P_TYPEREGULE , 
						P_REGULAVN , V_CODEAVN , V_DATEAVN , P_EXERCICE , P_PERIODEDEB , 
						P_PERIODEFIN , ' ' , 0 , P_CODEICT , P_CODEICC , 
						P_TAUXCOM , P_TAUXCOMCATNAT , P_CODEENC , V_APPLFRAISACC , V_FRAISACC , 
						'N' , 0 , 0 , 0 , 0 , 
						0 , 'N' , 'A' , P_USER , P_DATENOW , 
						P_HOURNOW , P_USER , P_DATENOW , P_USER , P_DATENOW , 
						V_CODEAVN , 0 , 0 , 0 , P_MOTIF , 
						P_REGULMODE , P_REGULNIV , P_REGULTYPE , ' ' , 0 , 
						0 , 0 , PBT , 0 , 0 , 
						PBR , 0 , 0 , 0 , 0 , 
						0 , 0 , 0 , 0 , 0 , 
						0 , 0 , 0 , 0 , 0 , 
						0 , PBT , 0 , 0 
						) ;	 
					END FOR ; 
				ELSE 
					/* INSERTION DANS KPRGU */ 
					INSERT INTO KPRGU 
						( KHWID , KHWTYP , KHWIPB , KHWALX , KHWTTR , 
						KHWRGAV , KHWAVN , KHWAVND , KHWEXE , KHWDEBP , 
						KHWFINP , KHWTRGU , KHWIPK , KHWICT , KHWICC , 
						KHWXCM , KHWCNC , KHWENC , KHWAFC , KHWAFR , 
						KHWATT , KHWMHT , KHWCNH , KHWGRG , KHWTTT , 
						KHWMTT , KHWETA , KHWSIT , KHWSTU , KHWSTD , 
						KHWSTH , KHWCRU , KHWCRD , KHWMAJU , KHWMAJD , 
						KHWAVP , KHWDESI , KHWOBSV , KHWOBSC , KHWMTF , 
						KHWMRG , KHWACC , KHWSUAV , KHWNEM , KHWASV , 
						KHWMIN , KHWBRNC , KHWPBT , KHWPBA , KHWPBS , 
						KHWPBR , KHWPBP , KHWRIA , KHWRIAF , KHWEMH , 
						KHWEMHF , KHWCOT , KHWBRNT , KHWSCHG , KHWSIDF , 
						KHWSREC , KHWSPRO , KHWSPRE , KHWSREP , KHWSRIM , 
						KHWMHC , KHWPBTR , KHWEMD , KHWSPC				 
						) 
					VALUES 
						( V_NEWREGULID , P_TYPE , P_CODECONTRAT , P_VERSION , P_TYPEREGULE , 
						P_REGULAVN , V_CODEAVN , V_DATEAVN , P_EXERCICE , P_PERIODEDEB , 
						P_PERIODEFIN , ' ' , 0 , P_CODEICT , P_CODEICC , 
						P_TAUXCOM , P_TAUXCOMCATNAT , P_CODEENC , V_APPLFRAISACC , V_FRAISACC , 
						'N' , 0 , 0 , 0 , 0 , 
						0 , 'N' , 'A' , P_USER , P_DATENOW , 
						P_HOURNOW , P_USER , P_DATENOW , P_USER , P_DATENOW , 
						V_CODEAVN , 0 , 0 , 0 , P_MOTIF , 
						P_REGULMODE , P_REGULNIV , P_REGULTYPE , ' ' , 0 , 
							0 , 0 , 0 , 0 , 0 , 
							0 , 0 , 0 , 0 , 0 , 
							0 , 0 , 0 , 0 , 0 , 
							0 , 0 , 0 , 0 , 0 , 
							0 , 0 , 0 , 0 
						 
						) ;	 
				END IF ; 
				 
				SET P_NEWREGULEID = V_NEWREGULID ; 
				 
			ELSE 
				IF ( P_REGULNIV = 'E' ) THEN 
					 FOR FORLOOP_UPT_RSQ_GU AS FREE_LIST CURSOR FOR 
						SELECT DISTINCT SELRSQ . KHVDEB DATEDEBRSQ , SELRSQ . KHVFIN DATEFINRSQ , JERUT TYPEREGULRSQ , 
						SELRSQ . KHVRSQ RSQ , YRSQ . JEPBT PBT , YRSQ . JEPBA PBA , YRSQ . JEPBS PBS , YRSQ . JEPBR PBR , YRSQ . JEPBP PBP 
					FROM KPSELW SELRSQ 
						INNER JOIN YPRTRSQ YRSQ ON SELRSQ . KHVIPB = JEIPB AND SELRSQ . KHVALX = JEALX AND SELRSQ . KHVRSQ = JERSQ 
						INNER JOIN KPRSQ ON JEIPB = KABIPB AND JEALX = KABALX AND JERSQ = KABRSQ 
					WHERE SELRSQ . KHVID = P_LOTID AND SELRSQ . KHVPERI = 'RQ' 
					ORDER BY SELRSQ . KHVRSQ 
					FETCH FIRST 1 ROWS ONLY 
					DO
					
						UPDATE KPRGU 
						SET KHWEXE = P_EXERCICE , KHWDEBP = P_PERIODEDEB , KHWFINP = P_PERIODEFIN , KHWICT = P_CODEICT , KHWICC = P_CODEICC , 
							KHWXCM = P_TAUXCOM , KHWCNC = P_TAUXCOMCATNAT , KHWENC = P_CODEENC , KHWSTU = P_USER , 
							KHWSTD = P_DATENOW , KHWSTH = P_HOURNOW , KHWMAJU = P_USER , KHWMAJD = P_DATENOW , KHWMTF = P_MOTIF , KHWETA = 'N' , 
							KHWMRG = P_REGULMODE , KHWSUAV = P_REGULTYPE , KHWACC = P_REGULNIV , KHWRGAV = P_REGULAVN ,
							KHWPBT = PBT , KHWPBA = PBA , KHWPBS = PBS , KHWPBR = PBR , KHWPBP = PBP 
						WHERE KHWID = V_RGID ;
					
					END FOR;
				
				ELSE
					UPDATE KPRGU 
					SET KHWEXE = P_EXERCICE , KHWDEBP = P_PERIODEDEB , KHWFINP = P_PERIODEFIN , KHWICT = P_CODEICT , KHWICC = P_CODEICC , 
						KHWXCM = P_TAUXCOM , KHWCNC = P_TAUXCOMCATNAT , KHWENC = P_CODEENC , KHWSTU = P_USER , 
						KHWSTD = P_DATENOW , KHWSTH = P_HOURNOW , KHWMAJU = P_USER , KHWMAJD = P_DATENOW , KHWMTF = P_MOTIF , KHWETA = 'N' , 
						KHWMRG = P_REGULMODE , KHWSUAV = P_REGULTYPE , KHWACC = P_REGULNIV , KHWRGAV = P_REGULAVN 
					WHERE KHWID = V_RGID ;
				END IF;
				
				SET P_NEWREGULEID = V_RGID ; 
				 
			END IF ; 
			 
			IF ( NOT EXISTS ( SELECT 1 FROM KPRGUR WHERE KILKHWID = P_NEWREGULEID FETCH FIRST 1 ROW ONLY ) ) THEN 
				 
				FOR FORLOOPRSQ AS FREE_LIST CURSOR FOR 
					SELECT DISTINCT JERSQ CODERSQ , KABDESC LIBRSQ , SELRSQ . KHVDEB DATEDEBRSQ , SELRSQ . KHVFIN DATEFINRSQ , KABCIBLE CIBLERSQ , 
					KCIBLERSQ . KAHDESC LIBCIBLERSQ , JERUT TYPEREGULRSQ , IFNULL ( YPARRSQ . TPLIL , '' ) LIBREGULRSQ , 
					( SELECT COUNT ( * ) FROM KPRGUG WHERE KHXIPB = SELRSQ . KHVIPB AND KHXALX = SELRSQ . KHVALX AND KHXTYP = SELRSQ . KHVTYP AND KHXRSQ = SELRSQ . KHVRSQ AND KHXSIT = 'V' AND KHXKHWID = P_NEWREGULEID ) ISRSQUSED , 
						SELRSQ . KHVRSQ RSQ , YRSQ . JEPBT PBT , YRSQ . JEPBA PBA , YRSQ . JEPBS PBS , 
						CASE YRSQ . JEPBT
						WHEN 0 THEN YRSQ . JEPBR  ELSE YRSQ . JEPBC END PBR , 
						YRSQ . JEPBP PBP 
					FROM KPSELW SELRSQ 
						INNER JOIN YPRTRSQ YRSQ ON SELRSQ . KHVIPB = JEIPB AND SELRSQ . KHVALX = JEALX AND SELRSQ . KHVRSQ = JERSQ 
						INNER JOIN KPRSQ ON JEIPB = KABIPB AND JEALX = KABALX AND JERSQ = KABRSQ 
						LEFT JOIN YYYYPAR YPARRSQ ON YPARRSQ . TCON = 'PRODU' AND YPARRSQ . TFAM = 'JERUT' AND YPARRSQ . TCOD = JERUT 
						INNER JOIN KPSELW SELOBJ ON SELRSQ . KHVID = SELOBJ . KHVID AND SELRSQ . KHVRSQ = SELOBJ . KHVRSQ AND SELOBJ . KHVPERI = 'OB' 
						INNER JOIN YPRTOBJ ON SELOBJ . KHVIPB = JGIPB AND SELOBJ . KHVALX = JGALX AND SELOBJ . KHVRSQ = JGRSQ AND SELOBJ . KHVOBJ = JGOBJ 
						INNER JOIN KPOBJ ON JGIPB = KACIPB AND JGALX = KACALX AND JGRSQ = KACRSQ AND JGOBJ = KACOBJ 
						INNER JOIN KCIBLE KCIBLERSQ ON KCIBLERSQ . KAHCIBLE = KABCIBLE 
						INNER JOIN KCIBLE KCIBLEOBJ ON KCIBLEOBJ . KAHCIBLE = KACCIBLE 
						LEFT JOIN YYYYPAR YPAROBJ ON YPAROBJ . TCON = 'PRODU' AND YPAROBJ . TFAM = 'JERUT' AND YPAROBJ . TCOD = JGRUT 
					WHERE SELRSQ . KHVID = P_LOTID AND SELRSQ . KHVPERI = 'RQ' 
					
				DO 
					
					 
					IF ( P_REGULMODE IN ( 'BNS' ) ) THEN 
						CALL SP_NCHRONO ( 'KILID' , V_NEWGURID ) ; 
						INSERT INTO KPRGUR 
						( KILID , KILKHWID , KILTYP , KILIPB , KILALX , 
						KILRSQ , KILDEBP , KILFINP , KILSIT , KILMHC , 
						KILFRC , KILFR0 , KILMHT , KILMTX , KILMTT , 
						KILCNH , KILCNT , KILGRM , KILPRO , KILECH , 
						KILECT , KILKEA , KILKTD , KILASV , KILPBT , 
						KILMIN , KILBRNC , KILPBA , KILPBS , KILPBR , 
						KILPBP , KILRIA , KILRIAF , KILEMH , KILEMT , 
						KILEMHF , KILEMTF , KILCOT , KILBRNT , KILSCHG , 
						KILSIDF , KILSREC , KILSPRO , KILSPRE , KILSREP , 
						KILSRIM , KILPBTR , KILEMD , KILSPC ) 
						VALUES ( 
							V_NEWGURID , P_NEWREGULEID , P_TYPE , P_CODECONTRAT , P_VERSION , 
							RSQ , 0 , 0 , '' , 0 , 
							' ' , ' ' , 0 , 0 , 0 , 
							0 , 0 , 0 , 0 , 0 , 
							0 , 0 , 0 , 0 , PBT , 
							0 , 0 , PBA , PBS , PBR , 
							PBP , 0 , 0 , 0 , 0 , 
							0 , 0 , 0 , 0 , 0 , 
							0 , 0 , 0 , 0 , 0 , 
							0 , PBT , 0 , 0 ) ; 
					END IF ; 
				END FOR ; 
			END IF ; 
			 
			IF ( NOT EXISTS ( SELECT 1 FROM KPRGUG WHERE KHXKHWID = P_NEWREGULEID FETCH FIRST 1 ROW ONLY ) ) THEN 
				/* Insertion KPRGUG */ 
				FOR FORLOOPRSQ_GUG AS FREE_LIST CURSOR FOR 
					SELECT DISTINCT SELW . KHVRSQ CODERSQ , SELW . KHVFOR CODEFOR , KPGAR . KDEID KDEID , KPGAR . KDEGARAN CODEGAR , KTRG . KIHTRG TRG, KPGAR.KDETAXCOD TAXCOD
					FROM KPGARAN KPGAR 
					INNER JOIN KGARAN KGAR ON KPGAR . KDEGARAN = KGAR . GAGAR 
					AND KPGAR . KDEIPB = P_CODECONTRAT 
					AND KPGAR . KDEALX = P_VERSION 
					AND KPGAR . KDETYP = P_TYPE 
					AND KGAR . GARGE = 'O' 
					INNER JOIN KGARTRG KTRG ON KTRG . KIHGAR = KGAR . GAGAR 
					AND KTRG . KIHTRG = 'BN' 
					INNER JOIN KPSELW SELW ON SELW . KHVIPB = KPGAR . KDEIPB 
					AND SELW . KHVALX = KPGAR . KDEALX 
					AND SELW . KHVTYP = KPGAR . KDETYP 
					AND SELW . KHVFOR = KPGAR . KDEFOR 
					AND SELW . KHVPERI = 'GA' 
					AND SELW . KHVID = P_LOTID 
				DO 
				 
					CALL SP_NCHRONO ( 'KHXID' , V_NEWGUGID ) ; 
				 
					INSERT INTO KPRGUG 
					( 
						KHXID , KHXKHWID , KHXTYP , KHXIPB , KHXALX , 
						KHXRSQ , KHXFOR , KHXKDEID , KHXGARAN , KHXDEBP , 
						KHXFINP , KHXSIT , KHXTRG , KHXNPE , KHXVEN , 
						KHXCAF , KHXCAU , KHXCAE , KHXMHC , KHXFRC , 
						KHXFR0 , KHXMHT , KHXMTX , KHXMTT , KHXCNH , 
						KHXCNT , KHXGRM , KHXPRO , KHXECH , KHXECT , 
						KHXEMH , KHXEMT , KHXDM1 , KHXDT1 , KHXDM2 , 
						KHXDT2 , KHXCOE , KHXCA1 , KHXCT1 , KHXCU1 , 
						KHXCP1 , KHXCX1 , KHXCA2 , KHXCT2 , KHXCU2 , 
						KHXCP2 , KHXCX2 , KHXAJU , KHXLMR , KHXMBA , 
						KHXTEN , KHXHON , KHXHOX , KHXBRG , KHXBRL , 
						KHXBAS , KHXBAT , KHXBAU , KHXBAM , KHXXF1 , 
						KHXXB1 , KHXXM1 , KHXXF2 , KHXXB2 , KHXXM2 , 
						KHXXF3 , KHXXB3 , KHXXM3 , KHXREG , KHXPEI , 
						KHXKEA , KHXPBP , KHXKTD , KHXASV , KHXPBT , 
						KHXSIP , KHXPBS , KHXRIS , KHXPBR , KHXRIA ) 
					VALUES ( 
						V_NEWGUGID , P_NEWREGULEID , P_TYPE , P_CODECONTRAT , P_VERSION , 
						CODERSQ , CODEFOR , KDEID , CODEGAR , P_PERIODEDEB , 
						P_PERIODEFIN , '' , TRG , ' ' , 0 , 
						0 , 0 , 0 , 0 , ' ' , 
						' ' , 0 , 0 , 0 , 0 , 
						0 , 0 , 0 , 0 , 0 , 
						0 , 0 , 0 , 0 , 0 , 
						0 , 0 , 0 , 0 , ' ' , 
						0 , TAXCOD , 0 , 0 , ' ' , 
						0 , ' ' , 0 , 0 , 0 , 
						0 , 0 , ' ' , ' ' , ' ' , 
						0 , 0 , ' ' , 0 , ' ' , 
						0 , 0 , ' ' , 0 , 0 , 
						' ' , 0 , 0 , ' ' , 0 , 
						0 , 0 , 0 , 0 , 0 , 
						0 , 0 , 0 , 0 , 0 ) ; 
				 
				END FOR ; 
			END IF ; 
			 
			/* INSERTION DANS YPOTRAC */ 
			IF ( P_DATENOW > 0 ) THEN 
				SET V_DATENOWANNEE = ABSVAL ( P_DATENOW / 10000 ) ; 
				SET V_DATENOWMOIS = ABSVAL ( ( P_DATENOW - ( V_DATENOWANNEE * 10000 ) ) / 100 ) ; 
				SET V_DATENOWJOUR = P_DATENOW - ( V_DATENOWANNEE * 10000 ) - ( V_DATENOWMOIS * 100 ) ; 
				SET V_HEURENOW = CAST ( P_HOURNOW AS DECIMAL ( 4 , 0 ) ) ; 
			END IF ; 
			 
			INSERT INTO YPOTRAC 
			( PYTYP , PYIPB , PYALX , PYAVN , PYTTR , PYVAG , PYTRA , PYTRM , PYTRJ , PYTRH , 
				PYLIB , PYINF , PYSDA , PYSDM , PYSDJ , PYSFA , PYSFM , PYSFJ , PYMJU , PYMJA , PYMJM , PYMJJ , PYMJH ) 
			VALUES 
			( P_TYPE , P_CODECONTRAT , P_VERSION , P_CODEAVN , P_REGULMODE , 'G' , V_DATENOWANNEE , V_DATENOWMOIS , V_DATENOWJOUR , V_HEURENOW , 
				'BNS - Bonif non sinistre' , 'I' , 0 , 0 , 0 , 0 , 0 , 0 , P_USER , V_DATENOWANNEE , V_DATENOWMOIS , V_DATENOWJOUR , V_HEURENOW ) ; 
  
		END IF ; 
		DELETE FROM KPSELW WHERE KHVID = P_LOTID AND KHVIPB = P_CODECONTRAT AND KHVTYP = P_TYPE AND KHVALX = P_VERSION;
	END P1  ;

