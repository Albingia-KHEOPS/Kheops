CREATE PROCEDURE SP_SVAPPLI ( 
	IN P_CODEOFFRE CHAR(9) , 
	IN P_VERSION INTEGER , 
	IN P_TYPE CHAR(1) , 
	IN P_CODEFORMULE INTEGER , 
	IN P_CODEOPTION INTEGER , 
	IN P_CIBLE INTEGER , 
	IN P_FORMGEN INTEGER , 
	IN P_OBJETRISQUE CHAR(100) , 
	IN P_USER CHAR(15) , 
	IN P_DATENOW INTEGER , 
	IN P_COUNTSELOBJ INTEGER ) 
	DYNAMIC RESULT SETS 1 
	LANGUAGE SQL 
	SPECIFIC SP_SVAPPLI 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	CLOSQLCSR = *ENDMOD , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = ZALBINKHEO , 
	DYNDFTCOL = *YES , 
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC 
  
	 
	 
	DECLARE V_GUIDOPTION INTEGER DEFAULT 0 ; 
	DECLARE V_CODERISQUE VARCHAR ( 100 ) DEFAULT '' ; 
	DECLARE V_CODESOBJET VARCHAR ( 100 ) DEFAULT '' ; 
	DECLARE V_GUIDAPP INTEGER DEFAULT 0 ; 
	 
	DECLARE V_COUNTOBJRSQ INTEGER DEFAULT 0 ; 
	 
	DECLARE V_CIBLE CHAR ( 10 ) DEFAULT '' ; 
	 
	DECLARE V_PERI CHAR ( 2 ) DEFAULT '' ; 
	DECLARE V_NBLIGNE INTEGER DEFAULT 0 ; 
  
	SET P_CODEOFFRE = F_PADLEFT ( 9 , P_CODEOFFRE ) ; 
	 
	SELECT KAICIBLE INTO V_CIBLE FROM KCIBLEF WHERE KAIID = P_CIBLE ; 
	 
	UPDATE KPFOR SET KDACIBLE = TRIM ( V_CIBLE ) , KDAKAIID = P_CIBLE 
		WHERE KDAIPB = P_CODEOFFRE AND KDAALX = P_VERSION AND KDATYP = P_TYPE AND KDAFOR = P_CODEFORMULE ; 
			 
  
	SELECT KDBID INTO V_GUIDOPTION FROM KPOPT 
		WHERE KDBIPB = P_CODEOFFRE AND KDBALX = P_VERSION AND KDBTYP = P_TYPE AND KDBFOR = P_CODEFORMULE AND KDBOPT = P_CODEOPTION ; 
	 
	IF ( V_GUIDOPTION != 0 ) THEN 
	 
		DELETE FROM KPOPTAP WHERE KDDKDBID = V_GUIDOPTION ; 
		 
		IF ( P_FORMGEN = 0 ) THEN 
			CALL SP_SPLIT ( P_OBJETRISQUE , ';' , 'L' , V_CODERISQUE ) ; 
			 
			SELECT COUNT ( * ) INTO V_COUNTOBJRSQ FROM KPOBJ WHERE KACIPB = P_CODEOFFRE AND KACALX = P_VERSION AND KACTYP = P_TYPE AND KACRSQ = TRIM ( V_CODERISQUE ) ; 
			 
			IF ( TRIM ( V_CODERISQUE ) != '' ) THEN 
				IF ( V_COUNTOBJRSQ = P_COUNTSELOBJ ) THEN 
					CALL SP_NCHRONO ( 'KDDID' , V_GUIDAPP ) ; 
					 
					INSERT INTO KPOPTAP 
					( KDDID , KDDTYP , KDDIPB , KDDALX , KDDFOR , KDDOPT , KDDKDBID , KDDPERI , KDDRSQ , KDDOBJ , KDDINVEN , KDDINVEP , KDDCRU , KDDCRD , KDDMAJU , KDDMAJD ) 
					VALUES 
					( V_GUIDAPP , P_TYPE , P_CODEOFFRE , P_VERSION , P_CODEFORMULE , P_CODEOPTION , V_GUIDOPTION , 'RQ' , TRIM ( V_CODERISQUE ) , 0 , 0 , 0 , P_USER , P_DATENOW , P_USER , P_DATENOW ) ; 
					 
				ELSE 
				 
					CALL SP_SPLIT ( P_OBJETRISQUE , ';' , 'R' , V_CODESOBJET ) ; 
					 
					P2 : BEGIN ATOMIC 
						DECLARE V_OBJ_LEFT VARCHAR ( 100 ) DEFAULT '' ; 
						DECLARE V_OBJ_RIGHT VARCHAR ( 100 ) DEFAULT '' ; 
						DECLARE V_COUNT INTEGER DEFAULT 0 ; 
						SET V_CODESOBJET = TRIM ( V_CODESOBJET ) CONCAT '_' ; 
						 
						CALL SP_SPLIT ( V_CODESOBJET , '_' , 'L' , V_OBJ_LEFT ) ; 
						CALL SP_SPLIT ( V_CODESOBJET , '_' , 'R' , V_OBJ_RIGHT ) ; 
						 
						WHILE ( TRIM ( V_OBJ_LEFT ) != '' ) DO 
							CALL SP_NCHRONO ( 'KDDID' , V_GUIDAPP ) ; 
							 
							INSERT INTO KPOPTAP 
								( KDDID , KDDTYP , KDDIPB , KDDALX , KDDFOR , KDDOPT , KDDKDBID , KDDPERI , KDDRSQ , KDDOBJ , KDDINVEN , KDDINVEP , KDDCRU , KDDCRD , KDDMAJU , KDDMAJD ) 
							VALUES 
								( V_GUIDAPP , P_TYPE , P_CODEOFFRE , P_VERSION , P_CODEFORMULE , P_CODEOPTION , V_GUIDOPTION , 'OB' , V_CODERISQUE , TRIM ( V_OBJ_LEFT ) , 0 , 0 , P_USER , P_DATENOW , P_USER , P_DATENOW ) ; 
							 
							SET V_CODESOBJET = V_OBJ_RIGHT ; 
							CALL SP_SPLIT ( V_CODESOBJET , '_' , 'L' , V_OBJ_LEFT ) ; 
							CALL SP_SPLIT ( V_CODESOBJET , '_' , 'R' , V_OBJ_RIGHT ) ; 
						 
						END WHILE ; 
					 
					END P2 ; 
				END IF ; 
				 --DELETE FROM KPCTRLE WHERE TRIM ( KEVIPB ) = TRIM ( P_CODEOFFRE ) AND KEVALX = P_VERSION AND KEVTYP = P_TYPE AND KEVFOR = P_CODEFORMULE AND KEVOPT = P_CODEOPTION ; 
			END IF ; 
		ELSE 
			CALL SP_NCHRONO ( 'KDDID' , V_GUIDAPP ) ; 
			INSERT INTO KPOPTAP 
			( KDDID , KDDTYP , KDDIPB , KDDALX , KDDFOR , KDDOPT , KDDKDBID , KDDPERI , KDDRSQ , KDDOBJ , KDDINVEN , KDDINVEP , KDDCRU , KDDCRD , KDDMAJU , KDDMAJD ) 
			VALUES 
			( V_GUIDAPP , P_TYPE , P_CODEOFFRE , P_VERSION , P_CODEFORMULE , P_CODEOPTION , V_GUIDOPTION , '**' , 0 , 0 , 0 , 0 , P_USER , P_DATENOW , P_USER , P_DATENOW ) ; 
		END IF ; 
	END IF ; 
  
	SELECT KDDPERI INTO V_PERI FROM KPOPTAP WHERE KDDIPB = P_CODEOFFRE AND KDDALX = P_VERSION AND KDDTYP = P_TYPE AND KDDFOR = P_CODEFORMULE AND KDDOPT = P_CODEOPTION FETCH FIRST 1 ROW ONLY ; 
	 
	 
	P3 : BEGIN 
		DECLARE V_VALEUR NUMERIC ( 13 , 2 ) DEFAULT 0 ; 
		DECLARE V_VALACTU NUMERIC ( 13 , 2 ) DEFAULT 0 ; 
		DECLARE V_VALTYPE CHAR ( 5 ) DEFAULT '' ; 
		DECLARE V_VALUNITE CHAR ( 1 ) DEFAULT '' ; 
		DECLARE V_ENSTYPE CHAR ( 5 ) DEFAULT '' ; 
		DECLARE V_FORMGEN CHAR ( 1 ) DEFAULT '' ; 
		 
		 -- CALCUL DE L'ASSIETTE DE L'OPTION DE FORMULE 
		SELECT KDAFGEN INTO V_FORMGEN FROM KPFOR WHERE KDAIPB = P_CODEOFFRE AND KDAALX = P_VERSION AND KDATYP = P_TYPE AND KDAFOR = P_CODEFORMULE FETCH FIRST 1 ROW ONLY ; 
		 
		IF ( V_FORMGEN = 'O' ) THEN  --FORMULE GÉNÉRALE 
			SELECT JDVAL , JDVAA , JDVAU , JDVAT INTO V_VALEUR , V_VALACTU , V_VALUNITE , V_VALTYPE FROM YPRTENT WHERE JDIPB = P_CODEOFFRE AND JDALX = P_VERSION ; 
			UPDATE KPOPT SET KDBVAL = V_VALEUR , KDBVAA = V_VALACTU , KDBVAU = V_VALUNITE , KDBVAT = V_VALTYPE WHERE KDBIPB = P_CODEOFFRE AND KDBALX = P_VERSION AND KDBTYP = P_TYPE AND KDBFOR = P_CODEFORMULE AND KDBOPT = P_CODEOPTION ; 
		ELSE  --FORMULE NORMALE 
			IF ( V_PERI = 'RQ' ) THEN  -- FORMULE S'APPLIQUE AU RISQUE 
				SELECT JEVAL , JEVAA , JEVAU , JEVAT INTO V_VALEUR , V_VALACTU , V_VALUNITE , V_VALTYPE 
					FROM YPRTRSQ 
						INNER JOIN KPOPTAP ON KDDIPB = JEIPB AND KDDALX = JEALX AND KDDTYP = P_TYPE AND KDDRSQ = JERSQ 
					WHERE JEIPB = P_CODEOFFRE AND JEALX = P_VERSION AND KDDFOR = P_CODEFORMULE AND KDDOPT = P_CODEOPTION ; 
				UPDATE KPOPT SET KDBVAL = V_VALEUR , KDBVAA = V_VALACTU , KDBVAU = V_VALUNITE , KDBVAT = V_VALTYPE 
					WHERE KDBIPB = P_CODEOFFRE AND KDBALX = P_VERSION AND KDBTYP = P_TYPE AND KDBFOR = P_CODEFORMULE AND KDBOPT = P_CODEOPTION ; 
			END IF ; 
			IF ( V_PERI = 'OB' ) THEN  -- FORMULE S'APPLIQUE AUX OBJETS 
				FOR LOOP_OBJ AS FREE_LIST CURSOR FOR 
				 
					SELECT JGVAL VALEUR , JGVAA VALACTU , JGVAU UNIT , JGVAT TYPE , KGMTYVAL ENSTYP 
						FROM YPRTOBJ 
							INNER JOIN KPOPTAP ON JGIPB = KDDIPB AND JGALX = KDDALX AND JGRSQ = KDDRSQ AND JGOBJ = KDDOBJ AND KDDFOR = P_CODEFORMULE AND KDDOPT = P_CODEOPTION AND KDDPERI = 'OB' 
							LEFT JOIN KTYPVALD ON KGMBASE = JGVAT 
						WHERE JGIPB = P_CODEOFFRE AND JGALX = P_VERSION 
				 
				DO 
					IF ( ( V_ENSTYPE = '' OR V_ENSTYPE = ENSTYP ) AND ( V_VALUNITE = '' OR V_VALUNITE = UNIT ) AND ( VALEUR > 0 ) ) THEN 
						SET V_VALEUR = V_VALEUR + VALEUR ; 
						SET V_VALACTU = V_VALACTU + VALACTU ; 
						SET V_VALUNITE = UNIT ; 
						SET V_VALTYPE = TYPE ; 
						SET V_ENSTYPE = ENSTYP ; 
					ELSE 
						SET V_VALEUR = 0 ; 
					END IF ; 
				END FOR ; 
				IF ( V_VALEUR > 0 ) THEN 
					UPDATE KPOPT SET KDBVAL = V_VALEUR , KDBVAA = V_VALACTU , KDBVAU = V_VALUNITE , KDBVAT = V_VALTYPE 
						WHERE KDBIPB = P_CODEOFFRE AND KDBALX = P_VERSION AND KDBTYP = P_TYPE AND KDBFOR = P_CODEFORMULE AND KDBOPT = P_CODEOPTION ; 
				END IF ; 
			END IF ; 
		END IF ; 
		UPDATE KPOPT SET KDBASVALO = KDBVAL , KDBASVALA = KDBVAA , KDBASUNIT = KDBVAU , KDBASBASE = KDBVAT 
			WHERE KDBIPB = P_CODEOFFRE AND KDBALX = P_VERSION AND KDBTYP = P_TYPE AND KDBFOR = P_CODEFORMULE AND KDBOPT = P_CODEOPTION ; 
	END P3 ; 
	 
	/* NETTOYAGE DU KPGARAP */ 
	 
	/* SET V_PERI = 'RQ'; */ 
	IF ( V_PERI = 'OB' ) THEN 
		DELETE FROM KPGARAP P 
			WHERE NOT EXISTS ( 
						SELECT * FROM KPOPTAP O 
						WHERE P . KDFIPB = O . KDDIPB AND P . KDFALX = O . KDDALX AND P . KDFTYP = O . KDDTYP AND P . KDFFOR = O . KDDFOR AND P . KDFOPT = O . KDDOPT AND P . KDFRSQ = O . KDDRSQ AND P . KDFOBJ = O . KDDOBJ ) 
				AND KDFIPB = P_CODEOFFRE AND KDFALX = P_VERSION AND KDFTYP = P_TYPE AND KDFFOR = P_CODEFORMULE AND KDFOPT = P_CODEOPTION ; 
  
		SELECT COUNT ( * ) INTO V_NBLIGNE 
		FROM KPOPTAP 
		WHERE KDDIPB = P_CODEOFFRE AND KDDALX = P_VERSION AND KDDTYP = P_TYPE AND KDDFOR = P_CODEFORMULE AND KDDPERI = 'OB' ; 
		 
		IF ( V_NBLIGNE = 1 ) THEN 
			DELETE FROM KPGARAP 
			WHERE KDFFOR = P_CODEFORMULE AND KDFOPT = P_CODEOPTION AND KDFGAN = 'E' ; 
		END IF ; 
				 
	END IF ; 
	 
END P1  ;



