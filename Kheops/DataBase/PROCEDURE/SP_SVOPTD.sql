
CREATE OR REPLACE PROCEDURE SP_SVOPTD (
	IN P_CODEOFFRE CHAR(9) ,
	IN P_VERSION INTEGER ,
	IN P_TYPE CHAR(1) ,
	IN P_CODEAVENANT INTEGER ,
	IN P_CODEFORMULE INTEGER ,
	IN P_CODEOPTION INTEGER ,
	IN P_LIBELLE CHAR(60) ,
	IN P_DATEAVT INTEGER ,
	IN P_USER CHAR(10) ,
	IN P_DATENOW INTEGER ,
	IN P_HEURENOW INTEGER ,
	OUT P_ERROR CHAR(5000) )
	DYNAMIC RESULT SETS 1
	LANGUAGE SQL
	SPECIFIC SP_SVOPTD
	NOT DETERMINISTIC
	MODIFIES SQL DATA
	CALLED ON NULL INPUT
	SET OPTION  ALWBLK = *ALLREAD ,
	ALWCPYDTA = *OPTIMIZE ,
	COMMIT = *CHG ,
	DBGVIEW = *SOURCE ,
	CLOSQLCSR = *ENDMOD ,
	DECRESULT = (31, 31, 00) ,
	DFTRDBCOL = ZALBINKHEO ,
	DYNDFTCOL = *YES ,
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' ,
	DYNUSRPRF = *USER ,
	SRTSEQ = *HEX
	P1 : BEGIN ATOMIC

	DECLARE V_CODEAVT INTEGER DEFAULT 0 ;
	DECLARE V_CONTROLASS INTEGER DEFAULT 0 ;
	DECLARE V_COUNT INTEGER DEFAULT 0 ;
	DECLARE V_COUNTDIFF INTEGER DEFAULT 0 ;
	DECLARE V_ERRORGAR VARCHAR ( 1000 ) DEFAULT '' ;

	DECLARE V_NEWCODE INTEGER DEFAULT 0 ;
	DECLARE V_COUNTAVT INTEGER DEFAULT 0 ;
	DECLARE V_ACTIONAVT CHAR ( 1 ) DEFAULT '' ;
	DECLARE V_YEARAVT INTEGER DEFAULT 0 ;
	DECLARE V_MONTHAVT INTEGER DEFAULT 0 ;
	DECLARE V_DAYAVT INTEGER DEFAULT 0 ;

	DECLARE V_CALCULPAR INTEGER DEFAULT 0 ;

	DECLARE V_DATEAVN INTEGER DEFAULT 0 ;

	SET P_ERROR = '##;ERRORMSG' ;

	SET P_CODEOFFRE = F_PADLEFT ( 9 , P_CODEOFFRE ) ;


	SELECT PBAVA * 10000 + PBAVM * 100 + PBAVJ INTO V_DATEAVN FROM YPOBASE WHERE PBIPB = P_CODEOFFRE AND PBALX = P_VERSION AND PBTYP = P_TYPE ;



	IF ( P_CODEAVENANT > 0 ) THEN
		SET V_COUNTAVT = 0 ;
		SELECT COUNT ( * ) INTO V_COUNTAVT FROM KPGARAN WHERE KDEIPB = P_CODEOFFRE AND KDEALX = P_VERSION AND KDETYP = P_TYPE AND KDEFOR = P_CODEFORMULE AND KDEOPT = P_CODEOPTION ;
		IF ( V_COUNTAVT = 0 ) THEN
			SET V_ACTIONAVT = 'C' ;
		ELSE
			SET V_ACTIONAVT = 'M' ;
		END IF ;

		DELETE FROM KPAVTRC WHERE KHOIPB = P_CODEOFFRE AND KHOALX = P_VERSION AND KHOTYP = P_TYPE AND KHOFOR = P_CODEFORMULE AND KHOOPT = P_CODEOPTION AND KHOPERI = 'OPT' ;
		CALL SP_NCHRONO ( 'KHOID' , V_NEWCODE ) ;
		INSERT INTO KPAVTRC
			( KHOID , KHOIPB , KHOALX , KHOTYP , KHOPERI , KHORSQ , KHOOBJ , KHOFOR , KHOOPT , KHOETAPE , KHOCHAM , KHOACT , KHOANV , KHONVV , KHOAVO , KHOOEF , KHOCRU , KHOCRD , KHOCRH )
		VALUES
			( V_NEWCODE , P_CODEOFFRE , P_VERSION , P_TYPE , 'OPT' , 0 , 0 , P_CODEFORMULE , P_CODEOPTION , '**********' , '' , V_ACTIONAVT , '' , '' , 'O' , '' , P_USER , P_DATENOW , P_HEURENOW ) ;
	END IF ;

		--IF ( LOCATE ( 'CNVA' , P_CODEOFFRE ) = 0 ) THEN
		-- RECHERCHE SI ENREGISTREMENT EXISTE DANS KPCTRLA
	SELECT COUNT ( * ) INTO V_CONTROLASS FROM KPCTRLA WHERE KGTTYP = P_TYPE AND KGTIPB = P_CODEOFFRE AND KGTALX = P_VERSION ;

		-- VÉRIFICATION DES ANCIENNES DONNÉES AVEC LES NOUVELLES
	SELECT COUNT ( * ) INTO V_COUNTDIFF
		FROM ( SELECT * FROM ( SELECT KDDIPB , KDDALX , KDDTYP , KDDRSQ , KDDOBJ
				FROM KPOPTAP
				WHERE KDDIPB = P_CODEOFFRE AND KDDALX = P_VERSION AND KDDTYP = P_TYPE AND KDDFOR = P_CODEFORMULE AND KDDOPT = P_CODEOPTION )
		AS QUERY1
	EXCEPT
	SELECT * FROM ( SELECT KDDIPB , KDDALX , KDDTYP , KDDRSQ , KDDOBJ
						FROM KPOPTAP
					WHERE KDDIPB = P_CODEOFFRE AND KDDALX = P_VERSION AND KDDTYP = P_TYPE AND KDDFOR = P_CODEFORMULE AND KDDOPT = P_CODEOPTION )
		AS QUERY2 )
	AS QUERY3 ;



	SET V_CALCULPAR = 1 ;

	DELETE FROM KPCTRLE WHERE KEVTYP = P_TYPE AND KEVIPB = P_CODEOFFRE AND KEVALX = P_VERSION AND KEVETAPE = 'COT' ;
	IF ( V_CONTROLASS = 0 ) THEN
	INSERT INTO KPCTRLA ( KGTTYP , KGTIPB , KGTALX , KGTETAPE , KGTLIB ) VALUES ( P_TYPE , P_CODEOFFRE , P_VERSION , 'OPT' , 'S''APPLIQUE À' ) ;
	END IF ;


	--UPDATE KPFOR SET KDADESC = P_LIBELLE WHERE KDATYP = P_TYPE AND KDAIPB = P_CODEOFFRE AND KDAALX = P_VERSION AND KDAFOR = P_CODEFORMULE ;

	P2 : BEGIN ATOMIC  -- TRAITEMENT DU CALCUL D'ASSIETTE STANDARD D'UNE FORMULE (KPOPT)
		DECLARE V_VALEUR NUMERIC (13, 2) DEFAULT 0 ;
		DECLARE V_VALEURACTUALISEE NUMERIC (13, 2) DEFAULT 0 ;
		DECLARE V_UNIT CHAR ( 1 ) DEFAULT '' ;
		DECLARE V_TYPE CHAR ( 5 ) DEFAULT '' ;
		DECLARE V_HT CHAR ( 1 ) DEFAULT '' ;
		DECLARE V_ENSTYPE CHAR ( 5 ) DEFAULT '' ;
		DECLARE V_CODERSQ INTEGER DEFAULT 0 ;

		DECLARE V_COUNTAPP INTEGER DEFAULT 0 ;
		DECLARE V_FORMGEN CHAR ( 1 ) DEFAULT '' ;
		DECLARE V_CALCULOK INTEGER DEFAULT 0 ;

		SELECT KDAFGEN INTO V_FORMGEN FROM KPFOR WHERE KDAIPB = P_CODEOFFRE AND KDAALX = P_VERSION AND KDATYP = P_TYPE AND KDAFOR = P_CODEFORMULE ;

		IF ( V_FORMGEN = 'O' ) THEN
			SELECT JDVAL , JDVAA , JDVAU , JDVAT INTO V_VALEUR , V_VALEURACTUALISEE , V_UNIT , V_TYPE FROM YPRTENT WHERE JDIPB = P_CODEOFFRE AND JDALX = P_VERSION ;

			UPDATE KPOPT SET KDBVAL = V_VALEUR , KDBVAA = V_VALEURACTUALISEE , KDBVAU = V_UNIT , KDBVAT = V_TYPE ,
				KDBASVALO = V_VALEUR , KDBASVALA = V_VALEURACTUALISEE , KDBASUNIT = V_UNIT , KDBASBASE = V_TYPE
			WHERE KDBIPB = P_CODEOFFRE AND KDBALX = P_VERSION AND KDBTYP = P_TYPE AND KDBFOR = P_CODEFORMULE AND KDBOPT = P_CODEOPTION ;
		ELSE
			SET V_VALEUR = 0 ;
				--COMPTE LE NOMBRE D'ENREGISTREMENT RQ
			SELECT COUNT ( * ) INTO V_COUNTAPP FROM KPOPTAP WHERE KDDIPB = P_CODEOFFRE AND KDDALX = P_VERSION AND KDDTYP = P_TYPE AND KDDFOR = P_CODEFORMULE AND KDDOPT = P_CODEOPTION AND KDDPERI = 'RQ' ;

			SELECT KDDRSQ INTO V_CODERSQ FROM KPOPTAP WHERE KDDIPB = P_CODEOFFRE AND KDDALX = P_VERSION AND KDDTYP = P_TYPE AND KDDFOR = P_CODEFORMULE AND KDDOPT = P_CODEOPTION FETCH FIRST 1 ROWS ONLY ;
			IF ( V_COUNTAPP > 0 ) THEN
				SELECT JEVAL , JEVAA , JEVAU , JEVAT INTO V_VALEUR , V_VALEURACTUALISEE , V_UNIT , V_TYPE FROM YPRTRSQ WHERE JEIPB = P_CODEOFFRE AND JEALX = P_VERSION AND JERSQ = V_CODERSQ ;
			END IF ;

				--COMPTE LE NOMBRE D'ENREGISTREMENT OB
			SELECT COUNT ( * ) INTO V_COUNTAPP FROM KPOPTAP WHERE KDDIPB = P_CODEOFFRE AND KDDALX = P_VERSION AND KDDTYP = P_TYPE AND KDDFOR = P_CODEFORMULE AND KDDOPT = P_CODEOPTION AND KDDPERI = 'OB' ;
			SET V_CALCULOK = 1 ;
			IF ( V_COUNTAPP > 0 ) THEN

				IF ( P_CODEAVENANT > 0 ) THEN
					FOR LOOP_OBJ1 AS FREE_LIST CURSOR FOR
						SELECT JGVAL VALEUR , JGVAA VALEURACTUALISEE , JGVAU UNIT , JGVAT TYPE , JGVAH HT , IFNULL ( KGMTYVAL , '' ) ENSTYP
							FROM YPRTOBJ
								INNER JOIN YPOBASE ON PBIPB = JGIPB AND PBALX = JGALX AND PBTYP = P_TYPE
								INNER JOIN KPOPTAP ON JGIPB = KDDIPB AND JGALX = KDDALX AND JGRSQ = KDDRSQ AND JGOBJ = KDDOBJ AND KDDFOR = P_CODEFORMULE AND KDDOPT = P_CODEOPTION AND KDDPERI = 'OB'
								LEFT JOIN KTYPVALD ON KGMBASE = JGVAT
							WHERE JGIPB = P_CODEOFFRE AND JGALX = P_VERSION AND JGRSQ = V_CODERSQ
								AND ( ( JGVFA * 10000 + JGVFM * 100 + JGVFJ >= PBAVA * 10000 + PBAVM * 100 + PBAVJ ) OR ( JGVFA * 10000 + JGVFM * 100 + JGVFJ = 0 ) )
					DO
						IF ( ( V_ENSTYPE = '' OR V_ENSTYPE = ENSTYP ) AND ( V_UNIT = '' OR V_UNIT = UNIT ) AND ( V_HT = '' OR V_HT = HT ) AND ( V_CALCULOK > 0 ) ) THEN
							SET V_VALEUR = V_VALEUR + VALEUR ;
							SET V_VALEURACTUALISEE = V_VALEURACTUALISEE + VALEURACTUALISEE ;
							SET V_UNIT = UNIT ;
							SET V_TYPE = TYPE ;
							SET V_HT = HT ;
							SET V_ENSTYPE = ENSTYP ;
						ELSE
							SET V_CALCULOK = 0 ;
							SET V_VALEUR = 0 ;
							SET V_VALEURACTUALISEE = 0 ;
							SET V_UNIT = '' ;
							SET V_TYPE = '' ;
							SET V_HT = '' ;
							SET V_ENSTYPE = '' ;
						END IF ;
					END FOR ;
				ELSE
					FOR LOOP_OBJ2 AS FREE_LIST CURSOR FOR
						SELECT JGVAL VALEUR , JGVAA VALEURACTUALISEE , JGVAU UNIT , JGVAT TYPE , JGVAH HT , IFNULL ( KGMTYVAL , '' ) ENSTYP
							FROM YPRTOBJ
								INNER JOIN KPOPTAP ON JGIPB = KDDIPB AND JGALX = KDDALX AND JGRSQ = KDDRSQ AND JGOBJ = KDDOBJ AND KDDFOR = P_CODEFORMULE AND KDDOPT = P_CODEOPTION AND KDDPERI = 'OB'
								LEFT JOIN KTYPVALD ON KGMBASE = JGVAT
							WHERE JGIPB = P_CODEOFFRE AND JGALX = P_VERSION AND JGRSQ = V_CODERSQ
					DO
						IF ( ( V_ENSTYPE = '' OR V_ENSTYPE = ENSTYP ) AND ( V_UNIT = '' OR V_UNIT = UNIT ) AND ( V_HT = '' OR V_HT = HT ) AND ( V_CALCULOK > 0 ) ) THEN
							SET V_VALEUR = V_VALEUR + VALEUR ;
							SET V_VALEURACTUALISEE = V_VALEURACTUALISEE + VALEURACTUALISEE ;
							SET V_UNIT = UNIT ;
							SET V_TYPE = TYPE ;
							SET V_HT = HT ;
							SET V_ENSTYPE = ENSTYP ;
						ELSE
							SET V_CALCULOK = 0 ;
							SET V_VALEUR = 0 ;
							SET V_VALEURACTUALISEE = 0 ;
							SET V_UNIT = '' ;
							SET V_TYPE = '' ;
							SET V_HT = '' ;
							SET V_ENSTYPE = '' ;
						END IF ;
					END FOR ;
				END IF ;
			END IF ;


			IF ( V_CALCULPAR > 0 ) THEN

				UPDATE KPOPT SET KDBASVALO = V_VALEUR , KDBASVALA = V_VALEURACTUALISEE , KDBASVALW = 0 , KDBASUNIT = V_UNIT , KDBASBASE = V_TYPE ,
						KDBVAL = V_VALEUR , KDBVAA = V_VALEURACTUALISEE , KDBVAU = V_UNIT , KDBVAT = V_TYPE
					WHERE KDBIPB = P_CODEOFFRE AND KDBALX = P_VERSION AND KDBTYP = P_TYPE AND KDBFOR = P_CODEFORMULE AND KDBOPT = P_CODEOPTION ;

				P3 : BEGIN ATOMIC  -- TRAITEMENT DU CALCUL D'ASSIETTE DE GARANTIE SANS INVENTAIRE (KPGARAN)
					DECLARE V_NATAPP CHAR ( 1 ) DEFAULT '' ;
					DECLARE V_COUNTGAR INTEGER DEFAULT 0 ;
					DECLARE V_COUNTENS INTEGER DEFAULT 0 ;

					FOR LOOP_GARAN AS FREE_LIST CURSOR FOR
						SELECT KDEID IDGAR , KGKTYVAL ENSGAR , KDEGARAN GARANTIE , KDEASBASE ASSBASE
							FROM KPGARAN
								INNER JOIN KGARTVL ON KGKGAR = KDEGARAN
							WHERE KDEIPB = P_CODEOFFRE AND KDEALX = P_VERSION AND KDETYP = P_TYPE AND KDEFOR = P_CODEFORMULE AND KDEOPT = P_CODEOPTION
								AND ( KDEALA = 'A' OR KDEALA = 'B' )  --AND KDEINVSP <> 'O'
					DO
						SET V_NATAPP = '' ;
						SET V_COUNTGAR = 0 ;
						SET V_COUNTENS = 0 ;
						SET V_VALEUR = 0 ;
						SET V_UNIT = '' ;
						SET V_TYPE = '' ;
						SET V_HT = '' ;
						SET V_ENSTYPE = '' ;

							-- RÉCUPÉRATION DE LA NATURE DU S'APPLIQUE À POUR LA GARANTIE
						SELECT DISTINCT KDFGAN INTO V_NATAPP FROM KPGARAP WHERE KDFKDEID = IDGAR ;
						SET V_CALCULOK = 1 ;

							-- V_NATAPP => A = ACCORDÉE ; E = EXCLUE ; '' = AUCUNE APPLICATION
						CASE V_NATAPP
							WHEN 'A' THEN  -- LORSQUE LA GARANTIE EST ACCORDÉE DANS LA TABLE KPGARAP
								SET V_VALEUR = 0 ;
									-- RÉCUPÉRATION DU RISQUE SUR LEQUEL LA GARANTIE S'APPLIQUE
								SELECT KDDRSQ INTO V_CODERSQ
									FROM KPOPTAP
									WHERE KDDIPB = P_CODEOFFRE AND KDDALX = P_VERSION AND KDDTYP = P_TYPE AND KDDFOR = P_CODEFORMULE AND KDDOPT = P_CODEOPTION
								FETCH FIRST 1 ROWS ONLY ;

									-- RÉCUPÉRATION DE TOUS LES OBJETS ET ADDITION DE LEUR VALEUR QUI SONT PRÉSENTS DANS KPGARAP
								FOR LOOP_OBET AS FREE_LIST CURSOR FOR
									SELECT JGVAL VALEUR , JGVAU UNIT , JGVAT TYPE , JGVAH HT , IFNULL ( KGMTYVAL , '' ) ENSTYP
										FROM YPRTOBJ
											INNER JOIN KPGARAP ON KDFIPB = JGIPB AND KDFALX = JGALX AND KDFTYP = P_TYPE AND KDFFOR = P_CODEFORMULE AND KDFOPT = P_CODEOPTION AND KDFGARAN = GARANTIE AND KDFRSQ = JGRSQ AND KDFOBJ = JGOBJ
											LEFT JOIN KTYPVALD ON KGMBASE = JGVAT AND KGMTYVAL = ENSGAR
										WHERE JGIPB = P_CODEOFFRE AND JGALX = P_VERSION AND JGRSQ = V_CODERSQ
											AND ( ( --( ( JGVDA * 10000 + JGVDM * 100 + JGVDJ ) >= V_DATEAVN OR ( JGVDA * 10000 + JGVDM * 100 + JGVDJ ) = 0 ) AND
												 ( ( JGVFA * 10000 + JGVFM * 100 + JGVFJ ) >= V_DATEAVN OR ( JGVFA * 10000 + JGVFM * 100 + JGVFJ ) = 0 ) )
											OR ( V_DATEAVN = 0 ) )
								DO
									IF ( ( V_ENSTYPE = '' OR V_ENSTYPE = ENSTYP ) AND ( V_UNIT = '' OR V_UNIT = UNIT ) AND ( V_HT = '' OR V_HT = HT ) AND ( V_CALCULOK > 0 ) ) THEN
										SET V_VALEUR = V_VALEUR + VALEUR ;
										SET V_UNIT = UNIT ;
										SET V_TYPE = TYPE ;
										SET V_HT = HT ;
										SET V_ENSTYPE = ENSTYP ;
									ELSE
										SET V_CALCULOK = 0 ;
										SET V_VALEUR = 0 ;
										SET V_VALEURACTUALISEE = 0 ;
										SET V_UNIT = '' ;
										SET V_TYPE = '' ;
										SET V_HT = '' ;
										SET V_ENSTYPE = '' ;
									END IF ;
								END FOR ;

								SELECT COUNT ( * ) INTO V_COUNTENS FROM KGARTVL WHERE KGKGAR = GARANTIE AND KGKTYVAL = V_ENSTYPE ;

								IF ( V_CALCULPAR > 0 AND V_COUNTENS > 0 ) THEN
									IF ( V_TYPE <> '' ) THEN
										SET ASSBASE = V_TYPE ;
									END IF ;
									UPDATE KPGARAN
										SET KDEASVALO = V_VALEUR , KDEASVALA = V_VALEUR , KDEASVALW = 0 , KDEASUNIT = V_UNIT , KDEASBASE = ASSBASE
										WHERE KDEID = IDGAR ;
								END IF ;

							WHEN 'E' THEN  -- LORSQUE LA GARANTIE EST EXCLUE DANS LA TABLE KPGARAP
								SET V_VALEUR = 0 ;
									-- RÉCUPÉRATION DU RISQUE SUR LEQUEL LA GARANTIE S'APPLIQUE
								SELECT KDDRSQ INTO V_CODERSQ
									FROM KPOPTAP
									WHERE KDDIPB = P_CODEOFFRE AND KDDALX = P_VERSION AND KDDTYP = P_TYPE AND KDDFOR = P_CODEFORMULE AND KDDOPT = P_CODEOPTION
								FETCH FIRST 1 ROWS ONLY ;

									-- RÉCUPÉRATION DE TOUS LES OBJETS ET ADDITION DE LEUR VALEUR QUI NE SONT PAS PRÉSENTS DANS KPGARAP
								FOR LOOP_OBJET AS FREE_LIST CURSOR FOR
									SELECT JGVAL VALEUR , JGVAU UNIT , JGVAT TYPE , JGVAH HT , IFNULL ( KGMTYVAL , '' ) ENSTYP
										FROM YPRTOBJ
											INNER JOIN KPGARAP ON KDFIPB = JGIPB AND KDFALX = JGALX AND KDFTYP = P_TYPE AND KDFFOR = P_CODEFORMULE AND KDFOPT = P_CODEOPTION AND KDFGARAN = GARANTIE AND KDFRSQ = JGRSQ AND KDFOBJ <> JGOBJ
											LEFT JOIN KTYPVALD ON KGMBASE = JGVAT AND KGMTYVAL = ENSGAR
										WHERE JGIPB = P_CODEOFFRE AND JGALX = P_VERSION AND JGRSQ = V_CODERSQ
											AND ( ( --( ( JGVDA * 10000 + JGVDM * 100 + JGVDJ ) >= V_DATEAVN OR ( JGVDA * 10000 + JGVDM * 100 + JGVDJ ) = 0 ) AND
												 ( ( JGVFA * 10000 + JGVFM * 100 + JGVFJ ) >= V_DATEAVN OR ( JGVFA * 10000 + JGVFM * 100 + JGVFJ ) = 0 ) )
											OR ( V_DATEAVN = 0 ) )
								DO
									IF ( ( V_ENSTYPE = '' OR V_ENSTYPE = ENSTYP ) AND ( V_UNIT = '' OR V_UNIT = UNIT ) AND ( V_HT = '' OR V_HT = HT ) AND ( V_CALCULOK > 0 ) ) THEN
										SET V_VALEUR = V_VALEUR + VALEUR ;
										SET V_UNIT = UNIT ;
										SET V_TYPE = TYPE ;
										SET V_HT = HT ;
										SET V_ENSTYPE = ENSTYP ;
									ELSE
										SET V_CALCULOK = 0 ;
										SET V_VALEUR = 0 ;
										SET V_VALEURACTUALISEE = 0 ;
										SET V_UNIT = '' ;
										SET V_TYPE = '' ;
										SET V_HT = '' ;
										SET V_ENSTYPE = '' ;
									END IF ;
								END FOR ;

								SELECT COUNT ( * ) INTO V_COUNTENS FROM KGARTVL WHERE KGKGAR = GARANTIE AND KGKTYVAL = V_ENSTYPE ;

								IF ( V_CALCULPAR > 0 AND V_COUNTENS > 0 ) THEN
									IF ( V_TYPE <> '' ) THEN
										SET ASSBASE = V_TYPE ;
									END IF ;
									UPDATE KPGARAN
										SET KDEASVALO = V_VALEUR , KDEASVALA = V_VALEUR , KDEASVALW = 0 , KDEASUNIT = V_UNIT , KDEASBASE = ASSBASE
									WHERE KDEID = IDGAR ;
								END IF ;

							ELSE  -- LORSQUE QU'IL N'Y A AUCUNE APPLICATION DANS LA TABLE KPGARAP

								SELECT KDBASVALO , KDBASUNIT , KDBASBASE INTO V_VALEUR , V_UNIT , V_TYPE
									FROM KPOPT
								WHERE KDBIPB = P_CODEOFFRE AND KDBALX = P_VERSION AND KDBTYP = P_TYPE AND KDBFOR = P_CODEFORMULE AND KDBOPT = P_CODEOPTION ;

									-- VÉRIFIE QUE LE TYPE D'ENSEMBLE EST PRÉSENT DANS LE RÉFÉRENTIEL
								SELECT COUNT ( * ) INTO V_COUNTGAR FROM KTYPVALD WHERE KGMTYVAL = ENSGAR AND KGMBASE = V_TYPE ;
								IF ( V_COUNTGAR > 0 ) THEN
									/* IF ( ASSBASE = '' ) THEN
										SET ASSBASE = V_TYPE ;
									END IF ; */
									IF ( V_TYPE <> '' ) THEN
										SET ASSBASE = V_TYPE ;
									END IF ;
										-- MISE À JOUR DE L'ASSIETTE AVEC LES VALEURS DE L'OPTION
									UPDATE KPGARAN
										SET KDEASVALO = V_VALEUR , KDEASVALA = V_VALEUR , KDEASVALW = 0 , KDEASUNIT = V_UNIT , KDEASBASE = ASSBASE
										WHERE KDEID = IDGAR ;
								END IF ;
									-- SI LE TYPE EST VIDE
								IF ( V_TYPE = '' ) THEN
									UPDATE KPGARAN
										SET KDEASVALO = V_VALEUR , KDEASVALA = V_VALEUR , KDEASVALW = 0 , KDEASUNIT = V_UNIT , KDEASBASE = ASSBASE
										WHERE KDEID = IDGAR ;
								END IF ;
						END CASE ;

					END FOR ;
				END P3 ;

			END IF ;
		END IF ;
	END P2 ;

	FOR LOOP_FORMASS AS FREE_LIST CURSOR FOR
		SELECT KDEID GARANTIEID
			FROM KPGARAN
				INNER JOIN KPOPTD OPTB ON OPTB . KDCID = KDEKDCID AND OPTB . KDCFLAG = 1 AND OPTB . KDCTENG = 'B'
				INNER JOIN KPOPTD OPTV ON OPTV . KDCKDBID = OPTB . KDCKDBID AND OPTV . KDCFLAG = 1 AND OPTV . KDCTENG = 'V' AND OPTV . KDCKAKID = OPTB . KDCKAKID
			WHERE KDEIPB = P_CODEOFFRE AND KDEALX = P_VERSION AND KDETYP = P_TYPE AND KDEFOR = P_CODEFORMULE AND KDEOPT = P_CODEOPTION AND KDEGAN <> '' AND KDEGAN <> 'E'
	DO

		CALL SP_CALCULASSIETTEGARANTIE ( GARANTIEID , V_ERRORGAR ) ;

		IF ( TRIM ( V_ERRORGAR ) != '' ) THEN
			SET P_ERROR = TRIM ( P_ERROR ) CONCAT TRIM ( V_ERRORGAR ) ;
		END IF ;
	END FOR ;
	SET P_ERROR = TRIM ( P_ERROR ) CONCAT ';##' ;

	IF ( TRIM ( P_ERROR ) = '##;ERRORMSG;##' ) THEN

		 --CALL SP_SVVOLET ( P_CODEOFFRE , P_VERSION , P_TYPE , P_CODEFORMULE , P_CODEOPTION , 'V' , P_CODEAVENANT ) ;
		--DELETE FROM KPGARAH WHERE KDETYP = P_TYPE AND KDEIPB = P_CODEOFFRE AND KDEALX = P_VERSION AND KDEFOR = P_CODEFORMULE AND KDEOPT = P_CODEOPTION ;

		--FOR LOOP_GAR AS FREE_LIST CURSOR FOR
		--	SELECT KDEID GUIDID , KDETYP TYP , KDEIPB CODEOFFRE , KDEALX VERS , KDEFOR CODEFORMULE , KDEOPT CODEOPTION , KDEKDCID GUIDOPTION , KDEGARAN GARANTIE ,
		--			KDESEQ SEQUENCEUNIQUE , KDENIVEAU NIVEAU , KDESEM SEQUENCEMAITRE , KDESE1 SEQUENCENIV1 , KDETRI TRI , KDENUMPRES NUMPRESENTATION , KDEAJOUT GARANTIEAJOUTEE ,
		--			KDECAR CARACTEREGARANTIE , KDENAT NATUREPARAMETRE , KDEGAN NATURE , KDEKDFID LIENAPPLICATION , KDEDEFG DEFGARANTIE , KDEKDHID LIENINFOSSPEC , KDEDUREE DUREEVALEUR ,
		--			KDEDURUNI DUREEUNITE , KDEPRP TYPEAPPLICATION , KDETYPEMI TYPEEMISSION , KDEALIREF MONTANTREFERENCE ,
		--			KDECATNAT CATNAT , KDEINA INDEXEE , KDETAXCOD CODETAXE , KDETAXREP REPARTITIONTAXE , KDECRAVN AVENANTCREATION , KDECRU CREATEUSER , KDECRD CREATEDATE ,
		--			KDEMAJAVN AVENANTMODIFICATION , KDEASVALO ASSIETTEVALEURORIG , KDEASVALA ASSIETTEVALEURACTU , KDEASVALW ASSIETTEVALEURTRAVAIL , KDEASUNIT ASSIETTEUNITE ,
		--			KDEASBASE ASSIETTEBASE , KDEASMOD ASSIETTEMODIFIABLE , KDEASOBLI ASSIETTEOBLIGATOIRE , KDEINVSP INVENTAIRESPECIFIQUE , KDEINVEN INVENTAIRE ,
		--			KDEDATDEB DEBUTGARANTIE , KDEHEUDEB HEUREDEB , KDEDATFIN FINGARANTIE , KDEHEUFIN HEUREFIN , KDEWDDEB DATESTDDEB , KDEWHDEB HEURESTDDEB , KDEWDFIN DATESTDFIN , KDEWHFIN HEURESTDFIN , KDETCD TYPECONTROLEDATE ,
		--			KDEMODI FLAGMODIF , KDEPIND INDEXEDEF , KDEPCATN CATNATDEF , KDEPREF MONTANTREFDEF , KDEPPRP APPLICATIONDEF , KDEPEMI TYPEEMIDEF , KDEPTAXC CODETAXEDEF , KDEPNTM PARAMNATMOD , KDEALA MODEALIM ,
		--			KDEPALA PARAMTYPALIM , KDEALO ALIMORIG
		--		FROM KPGARAN
		--		WHERE KDETYP = P_TYPE AND KDEIPB = P_CODEOFFRE AND KDEALX = P_VERSION AND KDEFOR = P_CODEFORMULE AND KDEOPT = P_CODEOPTION
		--DO
		--		INSERT INTO KPGARAH
		--			( KDEID , KDETYP , KDEIPB , KDEALX , KDEFOR , KDEOPT , KDEKDCID , KDEGARAN , KDESEQ , KDENIVEAU , KDESEM , KDESE1 , KDETRI ,
		--				KDENUMPRES , KDEAJOUT , KDECAR , KDENAT , KDEGAN , KDEKDFID , KDEDEFG , KDEKDHID , KDEDUREE , KDEDURUNI ,
		--				KDEPRP , KDETYPEMI , KDEALIREF , KDECATNAT , KDEINA , KDETAXCOD , KDETAXREP , KDECRAVN , KDECRU , KDECRD ,
		--				KDEMAJAVN , KDEASVALO , KDEASVALA , KDEASVALW , KDEASUNIT , KDEASBASE , KDEASMOD ,
		--				KDEASOBLI , KDEINVSP , KDEINVEN , KDEDATDEB , KDEHEUDEB , KDEDATFIN , KDEHEUFIN , KDEWDDEB , KDEWHDEB , KDEWDFIN , KDEWHFIN , KDETCD ,
		--				KDEMODI , KDEPIND , KDEPCATN , KDEPREF , KDEPPRP , KDEPEMI , KDEPTAXC , KDEPNTM , KDEALA , KDEPALA , KDEALO )
		--		VALUES
		--			( GUIDID , TYP , CODEOFFRE , VERS , CODEFORMULE , CODEOPTION , GUIDOPTION , GARANTIE , SEQUENCEUNIQUE , NIVEAU , SEQUENCEMAITRE , SEQUENCENIV1 , TRI ,
		--				NUMPRESENTATION , GARANTIEAJOUTEE , CARACTEREGARANTIE , NATUREPARAMETRE , NATURE , LIENAPPLICATION , DEFGARANTIE , LIENINFOSSPEC , DUREEVALEUR , DUREEUNITE ,
		--				TYPEAPPLICATION , TYPEEMISSION , MONTANTREFERENCE , CATNAT , INDEXEE , CODETAXE , REPARTITIONTAXE , AVENANTCREATION , CREATEUSER , CREATEDATE ,
		--				AVENANTMODIFICATION , ASSIETTEVALEURORIG , ASSIETTEVALEURACTU , ASSIETTEVALEURTRAVAIL , ASSIETTEUNITE , ASSIETTEBASE , ASSIETTEMODIFIABLE ,
		--				ASSIETTEOBLIGATOIRE , INVENTAIRESPECIFIQUE , INVENTAIRE , DEBUTGARANTIE , HEUREDEB , FINGARANTIE , HEUREFIN , DATESTDDEB , HEURESTDDEB , DATESTDFIN , HEURESTDFIN , TYPECONTROLEDATE ,
		--				FLAGMODIF , INDEXEDEF , CATNATDEF , MONTANTREFDEF , APPLICATIONDEF , TYPEEMIDEF , CODETAXEDEF , PARAMNATMOD , MODEALIM , PARAMTYPALIM , ALIMORIG ) ;
		--END FOR ;

		 --SUPPRESSION DES EXCLUSIONS/ACCORDS DES FORMULES NON SÉLECTIONNÉES--
		DELETE FROM KPGARAP WHERE KDFIPB = P_CODEOFFRE AND KDFALX = P_VERSION AND KDFTYP = P_TYPE AND KDFFOR = P_CODEFORMULE AND KDFOPT = P_CODEOPTION
			AND KDFKDEID NOT IN
			( SELECT KDEID FROM KPGARAN WHERE KDEIPB = P_CODEOFFRE AND KDEALX = P_VERSION AND KDETYP = P_TYPE AND KDEFOR = P_CODEFORMULE AND KDEOPT = P_CODEOPTION ) ;

		IF ( P_CODEAVENANT > 0 ) THEN
			IF ( P_DATEAVT > 0 ) THEN
				SET V_YEARAVT = ABSVAL ( P_DATEAVT / 10000 ) ;
				SET V_MONTHAVT = ABSVAL ( ( P_DATEAVT - ( V_YEARAVT * 10000 ) ) / 100 ) ;
				SET V_DAYAVT = P_DATEAVT - ( V_YEARAVT * 10000 ) - ( V_MONTHAVT * 100 ) ;
			END IF ;

			UPDATE KPOPT
				SET KDBAVJ = V_DAYAVT , KDBAVM = V_MONTHAVT , KDBAVA = V_YEARAVT , KDBAVG = P_CODEAVENANT
			WHERE KDBIPB = P_CODEOFFRE AND KDBALX = P_VERSION AND KDBTYP = P_TYPE AND KDBFOR = P_CODEFORMULE AND KDBOPT = P_CODEOPTION ;
		END IF ;

		/* SUPPRESSION DES ENREGISTREMENTS DANS KPGARAP ORPHELINS */
		DELETE FROM KPGARAP WHERE KDFKDEID NOT IN (
			SELECT KDEID FROM KPGARAN WHERE KDEIPB = P_CODEOFFRE AND KDEALX = P_VERSION AND KDETYP = P_TYPE AND KDEFOR = P_CODEFORMULE AND KDEOPT = P_CODEOPTION )
			AND KDFIPB = P_CODEOFFRE AND KDFALX = P_VERSION AND KDFTYP = P_TYPE AND KDFFOR = P_CODEFORMULE AND KDFOPT = P_CODEOPTION ;
		/* SUPPRESSION DES INVENTAIRES DE GARANTIES ORPHELINS */
		FOR LOOP_INVEN AS FREE_LIST CURSOR FOR
			SELECT KBEID INVENID, KBEIPB FROM KPINVEN
       			INNER JOIN KPINVAPP ON KBGPERI = 'GA' AND KBGKBEID = KBEID
			WHERE KBGIPB = P_CODEOFFRE AND KBGALX = P_VERSION AND KBGTYP = P_TYPE AND KBGFOR = P_CODEFORMULE
              AND KBEID NOT IN ( SELECT KDEINVEN FROM KPGARAN
              		WHERE KDEIPB = P_CODEOFFRE AND KDEALX = P_VERSION AND KDETYP = P_TYPE AND KDEFOR = P_CODEFORMULE AND KDEOPT = P_CODEOPTION )

			-- SELECT KBEID INVENID FROM KPINVEN
			-- 	INNER JOIN KPINVAPP ON KBGPERI = 'GA' AND KBGIPB = P_CODEOFFRE AND KBGALX = P_VERSION AND KBGTYP = P_TYPE AND KBGFOR = P_CODEFORMULE
			-- WHERE KBEID NOT IN ( SELECT KDEINVEN FROM KPGARAN WHERE KDEIPB = P_CODEOFFRE AND KDEALX = P_VERSION AND KDETYP = P_TYPE AND KDEFOR = P_CODEFORMULE AND KDEOPT = P_CODEOPTION )
		DO
			DELETE FROM KPINVEN WHERE KBEID = INVENID ;
			DELETE FROM KPINVED WHERE KBFKBEID = INVENID ;
			DELETE FROM KPINVAPP WHERE KBGKBEID = INVENID ;
		END FOR ;


		/* AJOUT LE 16-06-2015 POUR SAUVEGARDER LES GARANTIES DÉSÉLECTIONNÉES DANS L'AVENANT  */
		IF ( P_CODEAVENANT > 0 ) THEN
			FOR LOOP_VOLETAVN AS FREE_LIST CURSOR FOR
				SELECT KDCKDBID CODEOPT , KDCKAKID CODEVOLET FROM KPOPTD
					WHERE KDCTYP = P_TYPE AND KDCIPB = P_CODEOFFRE AND KDCALX = P_VERSION
						AND KDCFOR = P_CODEFORMULE AND KDCOPT = P_CODEOPTION AND KDCFLAG = 0 AND KDCTENG = 'V'
			DO

				FOR LOOP_BLOCAVN AS FREE_LIST CURSOR FOR
					SELECT KDCID OPTDID FROM KPOPTD
						WHERE KDCTYP = P_TYPE AND KDCIPB = P_CODEOFFRE AND KDCALX = P_VERSION
							AND KDCFOR = P_CODEFORMULE AND KDCOPT = P_CODEOPTION AND KDCTENG = 'B' AND KDCKDBID = CODEOPT AND KDCKAKID = CODEVOLET
				DO
					FOR LOOP_GARAVN AS FREE_LIST CURSOR FOR
						SELECT KDEID GARID , KDEGARAN CODEGARANTIE , KDESEQ SEQ , KDENIVEAU NIVEAU , KDESEM MASTER , KDESE1 NIV1 ,
							KDEDEFG GARDEFG , KDEDATDEB GARDATEDEB , KDEHEUDEB DARHEUDEB , KDEDATFIN GARDATFIN , KDEHEUFIN GARHEUFIN , KDEDUREE GARDUREE ,
							KDEDURUNI GARDURUNI , KDEPRP GARPRP , KDETYPEMI GARTYPEMI , KDEALIREF GARALIREF , KDECATNAT GARCATNAT , KDEINA GARINA ,
							KDETAXCOD GARTAXCOD , KDETCD GARTCD , KDEALA GARALA , KDEPALA GARPALA , KDEALO GARALO
						FROM KPGARAN
						WHERE KDEKDCID = OPTDID
					DO
						SET V_COUNT = 0 ;
						SELECT COUNT ( * ) INTO V_COUNT
							FROM HPGARAN
							WHERE KDEIPB = P_CODEOFFRE AND KDEALX = P_VERSION AND KDETYP = P_TYPE
								AND KDEFOR = P_CODEFORMULE AND KDEOPT = P_CODEOPTION AND KDEAVN = ( P_CODEAVENANT - 1 )
								AND KDEGARAN = CODEGARANTIE AND KDESEQ = SEQ AND KDENIVEAU = NIVEAU AND KDESEM = MASTER AND KDESE1 = NIV1 ;

						IF ( V_COUNT > 0 ) THEN
							 --INSERT INTO KPGARAN
							 --	( SELECT * FROM KPGARAW WHERE KDEID = GARID ) ;
							UPDATE KPGARAH
								SET KDEDEFG = GARDEFG , KDEDATDEB = GARDATEDEB , KDEHEUDEB = DARHEUDEB , KDEDATFIN = GARDATFIN , KDEHEUFIN = GARHEUFIN ,
									KDEDUREE = GARDUREE , KDEDURUNI = GARDURUNI , KDEPRP = GARPRP , KDETYPEMI = GARTYPEMI , KDEALIREF = GARALIREF ,
									KDECATNAT = GARCATNAT , KDEINA = GARINA , KDETAXCOD = GARTAXCOD , KDETCD = GARTCD , KDEALA = GARALA ,
									KDEPALA = GARPALA , KDEALO = GARALO
							WHERE KDEIPB = P_CODEOFFRE AND KDEALX = P_VERSION AND KDETYP = P_TYPE AND KDEFOR = P_CODEFORMULE AND KDEOPT = P_CODEOPTION
								AND KDEGARAN = CODEGARANTIE AND KDESEQ = SEQ AND KDENIVEAU = NIVEAU AND KDESEM = MASTER AND KDESE1 = NIV1 ;
						END IF ;
					END FOR ;
				END FOR ;
			END FOR ;
		END IF ;

		/* APPEL DE LA PROCÉDURE DE RECALCUL DES PRIMES */
		CALL SP_CALCULPRIMEGARANTIE ( P_CODEOFFRE , P_VERSION , P_TYPE ) ;

		/* SUPPRESSION DE LA TRACE DES COTISATIONS DE L'ARBRE */
		DELETE FROM KPCTRLE WHERE KEVTYP = P_TYPE AND KEVIPB = P_CODEOFFRE AND KEVALX = P_VERSION AND KEVETAPE = 'COT' ;

	END IF ;

	FOR LOOP_GARAN AS FREE_LIST CURSOR FOR
	SELECT KDEID CODEGARAN
						FROM KPGARAN
						WHERE KDEIPB = P_CODEOFFRE AND KDEALX = P_VERSION AND KDETYP = P_TYPE AND KDEFOR = P_CODEFORMULE AND KDEOPT = P_CODEOPTION
					DO
					CALL SP_SETDATES ( P_CODEOFFRE , P_VERSION , P_TYPE , P_CODEAVENANT , 0 , 0 , P_CODEFORMULE , P_CODEOPTION , CODEGARAN , 'GAR' ) ;

	END FOR ;

	DELETE FROM KPGARAW WHERE KDEIPB = P_CODEOFFRE AND KDEALX = P_VERSION AND KDETYP = P_TYPE AND KDEFOR = P_CODEFORMULE AND KDEOPT = P_CODEOPTION ;
	DELETE FROM KPGARTAW WHERE KDGIPB = P_CODEOFFRE AND KDGALX = P_VERSION AND KDGTYP = P_TYPE AND KDGFOR = P_CODEFORMULE AND KDGOPT = P_CODEOPTION ;

	/* REPORT DE LA VALEUR D'INDICE SUR L'OPTION */
	P4: BEGIN ATOMIC
		DECLARE V_IVO DECIMAL (7, 2) DEFAULT 0;
		DECLARE V_IVA DECIMAL (7, 2) DEFAULT 0;
		DECLARE V_IVW DECIMAL (7, 2) DEFAULT 0;

		SELECT JDIVO, JDIVA, JDIVW INTO V_IVO, V_IVA, V_IVW FROM YPRTENT WHERE JDIPB = P_CODEOFFRE AND JDALX = P_VERSION;
		UPDATE KPOPT SET KDBIVO = V_IVO, KDBIVA = V_IVA, KDBIVW = V_IVW WHERE KDBIPB = P_CODEOFFRE AND KDBALX = P_VERSION AND KDBTYP = P_TYPE AND KDBFOR = P_CODEFORMULE AND KDBOPT = P_CODEOPTION;
	END P4;

END P1  ;



