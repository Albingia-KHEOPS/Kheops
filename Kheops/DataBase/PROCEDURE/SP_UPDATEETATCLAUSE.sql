CREATE PROCEDURE SP_UPDATEETATCLAUSE ( 
	IN P_IDCLAUSE INTEGER , 
	IN P_ETATSITUATION CHAR(1) , 
	IN P_DATENOW NUMERIC(8, 0) , 
	OUT P_ISMODIFAVN CHAR(1) ) 
	LANGUAGE SQL 
	SPECIFIC SP_UPDATEETATCLAUSE 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	DBGVIEW = *SOURCE , 
	CLOSQLCSR = *ENDMOD , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = ZALBINKHEO , 
	DYNDFTCOL = *YES , 
	SQLPATH = 'ZALBINKHEO, ZALBINKMOD' , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC 
  
	DECLARE V_ETAFF CHAR ( 10 ) DEFAULT '' ; 
	DECLARE V_KCACLNM1 CHAR ( 5 ) DEFAULT '' ; 
	DECLARE V_KCACLNM2 CHAR ( 5 ) DEFAULT '' ; 
	DECLARE V_KCACLNM3 NUMERIC ( 5 ) DEFAULT 0 ; 
	DECLARE V_CODEOFFRE CHAR ( 9 ) DEFAULT '' ; 
	DECLARE V_VERSION NUMERIC ( 4 ) DEFAULT 0 ; 
	DECLARE V_TYPE CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_AVENANT DECIMAL ( 3 ) DEFAULT 0 ; 
	 
	DECLARE V_KCASITHISTO CHAR ( 1 ) DEFAULT 'H' ; 
	DECLARE V_KCAAVNMHISTO NUMERIC ( 3 ) DEFAULT 0 ; 
	DECLARE V_KCAMAJDHISTO NUMERIC ( 8 ) DEFAULT 0 ; 
	DECLARE V_KCAAVNCHISTO NUMERIC ( 3 ) DEFAULT 0 ; 
DECLARE V_KCACRDHISTO NUMERIC ( 8 ) DEFAULT 0 ;	 
	 
	DECLARE V_COUNT INTEGER DEFAULT 0 ; 
	DECLARE V_CODERSQ INTEGER DEFAULT 0 ; 
	DECLARE V_CODEOBJ INTEGER DEFAULT 0 ; 
	DECLARE V_CODEFOR INTEGER DEFAULT 0 ; 
	DECLARE V_CODEOPT INTEGER DEFAULT 0 ; 
	 
	DECLARE V_ISMODIF CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_ISCLAUSELIBRE CHAR ( 1 ) DEFAULT '' ; 
	DECLARE V_DATESITUATION NUMERIC ( 8 ) DEFAULT 0 ; 
	DECLARE V_DATESITUATIONHISTO NUMERIC ( 8 ) DEFAULT 0 ; 
	 
	SET V_CODERSQ = 0 ; 
	SET V_CODEOBJ = 0 ; 
	SET V_CODEFOR = 0 ; 
	SET V_CODEOPT = 0 ; 
	 
	SELECT KCAETAFF , KCACLNM1 , KCACLNM2 , KCACLNM3 , KCAIPB , KCAALX , KCATYP , KCAXTLM , KCAXTL , KCARSQ , KCAOBJ , KCAFOR , KCAOPT 
	INTO V_ETAFF , V_KCACLNM1 , V_KCACLNM2 , V_KCACLNM3 , V_CODEOFFRE , V_VERSION , V_TYPE , V_ISMODIF , V_ISCLAUSELIBRE , V_CODERSQ , V_CODEOBJ , V_CODEFOR , V_CODEOPT 
	FROM KPCLAUSE 
	WHERE KCAID = P_IDCLAUSE ; 
	 
	/* IF ( P_ETATSITUATION = 'V' ) THEN  */ 
		SET V_DATESITUATION = P_DATENOW ; 
	/* END IF ;  */ 
	 
	SELECT PBAVN INTO V_AVENANT 
	FROM YPOBASE 
	WHERE TRIM ( PBIPB ) = TRIM ( V_CODEOFFRE ) AND PBALX = V_VERSION AND PBTYP = V_TYPE ; 
  
	IF ( TRIM ( V_TYPE ) = 'P' AND V_AVENANT > 0 ) THEN 
	 
		SELECT COUNT ( * ) INTO V_COUNT 
		FROM HPCLAUSE 
		WHERE TRIM ( KCAIPB ) = TRIM ( V_CODEOFFRE ) AND KCATYP = V_TYPE AND KCAALX = V_VERSION AND KCAAVN = V_AVENANT - 1 
		AND KCAETAFF = V_ETAFF AND KCACLNM1 = V_KCACLNM1 AND KCACLNM2 = V_KCACLNM2 AND KCACLNM3 = V_KCACLNM3 
		AND KCARSQ = V_CODERSQ AND KCAOBJ = V_CODEOBJ AND KCAFOR = V_CODEFOR AND KCAOPT = V_CODEOPT ; 
		 
		IF ( V_COUNT = 1 ) THEN 
			SELECT KCASIT , KCAAVNM , KCAMAJD , KCASITD , KCAAVNC , KCACRD INTO V_KCASITHISTO , V_KCAAVNMHISTO , V_KCAMAJDHISTO , V_DATESITUATIONHISTO , V_KCAAVNCHISTO , V_KCACRDHISTO 
			FROM HPCLAUSE 
			WHERE TRIM ( KCAIPB ) = TRIM ( V_CODEOFFRE ) AND KCATYP = V_TYPE AND KCAALX = V_VERSION AND KCAAVN = V_AVENANT - 1 
			AND KCAETAFF = V_ETAFF AND KCACLNM1 = V_KCACLNM1 AND KCACLNM2 = V_KCACLNM2 AND KCACLNM3 = V_KCACLNM3 
			AND KCARSQ = V_CODERSQ AND KCAOBJ = V_CODEOBJ AND KCAFOR = V_CODEFOR AND KCAOPT = V_CODEOPT ; 
		END IF ; 
	 
		IF ( ( P_ETATSITUATION <> V_KCASITHISTO ) AND NOT ( V_KCASITHISTO = 'A' AND P_ETATSITUATION = '' ) ) THEN  --SI NOUVELLE SITUATION <> SITUATION EN HISTO DE L'AVENANT PRÉCÉDENT 
				UPDATE KPCLAUSE  --ON MET À JOUR LA TABLE AVEC L'AVENANT COURANT 
				SET KCASIT = P_ETATSITUATION , 
				KCAAVNM = V_AVENANT , 
				KCAAVNC = V_AVENANT , 
				KCACRD = P_DATENOW , 
				KCAMAJD = P_DATENOW , 
				KCASITD = V_DATESITUATION 
				WHERE KCAID = P_IDCLAUSE ; 
				 
				IF ( V_AVENANT > 0 ) THEN 
					SET P_ISMODIFAVN = 'O' ; 
				ELSE 
					SET P_ISMODIFAVN = 'N' ; 
				END IF ;		 
		ELSE 
			IF ( V_ISMODIF = 'O' AND V_ISCLAUSELIBRE = 'O' ) THEN  --SI LA NOUVELLE SITUATION = SITUATION EN HISTO DE L'AVENANT PRÉCÉDENT ET LA CLAUSE A DÉJÀ ÉTÉ MODIFIÉE DANS L'AVENANT (EDIT TEXTE PAR EXEMPLE) 
				UPDATE KPCLAUSE  --ON MET À JOUR LA TABLE AVEC L'AVENANT COURANT 
				SET KCASIT = P_ETATSITUATION , 
				KCAAVNM = V_AVENANT , 
				KCAMAJD = P_DATENOW , 
				KCASITD = V_DATESITUATION 
				WHERE KCAID = P_IDCLAUSE ;	 
				SET P_ISMODIFAVN = 'O' ; 
			ELSE  --SINON 
			 --ON REMET LES VALEURS EN HISTORIQUE (ÉTAT INITIAL) 
				UPDATE KPCLAUSE 
				SET KCASIT = V_KCASITHISTO , 
				KCAAVNM = V_KCAAVNMHISTO , 
				KCAAVNC = V_KCAAVNCHISTO , 
				KCAMAJD = V_KCAMAJDHISTO , 
				KCACRD = V_KCACRDHISTO , 
				KCASITD = V_DATESITUATIONHISTO 
				WHERE KCAID = P_IDCLAUSE ;	 
				SET P_ISMODIFAVN = 'N' ; 
			END IF ; 
		END IF ; 
	ELSE 
		UPDATE KPCLAUSE 
			SET KCASIT = P_ETATSITUATION ,	KCASITD = P_DATENOW 
		WHERE KCAID = P_IDCLAUSE ;	 
		SET P_ISMODIFAVN = 'N' ; 
	END IF ; 
	 
END P1  ; 
  

  

