using Dapper;
using Dapper.FluentMap;
using Dapper.FluentMap.Mapping;
using System;
using System.Collections.Generic;
using System.Data;
using System.Runtime.Serialization;

namespace Albingia.Kheops.OP.DataAdapter.DataModel.DTO {
    public  class CourtierMapper : EntityMap<Courtier> {
        public CourtierMapper () {
            Map(p => p.Tcict).ToColumn("Tcict");
            Map(p => p.Tctyp).ToColumn("Tctyp");
            Map(p => p.Tcici).ToColumn("Tcici");
            Map(p => p.Tcad1).ToColumn("Tcad1");
            Map(p => p.Tcad2).ToColumn("Tcad2");
            Map(p => p.Tcdep).ToColumn("Tcdep");
            Map(p => p.Tccpo).ToColumn("Tccpo");
            Map(p => p.Tcvil).ToColumn("Tcvil");
            Map(p => p.Tcpay).ToColumn("Tcpay");
            Map(p => p.Tccom).ToColumn("Tccom");
            Map(p => p.Tcreg).ToColumn("Tcreg");
            Map(p => p.Tcbur).ToColumn("Tcbur");
            Map(p => p.Tcfdc).ToColumn("Tcfdc");
            Map(p => p.Tctel).ToColumn("Tctel");
            Map(p => p.Tctlc).ToColumn("Tctlc");
            Map(p => p.Tcbqe).ToColumn("Tcbqe");
            Map(p => p.Tcgui).ToColumn("Tcgui");
            Map(p => p.Tccpt).ToColumn("Tccpt");
            Map(p => p.Tcrib).ToColumn("Tcrib");
            Map(p => p.Tcicp).ToColumn("Tcicp");
            Map(p => p.Tcori).ToColumn("Tcori");
            Map(p => p.Tctin).ToColumn("Tctin");
            Map(p => p.Tccii).ToColumn("Tccii");
            Map(p => p.Tcapg).ToColumn("Tcapg");
            Map(p => p.Tclig).ToColumn("Tclig");
            Map(p => p.Tcrgc).ToColumn("Tcrgc");
            Map(p => p.Tcenc).ToColumn("Tcenc");
            Map(p => p.Tcman).ToColumn("Tcman");
            Map(p => p.Tcdcp).ToColumn("Tcdcp");
            Map(p => p.Tcraf).ToColumn("Tcraf");
            Map(p => p.Tccha).ToColumn("Tccha");
            Map(p => p.Tcgep).ToColumn("Tcgep");
            Map(p => p.Tcprd).ToColumn("Tcprd");
            Map(p => p.Tccra).ToColumn("Tccra");
            Map(p => p.Tccrm).ToColumn("Tccrm");
            Map(p => p.Tccrj).ToColumn("Tccrj");
            Map(p => p.Tcfva).ToColumn("Tcfva");
            Map(p => p.Tcfvm).ToColumn("Tcfvm");
            Map(p => p.Tcfvj).ToColumn("Tcfvj");
            Map(p => p.Tcrpl).ToColumn("Tcrpl");
            Map(p => p.Tcusr).ToColumn("Tcusr");
            Map(p => p.Tcmja).ToColumn("Tcmja");
            Map(p => p.Tcmjm).ToColumn("Tcmjm");
            Map(p => p.Tcmjj).ToColumn("Tcmjj");
            Map(p => p.Tcold).ToColumn("Tcold");
            Map(p => p.Tcape).ToColumn("Tcape");
            Map(p => p.Tcins).ToColumn("Tcins");
            Map(p => p.Tcspe).ToColumn("Tcspe");
            Map(p => p.Tcyen).ToColumn("Tcyen");
            Map(p => p.Tcaem).ToColumn("Tcaem");
            Map(p => p.Tcioo).ToColumn("Tcioo");
            Map(p => p.Tcioc).ToColumn("Tcioc");
            Map(p => p.Tcioj).ToColumn("Tcioj");
            Map(p => p.Tciom).ToColumn("Tciom");
            Map(p => p.Tcioa).ToColumn("Tcioa");
            Map(p => p.Tciag).ToColumn("Tciag");
            Map(p => p.Tciaj).ToColumn("Tciaj");
            Map(p => p.Tciam).ToColumn("Tciam");
            Map(p => p.Tciaa).ToColumn("Tciaa");
            Map(p => p.Tciii).ToColumn("Tciii");
            Map(p => p.Tciij).ToColumn("Tciij");
            Map(p => p.Tciim).ToColumn("Tciim");
            Map(p => p.Tciia).ToColumn("Tciia");
            Map(p => p.Tcimd).ToColumn("Tcimd");
            Map(p => p.Tcimj).ToColumn("Tcimj");
            Map(p => p.Tcimm).ToColumn("Tcimm");
            Map(p => p.Tcima).ToColumn("Tcima");
            Map(p => p.Tcadh).ToColumn("Tcadh");
            Map(p => p.Tcrcv).ToColumn("Tcrcv");
            Map(p => p.Tcrcs).ToColumn("Tcrcs");
            Map(p => p.Tcinm).ToColumn("Tcinm");
            Map(p => p.Tcsec).ToColumn("Tcsec");
            Map(p => p.Tcirn).ToColumn("Tcirn");
            Map(p => p.Tcirj).ToColumn("Tcirj");
            Map(p => p.Tcirm).ToColumn("Tcirm");
            Map(p => p.Tcira).ToColumn("Tcira");
            Map(p => p.Tcrcn).ToColumn("Tcrcn");
            Map(p => p.Tcap5).ToColumn("Tcap5");
            Map(p => p.Tcedi).ToColumn("Tcedi");
            Map(p => p.Tcidn).ToColumn("Tcidn");
            Map(p => p.Tcist).ToColumn("Tcist");
            Map(p => p.Tcgem).ToColumn("Tcgem");
            Map(p => p.Tnict).ToColumn("Tnict");
            Map(p => p.Tninl).ToColumn("Tninl");
            Map(p => p.Tntnm).ToColumn("Tntnm");
            Map(p => p.Tnord).ToColumn("Tnord");
            Map(p => p.Tntyp).ToColumn("Tntyp");
            Map(p => p.Tnnom).ToColumn("Tnnom");
            Map(p => p.Tntit).ToColumn("Tntit");
            Map(p => p.Tnxn5).ToColumn("Tnxn5");
            Map(p => p.Abpcp6).ToColumn("Abpcp6");
            Map(p => p.Abpdp6).ToColumn("Abpdp6");
            Map(p => p.Abpvi6).ToColumn("Abpvi6");
            Map(p => p.Abppay).ToColumn("Abppay");
            Map(p => p.Abhsec).ToColumn("Abhsec");
            Map(p => p.Abhdes).ToColumn("Abhdes");
            Map(p => p.Abhlib).ToColumn("Abhlib");
            Map(p => p.Abhord).ToColumn("Abhord");
            Map(p => p.Abhins).ToColumn("Abhins");
            Map(p => p.Aclins).ToColumn("Aclins");
            Map(p => p.Acldes).ToColumn("Acldes");
            Map(p => p.Acllib).ToColumn("Acllib");
            Map(p => p.Aclord).ToColumn("Aclord");
            Map(p => p.Acluin).ToColumn("Acluin");
        }
    }
  

}
