using Dapper;
using Dapper.FluentMap;
using Dapper.FluentMap.Mapping;
using System;
using System.Collections.Generic;
using System.Data;
using System.Runtime.Serialization;

namespace Albingia.Kheops.OP.DataAdapter.DataModel.DTO {
    public partial class YPrimeMapper : EntityMap<YPrime>   {
        public YPrimeMapper () {
            Map(p => p.Pkipb).ToColumn("PKIPB");
            Map(p => p.Pkalx).ToColumn("PKALX");
            Map(p => p.Pkipk).ToColumn("PKIPK");
            Map(p => p.Pkavn).ToColumn("PKAVN");
            Map(p => p.Pkavc).ToColumn("PKAVC");
            Map(p => p.Pkavi).ToColumn("PKAVI");
            Map(p => p.Pkcap).ToColumn("PKCAP");
            Map(p => p.Pkeha).ToColumn("PKEHA");
            Map(p => p.Pkehm).ToColumn("PKEHM");
            Map(p => p.Pkehj).ToColumn("PKEHJ");
            Map(p => p.Pkemt).ToColumn("PKEMT");
            Map(p => p.Pkema).ToColumn("PKEMA");
            Map(p => p.Pkemm).ToColumn("PKEMM");
            Map(p => p.Pkemj).ToColumn("PKEMJ");
            Map(p => p.Pkope).ToColumn("PKOPE");
            Map(p => p.Pkmvt).ToColumn("PKMVT");
            Map(p => p.Pkmvm).ToColumn("PKMVM");
            Map(p => p.Pksit).ToColumn("PKSIT");
            Map(p => p.Pksta).ToColumn("PKSTA");
            Map(p => p.Pkstm).ToColumn("PKSTM");
            Map(p => p.Pkstj).ToColumn("PKSTJ");
            Map(p => p.Pkpra).ToColumn("PKPRA");
            Map(p => p.Pkpnt).ToColumn("PKPNT");
            Map(p => p.Pkmht).ToColumn("PKMHT");
            Map(p => p.Pkmtx).ToColumn("PKMTX");
            Map(p => p.Pkafr).ToColumn("PKAFR");
            Map(p => p.Pkaft).ToColumn("PKAFT");
            Map(p => p.Pkatm).ToColumn("PKATM");
            Map(p => p.Pkttt).ToColumn("PKTTT");
            Map(p => p.Pkmtt).ToColumn("PKMTT");
            Map(p => p.Pkidv).ToColumn("PKIDV");
            Map(p => p.Pkmtr).ToColumn("PKMTR");
            Map(p => p.Pkper).ToColumn("PKPER");
            Map(p => p.Pknpl).ToColumn("PKNPL");
            Map(p => p.Pkcot).ToColumn("PKCOT");
            Map(p => p.Pkcom).ToColumn("PKCOM");
            Map(p => p.Pkdpa).ToColumn("PKDPA");
            Map(p => p.Pkdpm).ToColumn("PKDPM");
            Map(p => p.Pkdpj).ToColumn("PKDPJ");
            Map(p => p.Pkfpa).ToColumn("PKFPA");
            Map(p => p.Pkfpm).ToColumn("PKFPM");
            Map(p => p.Pkpfj).ToColumn("PKPFJ");
            Map(p => p.Pkcpt).ToColumn("PKCPT");
            Map(p => p.Pkrlc).ToColumn("PKRLC");
            Map(p => p.Pkrla).ToColumn("PKRLA");
            Map(p => p.Pkrlm).ToColumn("PKRLM");
            Map(p => p.Pkrlj).ToColumn("PKRLJ");
            Map(p => p.Pkrll).ToColumn("PKRLL");
            Map(p => p.Pkcru).ToColumn("PKCRU");
            Map(p => p.Pkcra).ToColumn("PKCRA");
            Map(p => p.Pkcrm).ToColumn("PKCRM");
            Map(p => p.Pkcrj).ToColumn("PKCRJ");
            Map(p => p.Pkmju).ToColumn("PKMJU");
            Map(p => p.Pkmja).ToColumn("PKMJA");
            Map(p => p.Pkmjm).ToColumn("PKMJM");
            Map(p => p.Pkmjj).ToColumn("PKMJJ");
            Map(p => p.Pkenc).ToColumn("PKENC");
            Map(p => p.Pkmot).ToColumn("PKMOT");
            Map(p => p.Pkcnh).ToColumn("PKCNH");
            Map(p => p.Pkcnt).ToColumn("PKCNT");
            Map(p => p.Pkcnl).ToColumn("PKCNL");
            Map(p => p.Pkcnm).ToColumn("PKCNM");
            Map(p => p.Pkcnc).ToColumn("PKCNC");
            Map(p => p.Pkict).ToColumn("PKICT");
            Map(p => p.Pkdev).ToColumn("PKDEV");
            Map(p => p.Pkcpa).ToColumn("PKCPA");
            Map(p => p.Pkcpm).ToColumn("PKCPM");
            Map(p => p.Pktac).ToColumn("PKTAC");
            Map(p => p.Pkaff).ToColumn("PKAFF");
            Map(p => p.Pkdvr).ToColumn("PKDVR");
            Map(p => p.Pkkca).ToColumn("PKKCA");
            Map(p => p.Pkkht).ToColumn("PKKHT");
            Map(p => p.Pkkhx).ToColumn("PKKHX");
            Map(p => p.Pkkfa).ToColumn("PKKFA");
            Map(p => p.Pkkft).ToColumn("PKKFT");
            Map(p => p.Pkkat).ToColumn("PKKAT");
            Map(p => p.Pkktx).ToColumn("PKKTX");
            Map(p => p.Pkktt).ToColumn("PKKTT");
            Map(p => p.Pkktr).ToColumn("PKKTR");
            Map(p => p.Pkkco).ToColumn("PKKCO");
            Map(p => p.Pkknh).ToColumn("PKKNH");
            Map(p => p.Pkknt).ToColumn("PKKNT");
            Map(p => p.Pkknl).ToColumn("PKKNL");
            Map(p => p.Pkknm).ToColumn("PKKNM");
            Map(p => p.Pkaar).ToColumn("PKAAR");
            Map(p => p.Pkaxc).ToColumn("PKAXC");
            Map(p => p.Pkmce).ToColumn("PKMCE");
            Map(p => p.Pkkce).ToColumn("PKKCE");
            Map(p => p.Pkdca).ToColumn("PKDCA");
            Map(p => p.Pkdcm).ToColumn("PKDCM");
            Map(p => p.Pkdcj).ToColumn("PKDCJ");
            Map(p => p.Pkfca).ToColumn("PKFCA");
            Map(p => p.Pkfcm).ToColumn("PKFCM");
            Map(p => p.Pkfcj).ToColumn("PKFCJ");
            Map(p => p.Pkdem).ToColumn("PKDEM");
            Map(p => p.Pkgrg).ToColumn("PKGRG");
            Map(p => p.Pkgrn).ToColumn("PKGRN");
            Map(p => p.Pkgrh).ToColumn("PKGRH");
            Map(p => p.Pkgrb).ToColumn("PKGRB");
            Map(p => p.Pkkrg).ToColumn("PKKRG");
            Map(p => p.Pkkrn).ToColumn("PKKRN");
            Map(p => p.Pkkrh).ToColumn("PKKRH");
            Map(p => p.Pkkrb).ToColumn("PKKRB");
        }
    }
}
