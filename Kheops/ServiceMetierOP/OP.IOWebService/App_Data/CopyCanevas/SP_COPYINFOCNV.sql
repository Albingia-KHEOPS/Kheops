CREATE OR REPLACE PROCEDURE [ENVCIBLE].SP_COPYINFOCNV ( 
	IN P_CODECNV CHAR(9) , 
	IN P_TYPECNV CHAR(1) ) 
	LANGUAGE SQL 
	SPECIFIC [ENVCIBLE].SP_COPYINFOCNV 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	SET OPTION  ALWBLK = *ALLREAD , 
	ALWCPYDTA = *OPTIMIZE , 
	COMMIT = *CHG , 
	DECRESULT = (31, 31, 00) , 
	DFTRDBCOL = *NONE , 
	DYNDFTCOL = *NO , 
	DYNUSRPRF = *USER , 
	SRTSEQ = *HEX   
	P1 : BEGIN ATOMIC 
  
	DECLARE V_LIENADR INTEGER DEFAULT 0 ; 
	DECLARE V_NEWCODEID INTEGER DEFAULT 0 ; 
	 
	DECLARE V_KPDESI INTEGER DEFAULT 0 ; 
	DECLARE V_NEWKPDESI INTEGER DEFAULT 0 ; 
	DECLARE V_KPOBSV INTEGER DEFAULT 0 ; 
	DECLARE V_NEWKPOBSV INTEGER DEFAULT 0 ; 
	DECLARE V_KPEXPLCI INTEGER DEFAULT 0 ; 
	DECLARE V_NEWKPEXPLCI INTEGER DEFAULT 0 ; 
	DECLARE V_KPEXPFRH INTEGER DEFAULT 0 ; 
	DECLARE V_NEWKPEXPFRH INTEGER DEFAULT 0 ; 
	DECLARE V_KAAAND INTEGER DEFAULT 0 ; 
	DECLARE V_NEWKAAAND INTEGER DEFAULT 0 ; 
	DECLARE V_NEWDESI INTEGER DEFAULT 0 ; 
	DECLARE V_NEWOBSV INTEGER DEFAULT 0 ; 
	DECLARE V_NEWCPXLCI INTEGER DEFAULT 0 ; 
	DECLARE V_NEWCPXFRH INTEGER DEFAULT 0 ; 
	DECLARE V_NEWCODEADR INTEGER DEFAULT 0 ; 
	DECLARE V_NEWCODEFORMULE INTEGER DEFAULT 0 ; 
	DECLARE V_NEWCODEOPTION INTEGER DEFAULT 0 ; 
	DECLARE V_NEWCODEOPTIONDTL INTEGER DEFAULT 0 ; 
	DECLARE V_NEWCODEGARAN INTEGER DEFAULT 0 ; 
	DECLARE V_NEWCODEINVEN INTEGER DEFAULT 0 ; 
	DECLARE V_NEWCODEGARTAR INTEGER DEFAULT 0 ; 
	DECLARE V_NEWCODELCI INTEGER DEFAULT 0 ; 
	DECLARE V_NEWCODEFRH INTEGER DEFAULT 0 ; 
	DECLARE V_NEWCODEGARAP INTEGER DEFAULT 0 ; 
	DECLARE V_NEWCODEAPP INTEGER DEFAULT 0 ; 
	DECLARE V_NEWCODEDESI INTEGER DEFAULT 0 ; 
	DECLARE V_NEWKBEID INTEGER DEFAULT 0 ; 
	DECLARE V_NEWKBFID INTEGER DEFAULT 0 ; 
	DECLARE V_EXIT INTEGER DEFAULT 0 ; 
	DECLARE V_NEWP_CODEINVEN INTEGER DEFAULT 0 ; 
	DECLARE V_NEWCODECLAUSE INTEGER DEFAULT 0 ; 
	DECLARE V_NEWCODEINTER INTEGER DEFAULT 0 ; 
	 
	DECLARE V_DESIFRH INTEGER DEFAULT 0 ; 
	DECLARE V_NEWFRHDID INTEGER DEFAULT 0 ; 
	DECLARE V_DESILCI INTEGER DEFAULT 0 ; 
	DECLARE V_NEWLCIDID INTEGER DEFAULT 0 ; 
	 
	DELETE FROM [ENVCIBLE] . KPCOPID WHERE KFLTYP = P_TYPECNV AND KFLIPB = P_CODECNV AND KFLALX = 0 ; 
	 
	/* TRAITEMENT YPOBASE AVEC SON ADRESSE */ 
	SELECT PBADH INTO V_LIENADR FROM [ENVSOURCE] . YPOBASE WHERE PBIPB = P_CODECNV AND PBTYP = P_TYPECNV ; 
	IF ( V_LIENADR != 0 ) THEN 
		CALL [ENVCIBLE] . SP_SECOPID ( P_CODECNV , 0 , P_TYPECNV , 'YADRESS' , V_LIENADR , V_NEWCODEID ) ; 
		IF ( V_NEWCODEID = 0 ) THEN 
			CALL [ENVCIBLE] . SP_YCHRONO ( 'ADRESSE_CHRONO' , V_NEWCODEID ) ; 
			CALL [ENVCIBLE] . SP_INCOPID ( P_CODECNV , 0 , P_TYPECNV , 'YADRESS' , V_LIENADR , V_NEWCODEID ) ; 
		END IF ; 
	END IF ; 
  
	INSERT INTO [ENVCIBLE] . YPOBASE ( SELECT * FROM [ENVSOURCE] . YPOBASE WHERE PBIPB = P_CODECNV AND PBTYP = P_TYPECNV ) ; 
	 
	/* TRAITEMENT KPCTRLE */ 
	INSERT INTO [ENVCIBLE] . KPCTRLE ( SELECT * FROM [ENVSOURCE] . KPCTRLE WHERE KEVIPB = P_CODECNV AND KEVALX = 0 AND KEVTYP = P_TYPECNV ) ; 
	/* TRAITEMENT YPRTENT */ 
	INSERT INTO [ENVCIBLE] . YPRTENT ( SELECT * FROM [ENVSOURCE] . YPRTENT WHERE JDIPB = P_CODECNV AND JDALX = 0 ) ; 
	/* TRAITEMENT YPOASSU */ 
	INSERT INTO [ENVCIBLE] . YPOASSU ( SELECT * FROM [ENVSOURCE] . YPOASSU WHERE PCIPB = P_CODECNV AND PCALX = 0 AND PCTYP = P_TYPECNV ) ; 
	/* TRAITEMENT YPOCOAS */ 
	INSERT INTO [ENVCIBLE] . YPOCOAS ( SELECT * FROM [ENVSOURCE] . YPOCOAS WHERE PHIPB = P_CODECNV AND PHALX = 0 AND PHTYP = P_TYPECNV ) ; 
	/* TRAITEMENT YPOCOUR */ 
	INSERT INTO [ENVCIBLE] . YPOCOUR ( SELECT * FROM [ENVSOURCE] . YPOCOUR WHERE PFIPB = P_CODECNV AND PFALX = 0 AND PFTYP = P_TYPECNV ) ; 
	/* TRAITEMENT KPENT */ 
	SELECT KAADESI , KAAOBSV , KAAKDIID , KAAKDKID , KAAAND INTO V_KPDESI , V_KPOBSV , V_KPEXPLCI , V_KPEXPFRH , V_KAAAND 
		FROM [ENVSOURCE] . KPENT 
		WHERE KAATYP = P_TYPECNV AND KAAIPB = P_CODECNV AND KAAALX = 0 ; 
	IF ( V_KPDESI != 0 ) THEN 
		CALL [ENVCIBLE] . SP_SECOPID ( P_CODECNV , 0 , P_TYPECNV , 'KADCHR' , V_KPDESI , V_NEWKPDESI ) ; 
		IF ( V_NEWKPDESI = 0 ) THEN 
			CALL [ENVCIBLE] . SP_NCHRONO ( 'KADCHR' , V_NEWKPDESI ) ; 
			CALL [ENVCIBLE] . SP_INCOPID ( P_CODECNV , 0 , P_TYPECNV , 'KADCHR' , V_KPDESI , V_NEWKPDESI ) ; 
		END IF ; 
	END IF ; 
	 
	IF ( V_KPOBSV != 0 ) THEN 
		CALL [ENVCIBLE] . SP_SECOPID ( P_CODECNV , 0 , P_TYPECNV , 'KAJCHR' , V_KPOBSV , V_NEWKPOBSV ) ; 
		IF ( V_NEWKPOBSV = 0 ) THEN 
			CALL [ENVCIBLE] . SP_NCHRONO ( 'KAJCHR' , V_NEWKPOBSV ) ; 
			CALL [ENVCIBLE] . SP_INCOPID ( P_CODECNV , 0 , P_TYPECNV , 'KAJCHR' , V_KPOBSV , V_NEWKPOBSV ) ; 
		END IF ; 
	END IF ; 
	IF ( V_KPEXPLCI != 0 ) THEN 
		CALL [ENVCIBLE] . SP_SECOPID ( P_CODECNV , 0 , P_TYPECNV , 'KDIID' , V_KPEXPLCI , V_NEWKPEXPLCI ) ; 
		IF ( V_NEWKPEXPLCI = 0 ) THEN 
			CALL [ENVCIBLE] . SP_NCHRONO ( 'KDIID' , V_NEWKPEXPLCI ) ; 
			CALL [ENVCIBLE] . SP_INCOPID ( P_CODECNV , 0 , P_TYPECNV , 'KDIID' , V_KPEXPLCI , V_NEWKPEXPLCI ) ; 
		END IF ; 
	END IF ; 
	 
	IF ( V_KPEXPFRH != 0 ) THEN 
		CALL [ENVCIBLE] . SP_SECOPID ( P_CODECNV , 0 , P_TYPECNV , 'KDKID' , V_KPEXPFRH , V_NEWKPEXPFRH ) ; 
		IF ( V_NEWKPEXPFRH = 0 ) THEN 
			CALL [ENVCIBLE] . SP_NCHRONO ( 'KDKID' , V_NEWKPEXPFRH ) ; 
			CALL [ENVCIBLE] . SP_INCOPID ( P_CODECNV , 0 , P_TYPECNV , 'KDKID' , V_KPEXPFRH , V_NEWKPEXPFRH ) ; 
		END IF ; 
	END IF ; 
	IF ( V_KAAAND != 0 ) THEN 
		CALL [ENVCIBLE] . SP_SECOPID ( P_CODECNV , 0 , P_TYPECNV , 'KADCHR' , V_KAAAND , V_NEWKAAAND ) ; 
		IF ( V_NEWKAAAND = 0 ) THEN 
			CALL [ENVCIBLE] . SP_NCHRONO ( 'KADCHR' , V_NEWKAAAND ) ; 
			CALL [ENVCIBLE] . SP_INCOPID ( P_CODECNV , 0 , P_TYPECNV , 'KADCHR' , V_KAAAND , V_NEWKAAAND ) ; 
		END IF ; 
	END IF ; 
	INSERT INTO [ENVCIBLE] . KPENT 
		( KAATYP , KAAIPB , KAAALX , KAABONI , KAABONT , KAAANTI , KAADESI , KAAOBSV , KAALCIVALO , KAALCIVALA , 
		KAALCIVALW , KAALCIUNIT , KAALCIBASE , KAAKDIID , KAAFRHVALO , KAAFRHVALA , KAAFRHVALW , KAAFRHUNIT , 
		KAAFRHBASE , KAAKDKID , KAAATGLCI , KAAATGKLC , KAAATGCAP , KAAATGKCA , KAAATGSUR , KAAATGBCN , KAAATGKBC , 
		KAAATGCRI , KAAATGAPT , KAAATGF , KAAATGAPR , KAAATGTRT , KAAATGTRR , KAAATGTCT , KAAATGTCR , KAAATGTFT , 
		KAAATGTCM , KAAATGTFA , KAAATGCTX , KAAATGLCF , KAAATGCAF , KAAATGSUF , KAAATGBCF , KAALCIINA , KAAATGFRR , 
		KAAATGCMT , KAAATGFAT , KAAATGBAS , KAAATGKBA , KAAFRHINA , KAAAND , KAADPRJ , KAADSTA , KAAOBSF , KAAOBSA , KAAOBSC , KAAASS , KAAAFS , 
		KAAXCMS , KAACNCS , KAACIBLE , KAAMAXA , KAAMAXE , KAAIDE , KAAIMED , KAAIMDA , KAAISIN , KAARCP ) 
	( SELECT P_TYPECNV , P_CODECNV , 0 , KAABONI , KAABONT , KAAANTI , V_NEWKPDESI , V_NEWKPOBSV , KAALCIVALO , KAALCIVALA , 
		KAALCIVALW , KAALCIUNIT , KAALCIBASE , V_NEWKPEXPLCI , KAAFRHVALO , KAAFRHVALA , KAAFRHVALW , KAAFRHUNIT , 
		KAAFRHBASE , V_NEWKPEXPFRH , KAAATGLCI , KAAATGKLC , KAAATGCAP , KAAATGKCA , KAAATGSUR , KAAATGBCN , KAAATGKBC , 
		KAAATGCRI , KAAATGAPT , KAAATGF , KAAATGAPR , KAAATGTRT , KAAATGTRR , KAAATGTCT , KAAATGTCR , KAAATGTFT , 
		KAAATGTCM , KAAATGTFA , KAAATGCTX , KAAATGLCF , KAAATGCAF , KAAATGSUF , KAAATGBCF , KAALCIINA , KAAATGFRR , 
		KAAATGCMT , KAAATGFAT , KAAATGBAS , KAAATGKBA , KAAFRHINA , V_NEWKAAAND , 0 , KAADSTA , KAAOBSF , KAAOBSA , KAAOBSC , KAAASS , KAAAFS , 
		KAAXCMS , KAACNCS , KAACIBLE , KAAMAXA , KAAMAXE , KAAIDE , KAAIMED , KAAIMDA , KAAISIN , KAARCP 
		FROM [ENVSOURCE] . KPENT 
		WHERE KAATYP = P_TYPECNV AND KAAIPB = P_CODECNV AND KAAALX = 0 ) ; 
	/* TRAITEMENT YPRTRSQ */ 
	INSERT INTO [ENVCIBLE] . YPRTRSQ ( SELECT * FROM [ENVSOURCE] . YPRTRSQ WHERE JEIPB = P_CODECNV AND JEALX = 0 ) ; 
	/* TRAITEMENT KPRSQ */ 
	FOR LOOP_RSQ AS FREE_LIST CURSOR FOR 
		SELECT KABRSQ RSQ , KABCIBLE CIBLE , KABDESC DESCR , KABDESI DESI , KABOBSV OBSV , KABREPVAL REPVAL , KABREPOBL REPOBL , KABAPE APE , KABTRE TRE , 
			KABCLASS CLASSE , KABNMC01 NMC01 , KABNMC02 NMC02 , KABNMC03 NMC03 , KABNMC04 NMC04 , KABNMC05 NMC05 , KABMAND MAND , KABMANF MANF , KABDSPP DSPP , 
			KABLCIVALO LCIVALO , KABLCIVALA LCIVALA , KABLCIVALW LCIVALW , KABLCIUNIT LCIUNIT , KABLCIBASE LCIBASE , KABKDIID KDIID , 
			KABFRHVALO FRHVALO , KABFRHVALA FRHVALA , KABFRHVALW FRHVALW , KABFRHUNIT FRHUNIT , KABFRHBASE FRHBASE , KABKDKID KDKID , 
			KABNSIR NSIR , KABMANDH MANDH , KABMANFH MANFH , KABSURF SURF , KABVMC VMC , KABPROL PROL , KABPBI PBI 
		FROM [ENVSOURCE] . KPRSQ 
		WHERE KABIPB = P_CODECNV AND KABALX = 0 AND KABTYP = P_TYPECNV 
	DO 
		IF ( DESI != 0 ) THEN 
			CALL [ENVCIBLE] . SP_SECOPID ( P_CODECNV , 0 , P_TYPECNV , 'KADCHR' , DESI , V_NEWDESI ) ; 
			IF ( V_NEWDESI = 0 ) THEN 
				CALL [ENVCIBLE] . SP_NCHRONO ( 'KADCHR' , V_NEWDESI ) ; 
				CALL [ENVCIBLE] . SP_INCOPID ( P_CODECNV , 0 , P_TYPECNV , 'KADCHR' , DESI , V_NEWDESI ) ; 
			END IF ; 
		END IF ; 
		IF ( OBSV != 0 ) THEN 
			CALL [ENVCIBLE] . SP_SECOPID ( P_CODECNV , 0 , P_TYPECNV , 'KAJCHR' , OBSV , V_NEWOBSV ) ; 
			IF ( V_NEWOBSV = 0 ) THEN 
				CALL [ENVCIBLE] . SP_NCHRONO ( 'KAJCHR' , V_NEWOBSV ) ; 
				CALL [ENVCIBLE] . SP_INCOPID ( P_CODECNV , 0 , P_TYPECNV , 'KAJCHR' , OBSV , V_NEWOBSV ) ; 
			END IF ; 
		END IF ; 
		IF ( KDIID != 0 ) THEN 
			CALL [ENVCIBLE] . SP_SECOPID ( P_CODECNV , 0 , P_TYPECNV , 'KDIID' , KDIID , V_NEWCPXLCI ) ; 
			IF ( V_NEWCPXLCI = 0 ) THEN 
				CALL [ENVCIBLE] . SP_NCHRONO ( 'KDIID' , V_NEWCPXLCI ) ; 
				CALL [ENVCIBLE] . SP_INCOPID ( P_CODECNV , 0 , P_TYPECNV , 'KDIID' , KDIID , V_NEWCPXLCI ) ; 
			END IF ; 
		END IF ; 
		IF ( KDKID != 0 ) THEN 
			CALL [ENVCIBLE] . SP_SECOPID ( P_CODECNV , 0 , P_TYPECNV , 'KDKID' , KDKID , V_NEWCPXFRH ) ; 
			IF ( V_NEWCPXFRH = 0 ) THEN 
				CALL [ENVCIBLE] . SP_NCHRONO ( 'KDKID' , V_NEWCPXFRH ) ; 
				CALL [ENVCIBLE] . SP_INCOPID ( P_CODECNV , 0 , P_TYPECNV , 'KDKID' , KDKID , V_NEWCPXFRH ) ; 
			END IF ; 
		END IF ; 
		 
		INSERT INTO [ENVCIBLE] . KPRSQ 
			( KABTYP , KABIPB , KABALX , KABRSQ , KABCIBLE , KABDESC , KABDESI , KABOBSV , KABREPVAL , KABREPOBL , KABAPE , KABTRE , 
			KABCLASS , KABNMC01 , KABNMC02 , KABNMC03 , KABNMC04 , KABNMC05 , KABMAND , KABMANF , KABDSPP , 
			KABLCIVALO , KABLCIVALA , KABLCIVALW , KABLCIUNIT , KABLCIBASE , KABKDIID , 
			KABFRHVALO , KABFRHVALA , KABFRHVALW , KABFRHUNIT , KABFRHBASE , KABKDKID , 
			KABNSIR , KABMANDH , KABMANFH , KABSURF , KABVMC , KABPROL , KABPBI ) 
		VALUES 
			( P_TYPECNV , P_CODECNV , 0 , RSQ , CIBLE , DESCR , V_NEWDESI , V_NEWOBSV , REPVAL , REPOBL , APE , TRE , 
			CLASSE , NMC01 , NMC02 , NMC03 , NMC04 , NMC05 , MAND , MANF , DSPP , 
			LCIVALO , LCIVALA , LCIVALW , LCIUNIT , LCIBASE , V_NEWCPXLCI , 
			FRHVALO , FRHVALA , FRHVALW , FRHUNIT , FRHBASE , V_NEWCPXFRH , 
			NSIR , MANDH , MANFH , SURF , VMC , PROL , PBI ) ; 
	END FOR ; 
	/* TRAITEMENT YPRTOBJ */ 
	INSERT INTO [ENVCIBLE] . YPRTOBJ ( SELECT * FROM [ENVSOURCE] . YPRTOBJ WHERE JGIPB = P_CODECNV AND JGALX = 0 ) ; 
	/* TRAITEMENT KPOBJ */ 
	FOR LOOP_OBJ AS FREE_LIST CURSOR FOR 
		SELECT KACRSQ RSQ , KACOBJ OBJ , KACCIBLE CIBLE , KACINVEN INVEN , KACDESC DESCR , KACDESI DESI , KACOBSV OBSV , KACAPE APE , KACTRE TRE , 
			KACCLASS CLASSE , KACNMC01 NMC01 , KACNMC02 NMC02 , KACNMC03 NMC03 , KACNMC04 NMC04 , KACNMC05 NMC05 , KACMAND MAND , KACMANF MANF , KACDSPP DSPP , 
			KACLCIVALO LCIVALO , KACLCIVALA LCIVALA , KACLCIVALW LCIVALW , KACLCIUNIT LCIUNIT , KACLCIBASE LCIBASE , KACKDIID KDIID , 
			KACFRHVALO FRHVALO , KACFRHVALA FRHVALA , KACFRHVALW FRHVALW , KACFRHUNIT FRHUNIT , KACFRHBASE FRHBASE , KACKDKID KDKID , 
			KACNSIR NSIR , KACMANDH MANDH , KACMANFH MANFH , KACSURF SURF , KACVMC VMC , KACPROL PROL , KACPBI PBI 
		FROM [ENVSOURCE] . KPOBJ 
		WHERE KACIPB = P_CODECNV AND KACALX = 0 AND KACTYP = P_TYPECNV 
	DO 
		IF ( DESI != 0 ) THEN 
			CALL [ENVCIBLE] . SP_SECOPID ( P_CODECNV , 0 , P_TYPECNV , 'KADCHR' , DESI , V_NEWDESI ) ; 
			IF ( V_NEWDESI = 0 ) THEN 
				CALL [ENVCIBLE] . SP_NCHRONO ( 'KADCHR' , V_NEWDESI ) ; 
				CALL [ENVCIBLE] . SP_INCOPID ( P_CODECNV , 0 , P_TYPECNV , 'KADCHR' , DESI , V_NEWDESI ) ; 
			END IF ; 
		END IF ; 
		IF ( OBSV != 0 ) THEN 
			CALL [ENVCIBLE] . SP_SECOPID ( P_CODECNV , 0 , P_TYPECNV , 'KAJCHR' , OBSV , V_NEWOBSV ) ; 
			IF ( V_NEWOBSV = 0 ) THEN 
				CALL [ENVCIBLE] . SP_NCHRONO ( 'KAJCHR' , V_NEWOBSV ) ; 
				CALL [ENVCIBLE] . SP_INCOPID ( P_CODECNV , 0 , P_TYPECNV , 'KAJCHR' , OBSV , V_NEWOBSV ) ; 
			END IF ; 
		END IF ; 
		 
		INSERT INTO [ENVCIBLE] . KPOBJ 
			( KACTYP , KACIPB , KACALX , KACRSQ , KACOBJ , KACCIBLE , KACINVEN , KACDESC , KACDESI , KACOBSV , KACAPE , KACTRE , 
			KACCLASS , KACNMC01 , KACNMC02 , KACNMC03 , KACNMC04 , KACNMC05 , KACMAND , KACMANF , KACDSPP , 
			KACLCIVALO , KACLCIVALA , KACLCIVALW , KACLCIUNIT , KACLCIBASE , KACKDIID , 
			KACFRHVALO , KACFRHVALA , KACFRHVALW , KACFRHUNIT , KACFRHBASE , KACKDKID , 
			KACNSIR , KACMANDH , KACMANFH , KACSURF , KACVMC , KACPROL , KACPBI ) 
		VALUES 
			( P_TYPECNV , P_CODECNV , 0 , RSQ , OBJ , CIBLE , INVEN , DESCR , V_NEWDESI , V_NEWOBSV , APE , TRE , 
			CLASSE , NMC01 , NMC02 , NMC03 , NMC04 , NMC05 , MAND , MANF , DSPP , 
			LCIVALO , LCIVALA , LCIVALW , LCIUNIT , LCIBASE , KDIID , 
			FRHVALO , FRHVALA , FRHVALW , FRHUNIT , FRHBASE , KDKID , 
			NSIR , MANDH , MANFH , SURF , VMC , PROL , PBI ) ; 
	END FOR ; 
	/* TRAITEMENT DES ADRESSES */ 
	FOR LOOP_ADR AS FREE_LIST CURSOR FOR 
		SELECT JFADH CODEADR FROM [ENVSOURCE] . YPRTADR WHERE JFIPB = P_CODECNV AND JFALX = 0 
	DO 
		IF ( CODEADR != 0 ) THEN 
			CALL [ENVCIBLE] . SP_SECOPID ( P_CODECNV , 0 , P_TYPECNV , 'YADRESS' , CODEADR , V_NEWCODEADR ) ; 
			IF ( V_NEWCODEADR = 0 ) THEN 
				CALL [ENVCIBLE] . SP_YCHRONO ( 'ADRESSE_CHRONO' , V_NEWCODEADR ) ; 
				CALL [ENVCIBLE] . SP_INCOPID ( P_CODECNV , 0 , P_TYPECNV , 'YADRESS' , CODEADR , V_NEWCODEADR ) ; 
			END IF ; 
			 
			INSERT INTO [ENVCIBLE] . YPRTADR 
				( SELECT JFIPB , JFALX , JFRSQ , JFOBJ , JFAD1 , JFAD2 , JFDEP , JFCPO , JFVIL , JFPAY , V_NEWCODEADR 
				FROM [ENVSOURCE] . YPRTADR 
				WHERE JFADH = CODEADR ) ; 
		END IF ; 
	END FOR ; 
	/* TRAITEMENT KPFOR */ 
	FOR LOOP_FOR AS FREE_LIST CURSOR FOR 
		SELECT KDAID CODEFOR FROM [ENVSOURCE] . KPFOR WHERE KDAIPB = P_CODECNV AND KDATYP = P_TYPECNV 
	DO 
		CALL [ENVCIBLE] . SP_SECOPID ( P_CODECNV , 0 , P_TYPECNV , 'KDAID' , CODEFOR , V_NEWCODEFORMULE ) ; 
		IF ( V_NEWCODEFORMULE = 0 ) THEN 
			CALL [ENVCIBLE] . SP_NCHRONO ( 'KDAID' , V_NEWCODEFORMULE ) ; 
			CALL [ENVCIBLE] . SP_INCOPID ( P_CODECNV , 0 , P_TYPECNV , 'KDAID' , CODEFOR , V_NEWCODEFORMULE ) ; 
		END IF ; 
	 
		INSERT INTO [ENVCIBLE] . KPFOR 
			( SELECT V_NEWCODEFORMULE , KDATYP , KDAIPB , KDAALX , KDAFOR , KDACCH , KDAALPHA , 
				KDABRA , KDACIBLE , KDAKAIID , KDADESC , KDACRU , KDACRD , KDAMAJU , KDAMAJD , KDAFGEN 
			FROM [ENVSOURCE] . KPFOR WHERE KDAID = CODEFOR ) ; 
	 
		/* TRAITEMENT KPOPT */ 
		FOR LOOP_OPT AS FREE_LIST CURSOR FOR 
			SELECT KDBID CODEOPT FROM [ENVSOURCE] . KPOPT WHERE KDBKDAID = CODEFOR 
		DO 
			CALL [ENVCIBLE] . SP_SECOPID ( P_CODECNV , 0 , P_TYPECNV , 'KDBID' , CODEOPT , V_NEWCODEOPTION ) ; 
			IF ( V_NEWCODEOPTION = 0 ) THEN 
				CALL [ENVCIBLE] . SP_NCHRONO ( 'KDBID' , V_NEWCODEOPTION ) ; 
				CALL [ENVCIBLE] . SP_INCOPID ( P_CODECNV , 0 , P_TYPECNV , 'KDBID' , CODEOPT , V_NEWCODEOPTION ) ; 
			END IF ; 
			INSERT INTO [ENVCIBLE] . KPOPT 
				( SELECT V_NEWCODEOPTION , KDBTYP , KDBIPB , KDBALX , KDBFOR , V_NEWCODEFORMULE , KDBOPT , KDBDESC , 
					KDBFORR , KDBKDAIDR , KDBSPEID , KDBCRU , KDBCRD , KDBCRH , KDBMAJU , KDBMAJD , KDBMAJH , KDBPAQ , KDBACQ , KDBTMC , 
					KDBTFF , KDBTFP , KDBPRO , KDBTMI , KDBTFM , KDBCMC , KDBCFO , KDBCHT , KDBCTT , KDBCCP , KDBVAL , KDBVAA , KDBVAW , KDBVAT , KDBVAU , KDBVAH , KDBIVO , 
					KDBIVA , KDBIVW , KDBAVE , KDBAVG , KDBECO , KDBAVA , KDBAVM , KDBAVJ , KDBEHH , KDBEHC , KDBEHI , KDBASVALO , KDBASVALA , KDBASVALW , KDBASUNIT , KDBASBASE , KDBGER 
				FROM [ENVSOURCE] . KPOPT WHERE KDBID = CODEOPT ) ; 
	 
			/* TRAITEMENT KPOPTD */ 
			FOR LOOP_OPTD AS FREE_LIST CURSOR FOR 
				SELECT KDCID CODEOPTD FROM [ENVSOURCE] . KPOPTD WHERE KDCKDBID = CODEOPT 
			DO 
				CALL [ENVCIBLE] . SP_SECOPID ( P_CODECNV , 0 , P_TYPECNV , 'KDCID' , CODEOPTD , V_NEWCODEOPTIONDTL ) ; 
				IF ( V_NEWCODEOPTIONDTL = 0 ) THEN 
					CALL [ENVCIBLE] . SP_NCHRONO ( 'KDCID' , V_NEWCODEOPTIONDTL ) ; 
					CALL [ENVCIBLE] . SP_INCOPID ( P_CODECNV , 0 , P_TYPECNV , 'KDCID' , CODEOPTD , V_NEWCODEOPTIONDTL ) ; 
				END IF ; 
				INSERT INTO [ENVCIBLE] . KPOPTD 
					( SELECT V_NEWCODEOPTIONDTL , KDCTYP , KDCIPB , KDCALX , KDCFOR , KDCOPT , V_NEWCODEOPTION , KDCTENG , 
						KDCKAKID , KDCKAEID , KDCKAQID , KDCMODELE , KDCKARID , KDCCRU , KDCCRD , KDCMAJU , KDCMAJD , KDCFLAG , KDCORDRE 
					FROM [ENVSOURCE] . KPOPTD WHERE KDCID = CODEOPTD ) ; 
	 
				/* TRAITEMENT KPGARAN */ 
				FOR LOOP_GARAN AS FREE_LIST CURSOR FOR 
					SELECT KDEID CODEGARAN FROM [ENVSOURCE] . KPGARAN WHERE KDEKDCID = CODEOPTD 
				DO 
					CALL [ENVCIBLE] . SP_SECOPID ( P_CODECNV , 0 , P_TYPECNV , 'KDEID' , CODEGARAN , V_NEWCODEGARAN ) ; 
					IF ( V_NEWCODEGARAN = 0 ) THEN 
						CALL [ENVCIBLE] . SP_NCHRONO ( 'KDEID' , V_NEWCODEGARAN ) ; 
						CALL [ENVCIBLE] . SP_INCOPID ( P_CODECNV , 0 , P_TYPECNV , 'KDEID' , CODEGARAN , V_NEWCODEGARAN ) ; 
					END IF ; 
					INSERT INTO [ENVCIBLE] . KPGARAN 
						( SELECT V_NEWCODEGARAN , KDETYP , KDEIPB , KDEALX , KDEFOR , KDEOPT , V_NEWCODEOPTIONDTL , KDEGARAN , 
							KDESEQ , KDENIVEAU , KDESEM , KDESE1 , KDETRI , KDENUMPRES , KDEAJOUT , KDECAR , KDENAT , KDEGAN , KDEKDFID , 
							KDEDEFG , KDEKDHID , KDEDATDEB , KDEHEUDEB , KDEDATFIN , KDEHEUFIN , KDEDUREE , KDEDURUNI , KDEPRP , KDETYPEMI , 
							KDEALIREF , KDECATNAT , KDEINA , KDETAXCOD , KDETAXREP , KDECRAVN , KDECRU , KDECRD , KDEMAJAVN , KDEASVALO , 
							KDEASVALA , KDEASVALW , KDEASUNIT , KDEASBASE , KDEASMOD , KDEASOBLI , KDEINVSP , KDEINVEN , KDEWDDEB , 
							KDEWHDEB , KDEWDFIN , KDEWHFIN , KDETCD , KDEMODI , KDEPIND , KDEPCATN , KDEPREF , KDEPPRP , KDEPEMI , KDEPTAXC , KDEPNTM , KDEALA , KDEPALA , KDEALO 
						FROM [ENVSOURCE] . KPGARAN WHERE KDEID = CODEGARAN ) ; 
	 
					INSERT INTO [ENVCIBLE] . KPGARAH 
						( SELECT V_NEWCODEGARAN , KDETYP , KDEIPB , KDEALX , KDEFOR , KDEOPT , V_NEWCODEOPTIONDTL , KDEGARAN , 
							KDESEQ , KDENIVEAU , KDESEM , KDESE1 , KDETRI , KDENUMPRES , KDEAJOUT , KDECAR , KDENAT , KDEGAN , KDEKDFID , 
							KDEDEFG , KDEKDHID , KDEDATDEB , KDEHEUDEB , KDEDATFIN , KDEHEUFIN , KDEDUREE , KDEDURUNI , KDEPRP , KDETYPEMI , 
							KDEALIREF , KDECATNAT , KDEINA , KDETAXCOD , KDETAXREP , KDECRAVN , KDECRU , KDECRD , KDEMAJAVN , KDEASVALO , 
							KDEASVALA , KDEASVALW , KDEASUNIT , KDEASBASE , KDEASMOD , KDEASOBLI , KDEINVSP , V_NEWCODEINVEN , KDEWDDEB , 
							KDEWHDEB , KDEWDFIN , KDEWHFIN , KDETCD , KDEMODI , KDEPIND , KDEPCATN , KDEPREF , KDEPPRP , KDEPEMI , KDEPTAXC , KDEPNTM , KDEALA , KDEPALA , KDEALO 
						FROM [ENVSOURCE] . KPGARAH WHERE KDEID = CODEGARAN ) ; 
	 
					/* TRAITEMENT KPGARTAR */ 
					FOR LOOP_GARTAR AS FREE_LIST CURSOR FOR 
						SELECT KDGID CODEGARTAR , KDGKDIID CODELCI , KDGKDKID CODEFRH FROM [ENVSOURCE] . KPGARTAR WHERE KDGKDEID = CODEGARAN 
					DO 
						SET V_NEWCODELCI = 0 ; 
						SET V_NEWCODEFRH = 0 ; 
						CALL [ENVCIBLE] . SP_SECOPID ( P_CODECNV , 0 , P_TYPECNV , 'KDGID' , CODEGARTAR , V_NEWCODEGARTAR ) ; 
						IF ( V_NEWCODEGARTAR = 0 ) THEN 
							CALL [ENVCIBLE] . SP_NCHRONO ( 'KDGID' , V_NEWCODEGARTAR ) ; 
							CALL [ENVCIBLE] . SP_INCOPID ( P_CODECNV , 0 , P_TYPECNV , 'KDGID' , CODEGARTAR , V_NEWCODEGARTAR ) ; 
						END IF ; 
	 
						IF ( CODELCI != 0 ) THEN 
							CALL [ENVCIBLE] . SP_SECOPID ( P_CODECNV , 0 , P_TYPECNV , 'KDIID' , CODELCI , V_NEWCODELCI ) ; 
							IF ( V_NEWCODELCI = 0 ) THEN 
								CALL [ENVCIBLE] . SP_NCHRONO ( 'KDIID' , V_NEWCODELCI ) ; 
								CALL [ENVCIBLE] . SP_INCOPID ( P_CODECNV , 0 , P_TYPECNV , 'KDIID' , CODELCI , V_NEWCODELCI ) ; 
							END IF ; 
						END IF ; 
	 
						IF ( CODEFRH != 0 ) THEN 
							CALL [ENVCIBLE] . SP_SECOPID ( P_CODECNV , 0 , P_TYPECNV , 'KDKID' , CODEFRH , V_NEWCODEFRH ) ; 
							IF ( V_NEWCODEFRH = 0 ) THEN 
								CALL [ENVCIBLE] . SP_NCHRONO ( 'KDKID' , V_NEWCODEFRH ) ; 
								CALL [ENVCIBLE] . SP_INCOPID ( P_CODECNV , 0 , P_TYPECNV , 'KDKID' , CODEFRH , V_NEWCODEFRH ) ; 
							END IF ; 
						END IF ; 
						INSERT INTO [ENVCIBLE] . KPGARTAR 
							( SELECT V_NEWCODEGARTAR , KDGTYP , KDGIPB , KDGALX , KDGFOR , KDGOPT , KDGGARAN , V_NEWCODEGARAN , 
								KDGNUMTAR , KDGLCIMOD , KDGLCIOBL , KDGLCIVALO , KDGLCIVALA , KDGLCIVALW , KDGLCIUNIT , KDGLCIBASE , V_NEWCODELCI , 
								KDGFRHMOD , KDGFRHOBL , KDGFRHVALO , KDGFRHVALA , KDGFRHVALW , KDGFRHUNIT , KDGFRHBASE , V_NEWCODEFRH , 
								KDGFMIVALO , KDGFMIVALA , KDGFMIVALW , KDGFMIUNIT , KDGFMIBASE , KDGFMAVALO , KDGFMAVALA , KDGFMAVALW , 
								KDGFMAUNIT , KDGFMABASE , KDGPRIMOD , KDGPRIOBL , KDGPRIVALO , KDGPRIVALA , KDGPRIVALW , KDGPRIUNIT , KDGPRIBASE , 
								KDGMNTBASE , KDGPRIMPRO , KDGTMC , KDGTFF , KDGCMC , KDGCHT , KDGCTT 
							FROM [ENVSOURCE] . KPGARTAR WHERE KDGID = CODEGARTAR ) ; 
					END FOR ; 
					/* TRAITEMENT KPGARAP */ 
					FOR LOOP_GARAP AS FREE_LIST CURSOR FOR 
						SELECT KDFID CODEGARAP FROM [ENVSOURCE] . KPGARAP WHERE KDFKDEID = CODEGARAN 
					DO 
						CALL [ENVCIBLE] . SP_SECOPID ( P_CODECNV , 0 , P_TYPECNV , 'KDFID' , CODEGARAP , V_NEWCODEGARAP ) ; 
						IF ( V_NEWCODEGARAP = 0 ) THEN 
							CALL [ENVCIBLE] . SP_NCHRONO ( 'KDFID' , V_NEWCODEGARAP ) ; 
							CALL [ENVCIBLE] . SP_INCOPID ( P_CODECNV , 0 , P_TYPECNV , 'KDFID' , CODEGARAP , V_NEWCODEGARAP ) ; 
						END IF ; 
	 
						INSERT INTO [ENVCIBLE] . KPGARAP 
							( SELECT V_NEWCODEGARAP , KDFTYP , KDFIPB , KDFALX , KDFFOR , KDFOPT , KDFGARAN , V_NEWCODEGARAN , KDFGAN , KDFPERI , 
								KDFRSQ , KDFOBJ , KDFINVEN , KDFINVEP , KDFCRU , KDFCRD , KDFMAJU , KDFMAJD , KDFPRV , KDFPRA , KDFPRW , KDFPRU , KDFTYC , KDFMNT 
							FROM [ENVSOURCE] . KPGARAP WHERE KDFID = CODEGARAP ) ; 
					END FOR ; 
				END FOR ; 
			END FOR ; 
	 
			/* TRAITEMENT KPOPTAP */ 
			FOR LOOP_OPTAP AS FREE_LIST CURSOR FOR 
				SELECT KDDID CODEOPTAP , KDDINVEN CODEINVEN FROM [ENVSOURCE] . KPOPTAP WHERE KDDKDBID = CODEOPT 
			DO 
				CALL [ENVCIBLE] . SP_NCHRONO ( 'KDDID' , V_NEWCODEAPP ) ; 
				IF ( CODEINVEN != 0 ) THEN 
					CALL [ENVCIBLE] . SP_SECOPID ( P_CODECNV , 0 , P_TYPECNV , 'KBEID' , CODEINVEN , V_NEWCODEINVEN ) ; 
				END IF ; 
			 
				INSERT INTO [ENVCIBLE] . KPOPTAP 
					( SELECT V_NEWCODEAPP , KDDTYP , KDDIPB , KDDALX , KDDFOR , KDDOPT , V_NEWCODEOPTION , KDDPERI , KDDRSQ , 
						KDDOBJ , V_NEWCODEINVEN , KDDINVEP , KDDCRU , KDDCRD , KDDMAJU , KDDMAJD 
					FROM [ENVSOURCE] . KPOPTAP WHERE KDDID = CODEOPTAP ) ; 
			END FOR ; 
		END FOR ; 
	END FOR ; 
	/* TRAITEMENT KPINVEN */ 
	FOR LOOP_INVEN AS FREE_LIST CURSOR FOR 
		SELECT KBEID CODEINVEN , KBEKADID INVENDESI FROM [ENVSOURCE] . KPINVEN WHERE KBEIPB = P_CODECNV AND KBEALX = 0 AND KBETYP = P_TYPECNV 
	DO 
		IF ( INVENDESI != 0 ) THEN 
			CALL [ENVCIBLE] . SP_SECOPID ( P_CODECNV , 0 , P_TYPECNV , 'KADCHR' , INVENDESI , V_NEWCODEDESI ) ; 
			IF ( V_NEWCODEDESI = 0 ) THEN 
				CALL [ENVCIBLE] . SP_NCHRONO ( 'KADCHR' , V_NEWCODEDESI ) ; 
				CALL [ENVCIBLE] . SP_INCOPID ( P_CODECNV , 0 , P_TYPECNV , 'KADCHR' , INVENDESI , V_NEWCODEDESI ) ; 
			END IF ; 
		END IF ; 
		CALL [ENVCIBLE] . SP_NCHRONO ( 'KBEID' , V_NEWKBEID ) ; 
		INSERT INTO [ENVCIBLE] . KPINVEN 
			( SELECT V_NEWKBEID , KBETYP , KBEIPB , KBEALX , KBECHR , KBEDESC , KBEKAGID , V_NEWCODEDESI , 
				KBEREPVAL , KBEVAL , KBEVAA , KBEVAW , KBEVAT , KBEVAU , KBEVAH , KBEIVO , KBEIVA , KBEIVW 
			FROM [ENVSOURCE] . KPINVEN WHERE KBEID = CODEINVEN ) ; 
		/* TRAITEMENT KPINVED */ 
		FOR LOOP_INVED AS FREE_LIST CURSOR FOR 
			SELECT KBFID CODEINVED , KBFKADID INVEDDESI FROM [ENVSOURCE] . KPINVED WHERE KBFKBEID = CODEINVEN 
		DO 
			IF ( INVEDDESI != 0 ) THEN 
				CALL [ENVCIBLE] . SP_SECOPID ( P_CODECNV , 0 , P_TYPECNV , 'KADCHR' , INVEDDESI , V_NEWCODEDESI ) ; 
				IF ( V_NEWCODEDESI = 0 ) THEN 
					CALL [ENVCIBLE] . SP_NCHRONO ( 'KADCHR' , V_NEWCODEDESI ) ; 
					CALL [ENVCIBLE] . SP_INCOPID ( P_CODECNV , 0 , P_TYPECNV , 'KADCHR' , INVEDDESI , V_NEWCODEDESI ) ; 
				END IF ; 
			END IF ; 
	 
			CALL [ENVCIBLE] . SP_NCHRONO ( 'KBFID' , V_NEWKBFID ) ; 
			INSERT INTO [ENVCIBLE] . KPINVED 
				( SELECT V_NEWKBFID , KBFTYP , KBFIPB , KBFALX , V_NEWKBEID , KBFNUMLGN , KBFDESC , V_NEWCODEDESI , KBFSITE , 
					KBFNTLI , KBFCP , KBFVILLE , KBFADH , KBFDATDEB , KBFDEBHEU , KBFDATFIN , KBFFINHEU , KBFMNT1 , KBFMNT2 , KBFNBEVN , 
					KBFNBPER , KBFNOM , KBFPNOM , KBFDATNAI , KBFFONC , KBFCDEC , KBFCIP , KBFACCS , KBFAVPR , KBFMSR , KBFCMAT , KBFSEX , KBFMDQ , KBFMDA , KBFACTP , 
					KBFKADFH , KBFEXT , KBFMNT3 , KBFMNT4 , KBFQUA , KBFREN , KBFRLO , 
					KBFPAY , KBFSIT2 , KBFADH2 , KBFSIT3 , KBFADH3 , KBFDES2 , KBFDES3 , KBFDES4 , KBFMRQ , KBFMOD , KBFMIM 
				FROM [ENVSOURCE] . KPINVED WHERE KBFID = CODEINVED ) ; 
		END FOR ; 
		/* TRAITMENT KPINVAPP */ 
		INSERT INTO [ENVCIBLE] . KPINVAPP 
			( SELECT KBGTYP , KBGIPB , KBGALX , KBGNUM , V_NEWKBEID , KBGPERI , KBGRSQ , KBGOBJ , KBGFOR , KBGGAR 
			FROM [ENVSOURCE] . KPINVAPP WHERE KBGKBEID = CODEINVEN ) ; 
	END FOR ; 
	 
	/* TRAITEMENT DE COPIE DES EXPRESSIONS COMPLEXES */ 
	FOR LOOP_EXPFRH AS FREE_LIST CURSOR FOR 
		SELECT KFLIDO V_OLDFRH , KFLIDC V_NEWFRH FROM [ENVCIBLE] . KPCOPID 
			WHERE KFLTYP = P_TYPECNV AND KFLIPB = P_CODECNV AND KFLALX = 0 AND KFLTAB IN ( 'KAAKDKID' , 'KABKDKID' , 'KDKID' ) 
	DO 
	 
		SELECT KDKDESI INTO V_DESIFRH FROM [ENVSOURCE] . KPEXPFRH WHERE KDKID = V_OLDFRH ; 
		SET V_NEWCODEDESI = 0 ; 
		IF ( V_DESIFRH > 0 ) THEN 
			CALL [ENVCIBLE] . SP_SECOPID ( P_CODECNV , 0 , P_TYPECNV , 'KADCHR' , V_DESIFRH , V_NEWCODEDESI ) ; 
			IF ( V_NEWCODEDESI = 0 ) THEN 
				CALL [ENVCIBLE] . SP_NCHRONO ( 'KADCHR' , V_NEWCODEDESI ) ; 
				CALL [ENVCIBLE] . SP_INCOPID ( P_CODECNV , 0 , P_TYPECNV , 'KADCHR' , V_DESIFRH , V_NEWCODEDESI ) ; 
			END IF ; 
		END IF ; 
		INSERT INTO [ENVCIBLE] . KPEXPFRH 
			( KDKID , KDKTYP , KDKIPB , KDKALX , KDKFHE , KDKDESC , KDKDESI , KDKORI , KDKMODI ) 
		( SELECT V_NEWFRH , KDKTYP , KDKIPB , KDKALX , KDKFHE , KDKDESC , V_NEWCODEDESI , KDKORI , KDKMODI 
			FROM [ENVSOURCE] . KPEXPFRH WHERE KDKID = V_OLDFRH ) ; 
	 
		FOR LOOP_EXPFRHD AS FREE_LIST CURSOR FOR 
			SELECT KDLORDRE ORDRE , KDLFHVAL FHVAL , KDLFHVAU FHVAU , KDLFHBASE FHBASE , 
				KDLIND IND , KDLIVO IVO , KDLFHMINI FHMINI , KDLFHMAXI FHMAXI , KDLLIMDEB LIMDEB , KDLLIMFIN LIMFIN 
			FROM [ENVSOURCE] . KPEXPFRHD WHERE KDLKDKID = V_OLDFRH 
		DO 
		 
			CALL [ENVCIBLE] . SP_NCHRONO ( 'KDLID' , V_NEWFRHDID ) ; 
			INSERT INTO [ENVCIBLE] . KPEXPFRHD 
				( KDLID , KDLKDKID , KDLORDRE , KDLFHVAL , KDLFHVAU , KDLFHBASE , KDLIND , KDLIVO , KDLFHMINI , KDLFHMAXI , KDLLIMDEB , KDLLIMFIN ) 
			VALUES 
				( V_NEWFRHDID , V_NEWFRH , ORDRE , FHVAL , FHVAU , FHBASE , IND , IVO , FHMINI , FHMAXI , LIMDEB , LIMFIN ) ; 
		END FOR ; 
	END FOR ; 
	 
	FOR LOOP_EXPLCI AS FREE_LIST CURSOR FOR 
		SELECT KFLIDO V_OLDLCI , KFLIDC V_NEWLCI FROM [ENVCIBLE] . KPCOPID 
		WHERE KFLTYP = P_TYPECNV AND KFLIPB = P_CODECNV AND KFLALX = 0 AND KFLTAB IN ( 'KAAKDIID' , 'KABKDIID' , 'KDIID' ) 
	DO 
		SELECT KDIDESI INTO V_DESILCI FROM [ENVSOURCE] . KPEXPLCI WHERE KDIID = V_OLDLCI ; 
		SET V_NEWCODEDESI = 0 ; 
		IF ( V_DESILCI > 0 ) THEN 
			CALL [ENVCIBLE] . SP_SECOPID ( P_CODECNV , 0 , P_TYPECNV , 'KADCHR' , V_DESILCI , V_NEWCODEDESI ) ; 
			IF ( V_NEWCODEDESI = 0 ) THEN 
				CALL [ENVCIBLE] . SP_NCHRONO ( 'KADCHR' , V_NEWCODEDESI ) ; 
				CALL [ENVCIBLE] . SP_INCOPID ( P_CODECNV , 0 , P_TYPECNV , 'KADCHR' , V_DESILCI , V_NEWCODEDESI ) ; 
			END IF ; 
		END IF ; 
		INSERT INTO [ENVCIBLE] . KPEXPLCI 
			( KDIID , KDITYP , KDIIPB , KDIALX , KDILCE , KDIDESC , KDIDESI , KDIORI , KDIMODI ) 
		( SELECT V_NEWLCI , KDITYP , KDIIPB , KDIALX , KDILCE , KDIDESC , V_NEWCODEDESI , KDIORI , KDIMODI 
			FROM [ENVSOURCE] . KPEXPLCI WHERE KDIID = V_OLDLCI ) ; 
	 
		FOR LOOP_EXPLCID AS FREE_LIST CURSOR FOR 
			SELECT KDJORDRE ORDRE , KDJLCVAL LCVAL , KDJLCVAU LCVAU , KDJLCBASE LCBASE , KDJLOVAL LOVAL , KDJLOVAU LOVAU , KDJLOBASE LOBASE 
				FROM [ENVSOURCE] . KPEXPLCID WHERE KDJKDIID = V_OLDLCI 
		DO 
			CALL [ENVCIBLE] . SP_NCHRONO ( 'KDJID' , V_NEWLCIDID ) ; 
			INSERT INTO [ENVCIBLE] . KPEXPLCID 
				( KDJID , KDJKDIID , KDJORDRE , KDJLCVAL , KDJLCVAU , KDJLCBASE , KDJLOVAL , KDJLOVAU , KDJLOBASE ) 
			VALUES 
				( V_NEWLCIDID , V_NEWLCI , ORDRE , LCVAL , LCVAU , LCBASE , LOVAL , LOVAU , LOBASE ) ; 
		END FOR ; 
	END FOR ; 
	 
	/* TRAITEMENT DE COPIE DES ID */ 
	FOR LOOP_COPID AS FREE_LIST CURSOR FOR 
		SELECT KFLTAB V_TABLE , KFLIDO V_OLDCODE , KFLIDC V_NEWCODE FROM [ENVCIBLE] . KPCOPID 
			WHERE KFLTYP = P_TYPECNV AND KFLIPB = P_CODECNV AND KFLALX = 0 
	DO 
		IF ( V_OLDCODE != 0 ) THEN 
			CASE V_TABLE 
				WHEN 'YADRESS' THEN 
					INSERT INTO [ENVCIBLE] . YADRESS 
						( SELECT V_NEWCODE , ABPLG3 , ABPNUM , ABPEXT , ABPLBN , ABPLG4 , ABPL4F , ABPLG5 , ABPDP6 , ABPCP6 , ABPVI6 , 
							ABPCDX , ABPCEX , ABPL6F , ABPPAY , ABPLOC , ABPMAT , ABPRET , ABPERR , ABPMJU , ABPMJA , ABPMJM , ABPMJJ , ABPVIX 
						FROM [ENVSOURCE] . YADRESS WHERE ABPCHR = V_OLDCODE ) ; 
				 
				WHEN 'KAJCHR' THEN 
					INSERT INTO [ENVCIBLE] . KPOBSV 
						( SELECT V_NEWCODE , KAJTYP , KAJIPB , KAJALX , KAJTYPOBS , KAJOBSV 
						FROM [ENVSOURCE] . KPOBSV WHERE KAJCHR = V_OLDCODE ) ; 
				 
				WHEN 'KADCHR' THEN 
					INSERT INTO [ENVCIBLE] . KPDESI 
						( SELECT V_NEWCODE , KADTYP , KADIPB , KADALX , KADPERI , KADRSQ , KADOBJ , TRIM ( KADDESI ) 
						FROM [ENVSOURCE] . KPDESI WHERE KADCHR = V_OLDCODE ) ; 
				 
				ELSE 
					SET V_EXIT = 1 ; 
			END CASE ; 
		END IF ; 
	 
	END FOR ; 
	/* TRAITEMENT KPCLAUSE */ 
	FOR LOOP_CLAUSE AS FREE_LIST CURSOR FOR 
		SELECT KCAID CODECLAUSE , KCAINVEN CODEINVEN , KCATYPD TYPEDOCAJOUTE , KCATXL CODECLIBRE FROM [ENVSOURCE] . KPCLAUSE WHERE KCAIPB = P_CODECNV AND KCAALX = 0 AND KCATYP = P_TYPECNV 
	DO 
		IF ( CODEINVEN != 0 ) THEN 
			CALL [ENVCIBLE] . SP_SECOPID ( P_CODECNV , 0 , P_TYPECNV , 'KBEID' , CODEINVEN , V_NEWP_CODEINVEN ) ; 
		END IF ; 
		IF ( CODECLIBRE = 0 ) THEN 
			CALL [ENVCIBLE] . SP_NCHRONO ( 'KCAID' , V_NEWCODECLAUSE ) ; 
			INSERT INTO [ENVCIBLE] . KPCLAUSE 
				( SELECT V_NEWCODECLAUSE , KCATYP , KCAIPB , KCAALX , KCAETAPE , KCAPERI , KCARSQ , KCAOBJ , V_NEWP_CODEINVEN , KCAINLGN , 
					KCAFOR , KCAOPT , KCAGAR , KCACTX , KCAAJT , KCANTA , KCAKDUID , KCACLNM1 , KCACLNM2 , KCACLNM3 , KCAVER , KCATXL , KCAMER , KCADOC , 
					KCACHI , KCACHIS , KCAIMP , KCACXI , KCAIAN , KCAIAC , KCASIT , KCASITD , KCAAVNC , KCACRD , KCAAVNM , KCAMAJD , KCASPA , KCATYPO , KCAAIM , KCATAE , 
					KCAELGO , KCAELGI , KCAXTL , KCATYPD , KCAETAFF , KCAXTLM 
				FROM [ENVSOURCE] . KPCLAUSE 
				WHERE KCAID = CODECLAUSE ) ; 
		END IF ; 
	END FOR ; 
	/* TRAITEMENT KPINTER */ 
	FOR LOOP_INTER AS FREE_LIST CURSOR FOR 
		SELECT KHBID CODEINTER FROM [ENVSOURCE] . KPINTER WHERE KHBIPB = P_CODECNV AND KHBALX = 0 AND KHBTYP = P_TYPECNV 
	DO 
		CALL [ENVCIBLE] . SP_SECOPID ( P_CODECNV , 0 , P_TYPECNV , 'KPINTER' , CODEINTER , V_NEWCODEINTER ) ; 
		IF ( V_NEWCODEINTER = 0 ) THEN 
			CALL [ENVCIBLE] . SP_NCHRONO ( 'KHBID' , V_NEWCODEINTER ) ; 
			CALL [ENVCIBLE] . SP_INCOPID ( P_CODECNV , 0 , P_TYPECNV , 'KPINTER' , CODEINTER , V_NEWCODEINTER ) ; 
		END IF ; 
		INSERT INTO [ENVCIBLE] . KPINTER 
		( SELECT V_NEWCODEINTER , KHBTYP , KHBIPB , KHBALX , KHBTYI , KHBIIN , KHBINL , KHBREF , KHBOBSV , KHBPRP , KHBMDC 
		FROM [ENVSOURCE] . KPINTER 
		WHERE KHBID = CODEINTER ) ; 
	END FOR ; 
END P1
